<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Wektory</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how vectors work" />
  <meta name="rh-index-keywords" content="Vectors" />
  <meta name="search-keywords" content="Vectors,vector maths" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Wektory</h1>
  <p>Tworząc grę o dowolnej złożoności, w pewnym momencie prawdopodobnie będziesz musiał zmierzyć się z <strong>wektorami</strong>. Używa się ich w fizyce, sztucznej inteligencji, trygonometrii i wielu innych sytuacjach, ale czym jest wektor? Najprościej rzecz ujmując, wektor to <em>wielkość skierowana</em>. Zacznijmy od przyjrzenia się wektorowi jednowymiarowemu - który jest tym samym, co pojedyncza liczba - rysując numerowaną linię ze strzałką zaczynającą się od zera i kończącą na 5. Jest to wektor &quot;a&quot;, który jest równy 5, a jeśli narysujemy kolejną strzałkę zaczynającą się od 5 i kończącą na 8, otrzymamy wektor &quot;b&quot;, który jest równy 3:</p>
  <p><img>Należy sobie uświadomić, że nie ma znaczenia, gdzie wektor ma swój początek, liczy się tylko jego długość i kierunek. Tak więc wektor &quot;b&quot; zaczyna się od 5, ma długość 3 jednostek i jest skierowany w prawo, co czyni go identycznym z wektorem zaczynającym się od 0 i zmierzającym do 3. Teraz możesz również dodać te wektory do siebie, kładąc dwa wektory &quot;a&quot; i &quot;b&quot; końcem do końca, aby otrzymać wektor &quot;c&quot;, który jest równy 8. A co z liczbami ujemnymi? Cóż, jeśli na powyższym rysunku wektor skierowany w prawo odpowiada liczbie dodatniej, to wektor skierowany w lewo odpowiadałby liczbie ujemnej, co sprawia, że wektor jednowymiarowy jest niczym innym jak liczbą podpisaną (+/-). Wyjaśnia to zasadniczą koncepcję wektora: liczy się tylko <em>długość</em> i <em>kierunek</em> (&quot;w lewo&quot; lub &quot;w prawo&quot; w tym przypadku), a nie położenie.</p>
  <p>A co z wektorami dwuwymiarowymi? Cóż, możemy o nich myśleć jako o wektorach składających się nie tylko z &quot;lewej&quot; i &quot;prawej&quot;, ale także z &quot;góry&quot; i &quot;dołu&quot;:</p>
  <p><img>To jeszcze nie są wektory, ponieważ musimy je jeszcze zredukować, używając ich współrzędnych początkowych i końcowych. Patrząc na wektor &quot;a&quot;, widzimy, że ma on współrzędną początkową [2,2] i końcową [4,3], a zatem aby otrzymać z niego wektor, musimy go zredukować, odejmując współrzędną końcową od współrzędnej początkowej w następujący sposób:</p>
  <p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p>
  <p>Podobnie postąpmy teraz z wektorem b:</p>
  <p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p>
  <p>Zauważyłeś coś? Te dwa wektory są takie same! To jeszcze jeden dowód na to, że wektor nie ma położenia, a jedynie kierunek i długość, i że możemy narysować te wektory względem siebie wokół lokalnej osi [0,0]:</p>
  <p><img>Oznacza to, że wektor 2D jest definiowany przez dwie wartości, pozycję &quot;x&quot; i &quot;y&quot; względem lokalnej osi [0,0]. A co z wektorami 3D? Cóż, mają one do czynienia z dodatkowym wymiarem &quot;głębokości&quot; i byłyby obliczane jako pozycje &quot;x&quot;, &quot;y&quot; i &quot;z&quot; wokół lokalnej osi, mniej więcej tak jak poniżej:</p>
  <p><img>Dobrym przykładem wektora używanego w programie <span data-keyref="GameMaker Name">GameMaker</span> jest właściwość fizyki <strong>grawitacji</strong> w edytorze <span class="notranslate">room</span>. Grawitacja jest obliczana jako wektor wokół pozycji [0,0]. Jeśli więc zdefiniujesz grawitację jako [x0, y10], grawitacja będzie skierowana w <em>dół</em> z siłą równą 10.</p>
  <p>Zwykle wektory można wykorzystywać w wielu sytuacjach, ale czasami chcemy ograniczyć ich wartość (np. w przypadku kątów), dlatego też dokonujemy ich <strong>normalizacji </strong>. Jest to sztuczka matematyczna służąca do przekształcenia wektora o długości <em>n</em> na wektor o długości 1, co oznacza, że składowe wektora są <em>normalizowane </em>do wartości z przedziału od 0 do 1. Wektory takie nazywane są również <strong>wektorami jednostkowymi</strong>:</p>
  <p><img>Aby obliczyć wektor znormalizowany, musimy najpierw mieć oryginalne składowe wektora, a następnie użyć ich do uzyskania długości wektora. Następnie dzielimy każdą ze składowych wektora przez tę długość, aby otrzymać znormalizowane składowe wektora, które tworzą wektor znormalizowany, w którym <strong>suma kwadratów wszystkich współrzędnych jest równa 1</strong>. Oto, jak to zrobić:</p>
  <p><img>Najpierw bierzemy współrzędne wektora i otrzymujemy jego składowe:</p>
  <p class="code">vx = (x2 - x1) = (7 - 1) = 6<br />
    vy = (y2 - y1) = (4 - 1) = 3</p>
  <p>Następnie wykorzystujemy te wartości do obliczenia długości wektora:</p>
  <p class="code">len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369</p>
  <p>Teraz otrzymujemy dokładną długość wektora &quot;a&quot;, więc wykorzystajmy ją do znormalizowania dwóch składowych wektora <span class="inline">vx</span> i <span class="inline">vy</span>:</p>
  <p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br />
    vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p>
  <p>Świetnie! Znormalizowaliśmy składowe wektora! Ale jakie praktyczne zastosowanie ma to w kontekście <span data-keyref="GameMaker Name">GameMakera</span>? Dobrze, podajmy praktyczny przykład...</p>
  <p>Załóżmy, że mamy grę, w której gracz musi strzelać do przeciwnika i musimy wiedzieć, o ile razy kula <span class="notranslate">object</span> musi się przesunąć wzdłuż osi x i y w każdym kroku, aby w niego trafić:</p>
  <p><img>W tym celu należy użyć współrzędnych gracza i wroga, aby uzyskać składowe wektora i jego długość, a następnie znormalizować je, aby uzyskać wartość z przedziału od 0 do 1, którą należy pomnożyć przez prędkość, z jaką pocisk ma się poruszać w każdym kroku. Te dwie ostatnie wartości należy zapisać i dodać do początkowych współrzędnych x i y w każdym kroku. Brzmi skomplikowanie? Nie jest, spójrz (dla uproszczenia wartości zostały zaokrąglone do jednego miejsca po przecinku):</p>
  <p class="code">px = 100;<br />
    py = 425;<br />
    ex = 356;<br />
    ey = 83;<br />
    bullet_speed = 5;<br />
    <br />
    vx = (ex - px); // = 256<br />
    vy = (ey - py); // = -342<br />
    <br />
    len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2<br />
    <br />
    vx = vx / len; // = 0.6<br />
    vy = vy / len; // = 0.8<br />
    <br />
    speed_x = vx * bullet_speed; // = 3<br />
    speed_y = vy * bullet_speed; // = 4
  </p>
  <p>Aby trafić w cel, musimy co krok dodawać 3 do współrzędnej x pocisku i 4 do jego współrzędnej y.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Additional_Information.htm">Informacje dodatkowe</a></div>
        <div style="float:right">Następny: <a href="Guide_To_Using_Buffers.htm">Przewodnik po używaniu buforów</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>