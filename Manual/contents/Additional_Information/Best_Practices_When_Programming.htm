<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Najlepsze praktyki podczas programowania</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Najlepsze praktyki podczas programowania</h1>
  <p>Na tej stronie zamierzamy omówić kilka &quot;najlepszych praktyk&quot; przy programowaniu gry, a jednocześnie wyjaśnić trochę o wewnętrznym działaniu <span data-keyref="GameMaker Name">GameMakera</span>. Zanim jednak przejdziemy dalej, warto zwrócić uwagę na dwie bardzo ważne kwestie:</p>
  <ul class="colour">
    <li>To jest <em>przewodnik</em>, a nie be-all-end-all-definitive-100%-perfect metoda, aby napisać swoją grę! Rzeczy wymienione tutaj są ogólnie bardziej na skali organizacyjnej i mikrooptymalizacji i powinny być włączone do twoich nawyków programistycznych, gdy czujesz się komfortowo z <span class="notranslate">GML</span> i uważasz, że są odpowiednie.</li>
    <li>Jeśli Twoja gra działa dobrze i jesteś zadowolony z tego co jest, to <em>nie spiesz się, aby zmienić wszystko tylko po to, aby wycisnąć kilka dodatkowych FPS</em>. Musisz znaleźć równowagę pomiędzy czytelnym, elastycznym i modularnym kodem, a czasem i energią potrzebną do zmiany rzeczy, jak również ogólnym zyskiem na końcu. Zasadniczo, jeśli nie jest zepsuty, nie naprawiaj go i zachowaj to, czego nauczyłeś się tutaj, dla swojego następnego projektu.</li>
  </ul>
  <p>W związku z tym, przejdźmy dalej i spójrzmy na kilka ogólnych wskazówek dotyczących pisania dobrego kodu <span class="notranslate">GML</span>, które można zastosować w dowolnym momencie...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Styl programowania</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Jeśli chodzi o pisanie kodu, każdy ma swój <em>styl</em>. Styl, w którym programujesz, to sposób, w jaki umieszczasz nawiasy, jak wcina się linie, jak deklarujesz i nazywasz zmienne itp. i jest niezbędny, aby twój kod był jasny i czytelny dla innych ludzi (i dla twojego przyszłego ja, kiedy będziesz musiał wrócić do tego projektu po czasie spędzonym nad czymś innym).</p>
    <p class="dropspot">Istnieje wiele, wiele <a href="http://en.wikipedia.org/wiki/Programming_style">stylów programowania</a>, a niektórzy twierdzą, że ich jest najlepszy do użycia, ale prawda jest taka, że prawie każdy styl jest w porządku, o ile jesteś <strong>konsekwentny </strong>podczas korzystania z niego i jest <em>jasne </em>i <em>oczywiste </em>, co wszystko jest i robi.</p>
    <p class="dropspot"><img>Powyższy obraz jest przykładem deklaracji funkcji w <span class="notranslate">script</span>, aby zilustrować powyższe punkty. Możesz zobaczyć, że używa komentarzy w stylu JSDoc, aby wyraźnie wyjaśnić, co to wszystko robi, a styl kodowania jest spójny, z 4 spacjami wcięciami, podkreśleniami używanymi do lokalnych vars, logowanym wyjściem, itp.</p>
    <p class="dropspot">Zauważ również, że podczas gdy edytor <span class="notranslate">script</span> pozwala na składanie kodu w każdym z nawiasów otwierających/zamykających, możesz użyć znaczników <span class="inline">#region</span> i <span class="inline">#endregion</span>, aby wydzielić części kodu i znacznie zwiększyć czytelność, zwłaszcza gdy masz do czynienia z większymi <span class="notranslate">scripts</span>, które zawierają wiele funkcji. Regiony można też komentować - patrz rozdział Edycja na tej stronie w podręczniku):</p>
    <p class="dropspot"><img>Kiedy piszesz kod, powinieneś być świadomy tego, że podczas kompilacji Twojej finalnej gry, <span data-keyref="GameMaker Name">GameMaker</span> usuwa komentarze, usuwa niepotrzebne przerwy w liniach i białe przestrzenie, zastępuje wartości stałe/makro/enum i ogólnie kompresuje Twój kod jako część procesu. Oznacza to, że możesz dodać tyle białej przestrzeni wokół swojego kodu, ile potrzebujesz i nie musisz się martwić o to, że komentarze będą krótkie lub że będziesz ich używał oszczędnie.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Używanie zmiennych lokalnych</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Kontynuując powyższy punkt dotyczący stylu programowania, jedną z rzeczy, którą robi wielu początkujących, jest upchnięcie jak najwięcej w jednej linii kodu. Na przykład:</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">Chociaż nie jest całkowicie nieczytelny, jest nieefektywny (funkcja <span class="inline">point_direction()</span> jest wywoływana dwa razy, na przykład) i jest niechlujny i niewygodny do oglądania. Byłoby to o wiele lepiej wyrażone jako:</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">Pamięć i zasoby wymagane do stworzenia tych zmiennych lokalnych są znikome i są znacznie przewyższone przez natychmiastową korzyść, jaką ty (lub ktokolwiek inny czytający kod później) otrzymuje z jego przejrzystości. Ta sama idea powinna być stosowana również do funkcji, gdzie powinieneś przypisać rozsądne nazwy do zmiennych wejściowych i użyć wyraźnego formatowania i zmiennych lokalnych, gdzie jest to wymagane, aby uczynić go tak czytelnym, jak to możliwe.</p>
    <p class="dropspot">Zmienne lokalne są szybko przetwarzane w grze, więc wykorzystaj je jak najlepiej, a jeśli jakieś wyrażenie pojawia się w bloku kodu lub na stronie <span class="notranslate">script</span> dwa lub więcej razy, pomyśl o stworzeniu dla niego zmiennej lokalnej. Podczas korzystania z celów <a class="glossterm" data-glossterm="YoYo Compiler (YYC)" href="#">YoYo Compiler (YYC)</a>, jeśli odwołujesz się do <span class="inline">global</span> lub zmiennych instancji wiele razy w funkcji lub bloku kodu, szczególnie korzystne jest przypisanie ich do zmiennej lokalnej na początku kodu, a następnie odwołanie się do tej zmiennej lokalnej, ponieważ daje to znacznie lepszą wydajność.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Tablice</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Overview/Arrays.htm">Tablice</a> są szybkie w użyciu i wymagają mniej pamięci niż struktury danych, ale można je jeszcze bardziej zoptymalizować. Kiedy tworzysz tablicę, pamięć jest przydzielana na podstawie jej rozmiaru, więc powinieneś spróbować zainicjować tablicę do jej maksymalnego rozmiaru, nawet jeśli nie planujesz jej wypełnienia do późniejszego czasu. Na przykład, jeśli wiesz, że potrzebujesz tablicy do przechowywania maksymalnie 100 wartości, zainicjalizowałbyś ją od razu do 100 slotów, używając <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> funkcja:</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">To przydziela pamięć dla niej w jednym &quot;kawałku&quot; z wszystkimi wartościami tablicy ustawionymi na domyślną wartość 0 i pomaga utrzymać rzeczy szybko, ponieważ w przeciwnym razie za każdym razem, gdy dodajesz nową wartość do tablicy, cała pamięć musi być ponownie przydzielona.</p>
    <p class="note"><span class="note">UWAGA</span> Na celu HTML5 przypisywanie tablic w ten sposób nie ma zastosowania, a twoje tablice powinny być inicjalizowane od 0 dla tego celu! Możesz łatwo sobie z tym poradzić, sprawdzając zmienną os_browser, na przykład:</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">Możesz również zwolnić pamięć związaną z tablicą, ustawiając używaną zmienną na równość 0. Tak więc, aby wyczyścić tablicę z powyższego przykładu kodu, po prostu użyłbyś:</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">Zauważ również, że tablice są <strong>przekazywane przez odniesienie</strong>, ale będą kopiować całość, gdy nastąpi zmiana (to zachowanie nazywa się <strong>copy on write</strong>). Tak więc, jeśli przekazujesz tablicę do funkcji, przekazujesz <em>referencję </em>do oryginalnej tablicy, a wszelkie wartości odczytane z niej będą pochodzić z oryginalnego źródła. Jest to miłe i szybkie, ale jeśli musisz zmodyfikować dowolną wartość tablicy, sama tablica jest duplikowana w punkcie zapisu, a wszelkie dokonane zmiany <strong>muszą zostać zwrócone z funkcji lub zostaną utracone</strong>. Jest to znacznie wolniejsze i zużywa więcej pamięci, więc uważaj, jak używasz tablic w funkcjach.</p>
    <p class="dropspot">Można jednak uniknąć tego zachowania copy on write, używając specjalnego <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accessora</a> tablicowego <span class="inline">@</span>, ponieważ daje to bezpośredni <a href="../GameMaker_Language/GML_Overview/Accessors.htm">dostęp</a> do tablicy bazowej. Na przykład:</p>
    <p class="code">// Call a function, passing our array<br />
      my_function(my_array);</p>
    <p class="code">// The function looks like this:<br />
      <br />
      function my_function(_a)<br />
      {<br />
          // The array will be copied and the copy modified,<br />
          // requiring you to use &quot;return _a&quot;, later<br />
          _a[0] = 100;<br />
      <br />
          // This will modify the ORIGINAL array directly and<br />
          // does not require it to be returned<br />
          _a[@ 0] = 100;<br />
      }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Struktury danych</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">W <span data-keyref="GameMaker Name">GameMakerze</span> <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">struktury danych</a> zostały zoptymalizowane tak, aby były o wiele szybsze niż w poprzednich wersjach <span class="notranslate">GameMaker</span>. Nadal muszą być czyszczone (niszczone), gdy nie są używane, aby zwolnić pamięć, i nadal mogą być wolniejsze niż, powiedzmy, tablice, ale łatwość użycia i dodatkowe funkcje do radzenia sobie z danymi, które zawierają, często przewyższają minimalną różnicę w prędkości, więc nie bój się używać ich w swoich grach.</p>
    <p class="dropspot">Należy zauważyć, że ze wszystkich struktur danych, DS Maps w szczególności są oświetleniem szybkie, zarówno do odczytu z i zapisu do, co czyni je doskonałą opcją dla wszystkich rodzajów zadań.</p>
    <p class="dropspot">Wcześniej wspomnieliśmy o <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accessorach</a> dla tablic, ale są one również dostępne dla struktur danych, co może pomóc w oczyszczeniu twojego kodu i uczynić go znacznie łatwiejszym do odczytania.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Kolizje</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Istnieje <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">wiele sposobów radzenia sobie z kolizjami</a> w <span data-keyref="GameMaker Name">GameMakerze</span>, a większość z nich wiąże się z dodatkowym obciążeniem procesora. Funkcje <span class="inline">collision_</span> i <span class="inline">point_</span>, <span class="inline">place_</span> oraz <span class="inline">instance_</span> polegają na sprawdzaniu pól <a class="glossterm" data-glossterm="ramka ograniczająca" href="#">ograniczających</a> dla wszystkich instancji danego typu w obrębie <span class="notranslate">room</span> i chociaż silnik posiada pewną optymalizację, która ogranicza te sprawdzenia, kolizje nigdy nie są najbardziej wydajną rzeczą. Jeśli zaczniesz używać precyzyjnych kolizji, wydajność również ulegnie zauważalnemu pogorszeniu, ponieważ nie tylko będziesz sprawdzał bounding box, ale również będziesz sprawdzał per-pixel, co jest bardzo powolne.</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">Nie oznacza to, że nie powinieneś używać tych funkcji, ponieważ mogą być bardzo przydatne. Powinieneś jednak wiedzieć, których z nich używać i kiedy, ponieważ wszystkie działają nieco inaczej i mają różne prędkości. Z grubsza zasada jest taka, że funkcje <span class="inline">place_</span> są szybsze niż funkcje <span class="inline">instance_</span>, które są szybsze niż funkcje <span class="inline">collision_</span> i <span class="inline">point_</span>, więc przeczytaj strony w instrukcji dla każdego z tych typów funkcji i upewnij się, że wybierasz najbardziej odpowiednie dla każdej sytuacji.</p>
    <p class="dropspot">Alternatywnie, spójrz na stworzenie<strong> systemu kolizji opartego na kafelkach</strong>, które można utworzyć za pomocą <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">funkcji tilemap</a> lub nawet niestandardowej tablicy 2D lub siatki DS. Będą one bardzo szybkie i pomogą zwiększyć szybkość gry. Jednakże, jeśli używasz nieregularnego terenu lub ścian i <span class="notranslate">objects</span>, które nie są wyrównane do siatki, mogą one nie być odpowiednie. Bardzo prosty tutorial na temat kolizji z mapami można znaleźć w poniższym linku wideo</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Kolizje kafelków w <span data-keyref="GameMaker Name">GameMakerze</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Zamiana tekstur i partie wierzchołków</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Jeśli <span class="notranslate">switch</span> na <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>nakładka debugowania</strong></a>, zobaczysz, że podczas testowania na górze ekranu znajdują się dwie liczby w nawiasach. Pierwsza to liczba wykonywanych <strong>wymian tekstur </strong>, a druga to liczba <strong>partii wierzchołków</strong>. Wiele czynników ma wpływ na te liczby i nigdy nie uda Ci się ich sprowadzić do (0) (0), ponieważ silnik wymaga jednego lub dwóch z każdego kroku, ale powinieneś dążyć do tego, aby te wartości były jak najniższe.</p>
    <p class="dropspot"><img>W przypadku zamiany <span class="notranslate">texture</span> najlepszym i najbardziej efektywnym sposobem jest optymalizacja sposobu przechowywania <span class="notranslate">sprites</span> i tła na stronie <span class="notranslate">texture</span>. Robi się to we <a href="../The_Asset_Editors/Sprites.htm">właściwościach sprite</a>'a, a strony <span class="notranslate">texture</span> można tworzyć w <a href="../Settings/Texture_Groups.htm">edytorze grup tekstur</a>. Jeśli masz kilka obrazów, które są używane tylko w menu głównym (na przykład), to umieść je razem na osobnej <a href="../Settings/Texture_Information/Texture_Pages.htm">stronie tekstur</a>. To samo, jeśli masz obrazy specyficzne dla poziomu, lub gracza i wrogów, itp. Zasadniczo, chcesz je pogrupować według użycia, aby zamiany były zredukowane tak bardzo, jak to możliwe. Dodatkowo, aby pomóc w optymalizacji <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a>, możesz następnie użyć różnych funkcji <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">prefetch i flush</a>, aby załadować i usunąć <span class="notranslate">textures</span> z pamięci w razie potrzeby.</p>
    <p class="note"><span class="note">UWAGA</span> Jak wspomniano na początku tej strony, jeśli Twoja gra działa dobrze z przyzwoitym FPS, to nie przejmuj się zbytnio podmianami <span class="notranslate">texture</span>... zwłaszcza przy tworzeniu projektów na cele desktopowe. Te optymalizacje są najlepsze, gdy są używane z dużymi grami lub na urządzeniach mobilnych o niskiej wydajności, a gdy są używane niepoprawnie, mogą faktycznie negatywnie wpłynąć na wydajność.</p>
    <p class="dropspot">Informacje o wierzchołkach są wysyłane w &quot;partiach&quot; do GPU w celu rysowania i generalnie im większa partia, tym lepiej. Należy więc unikać &quot;przerywania&quot; partii podczas rysowania, ponieważ zwiększy to liczbę partii wierzchołków wysyłanych do GPU. Istnieje wiele rzeczy, które spowodują przerwanie partii, a główne z nich to <strong>tryby mieszania</strong>, zmiana <strong>shadera</strong>, zmiana uniformu na <span class="notranslate">shader</span> przed rysowaniem czegoś, a także rysowanie przy użyciu wbudowanych kształtów i prymitywów.</p>
    <p class="dropspot">Tak więc, jeśli masz kilka instancji pocisków, które rysują się przy użyciu trybu mieszania <span class="inline">bm_add</span> - na przykład - będziesz tworzyć nową <span class="notranslate">vertex batch</span> dla każdego z nich, co jest zdecydowanie złą rzeczą! Zamiast tego, miej kontroler <span class="notranslate">object</span> w swojej grze, który rysuje wszystkie pociski zamiast tego, jak to:</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">UWAGA</span> To nie dotyczy tylko użycia <span class="inline" style="font-size: 14px">bm_add</span> - każda zmiana mieszania przerwie partię i spowoduje wzrost wydajności.</p>
    <p class="dropspot">W ten sposób wszystkie kule zostaną narysowane w tej samej partii. Rozsądne korzystanie z funkcji. <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>, i <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a> może znacznie poprawić wydajność i mogą być włączone/wyłączone w zależności od potrzeb w całym kodzie projektu, chociaż mogą nie być odpowiednie dla wszystkich rodzajów grafiki lub projektów.</p>
    <p class="note"><span class="note">UWAGA</span> Jeśli nie wymagasz, aby instancja rysowała się podczas używania kontrolera w ten sposób, wtedy możesz po prostu dodać komentarz do zdarzenia Draw, aby stłumić domyślne rysowanie, lub uczynić instancję niewidoczną (chociaż uniemożliwi to cały kod działający dla instancji we wszystkich zdarzeniach draw).</p>
    <p class="dropspot">Innym sposobem na zmniejszenie tych liczb jest wyłączenie opcji <strong>Oddzielna strona <span class="notranslate">Texture</span> </strong> dla <span class="notranslate">sprites</span>, chyba że jest to absolutnie konieczne. Każdy obraz przechowywany w ten sposób jest wysyłany na własną stronę <span class="notranslate">texture</span> i różnie pakowany, więc posiadanie tych obrazów na zwykłej stronie <span class="notranslate">texture</span> jest lepsze. Następnie możesz uzyskać współrzędne UVS używając funkcji <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> i przechowywać je w zmiennych do późniejszego wykorzystania. Może to być niewielka ilość dodatkowego kodu, ale wzrost, który uzyskasz, jest tego wart. Zauważ, że ta metoda nie pozwoli na powtórzenia <span class="notranslate">texture</span>!</p>
    <p class="dropspot">Tak jak w przypadku wszystkich tych porad, jeśli utrudnia ci życie zmiana, a twoja gra działa dobrze, nie przejmuj się tym zbytnio...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Cząstki stałe</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">Cząstki</a> oferują bardzo szybki i wydajny sposób tworzenia dynamicznych efektów w twojej grze i generalnie dają dobrą wydajność. Warto jednak zauważyć, że używanie additive blending, alpha blending i color blending na cząsteczkach może obniżyć tę wydajność, zwłaszcza na urządzeniach mobilnych, więc jeśli nie potrzebujesz tego, nie używaj! Additive blending, w szczególności, może znacznie zwiększyć partie wierzchołków i powinien być używany ostrożnie.</p>
    <p class="dropspot">Zauważ, że w przypadku nie-WebGL HTML5, posiadanie wielokolorowych, zanikających cząstek będzie wymagało dużego buforowania obrazu i będzie bardzo powolne. Jednakże, ponieważ cząstki <span class="notranslate">sprites</span> mogą być animowane, możesz stworzyć animowany <span class="notranslate">sprite</span>, który ma pod-obrazy, które zmieniają kolor, a następnie użyć go dla cząstki zamiast. Nadal będzie to wyglądać jak stopniowa zmiana koloru, ale nie będzie wymagać ciągłego tworzenia obrazów <span class="notranslate">cache</span>.</p>
    <p class="dropspot">Więcej o cząsteczkach można dowiedzieć się ze strony <a href="Guide_To_Using_Particles.htm">Przewodnik po używaniu cząst</a>eczek.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Powierzchnie</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Na koniec poruszymy krótko temat używania <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">powierzchni</a>, ponieważ <span data-keyref="GameMaker Name">GameMaker</span> posiada dość istotną optymalizację przy używaniu ich w swoich grach: możliwość <span class="notranslate">switch</span> włączania i wyłączania <strong>bufora głębi</strong>.</p>
    <p class="dropspot">Kiedy po prostu używasz powierzchni jak zwykle, <span data-keyref="GameMaker Name">GameMaker</span> faktycznie stworzy powierzchnię i towarzyszącą jej głębię <span class="notranslate">buffer</span>, aby zapewnić prawidłowe sortowanie głębokości podczas rysowania czegokolwiek w 3D. Jednak w większości gier 2D, ta dodatkowa głębia <span class="notranslate">buffer</span> nie jest po prostu wymagana i zajmuje dodatkowe miejsce w pamięci i czas przetwarzania, który mógłby być wykorzystany do innych rzeczy. To właśnie tutaj funkcja <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> wchodzi w grę...</p>
    <p class="dropspot">Tę funkcję można wywołać przed utworzeniem powierzchni, aby wyłączyć generowanie głębi <span class="notranslate">buffer</span>, a wszystkie powierzchnie utworzone później nie będą miały utworzonej głębi <span class="notranslate">buffer</span> dla nich. Możesz włączyć/wyłączyć tę funkcję w zależności od potrzeb, a nawet możesz ją wywołać raz na początku gry, aby wyłączyć głębię <span class="notranslate">buffers</span> dla wszystkich kolejnych wywołań powierzchni (w większości gier 2D jest to w porządku). Nie spowoduje to znacznego wzrostu wydajności, ale z pewnością warto o tym pamiętać, jeśli Twoja gra w dużej mierze opiera się na powierzchniach i może powstrzymać grę przed wyczerpaniem pamięci na urządzeniach o niższej specyfikacji.</p>
  </div>
  <p> </p>
  <p>Oprócz głównych rzeczy wymienionych powyżej, istnieją inne bardziej ogólne rzeczy, które mogą pomóc w wydajności i które są również uważane za &quot;dobre praktyki&quot;:</p>
  <ul class="colour">
    <li>nie bój się używać funkcji trygonometrycznych, gdyż (wbrew powszechnej opinii) są one całkiem szybkie, zwłaszcza w porównaniu z cząstkami, kolizjami, <span class="notranslate">strings</span>, itp.</li>
    <li>nie umieszczaj kodu, który nie służy do rysowania rzeczy w zdarzeniach Draw</li>
    <li>użyj alarmu, aby wywołać dowolny kod, który nie musi być wywoływany co krok (zamiast dodawać to do zdarzenia Step i tak)</li>
  </ul>
  <p>Ale, jak wspomnieliśmy na początku strony, wszystkie te optymalizacje są opcjonalne i jeśli twoja gra działa dobrze z 60 partiami wierzchołków, 80 <span class="notranslate">texture</span> swaps, additive blending, itp. to nie przejmuj się tym zbytnio! Po prostu pamiętaj o tych rzeczach podczas programowania następnej gry...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Additional_Information.htm">Informacje dodatkowe.</a></div>
        <div style="float:right">Następny: <a href="The_File_System.htm">System plików</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>