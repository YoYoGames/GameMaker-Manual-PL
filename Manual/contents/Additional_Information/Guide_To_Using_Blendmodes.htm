<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Przewodnik korzystania z Blendmodes</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how blendmodes work." />
  <meta name="rh-index-keywords" content="blendmodes,Guide To Using Blendmodes" />
  <meta name="search-keywords" content="blendmodes,blending,blend modes" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Przewodnik korzystania z Blendmodes</h1>
  <p>Jeśli korzystasz z <span data-keyref="GameMaker Name">GameMakera</span> przez dłuższy czas, z pewnością zetknąłeś się z <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">trybami mieszania</a>, a prawdopodobnie nawet używałeś ich w swoich grach. Tryby mieszania to świetny sposób, by zmienić sposób rysowania czegoś w celu uzyskania interesujących i specyficznych efektów graficznych, ale czy wiesz, jak one działają i jak z nich korzystać? Jest to temat, który może wprawiać ludzi w zakłopotanie, dlatego w tym rozdziale mamy nadzieję rozwiać część tajemnic związanych z trybami mieszania i umożliwić ich pełne wykorzystanie w grach.</p>
  <p> </p>
  <h2>PRZEGLĄD</h2>
  <p>Tryby mieszania pozwalają grze na rysowanie pewnych elementów w połączeniu z innymi, już narysowanymi wcześniej. Wszystko, co rysujesz na ekranie, składa się z czterech części składowych - czerwonej, zielonej, niebieskiej i alfa - i domyślnie jest rysowane na ekranie przy użyciu trybu mieszania <span class="inline">bm_normal</span>. Ten tryb mieszania rysuje wszystkie piksele z ich kolorami i wartościami alfa w zasadzie bez zmian (choć w dalszej części tego rozdziału zobaczysz, że to nie do <em>końca</em> prawda...), ale <span data-keyref="GameMaker Name">GameMaker</span> ma wiele wbudowanych trybów mieszania, które można ustawić, by zmienić to zachowanie.</p>
  <p>Gdy w programie <span data-keyref="GameMaker Name">GameMaker</span> chcemy narysować piksel, mamy do dyspozycji kolor <strong>źródłowy</strong> (kolor piksela, który chcemy narysować) i kolor <strong>docelowy</strong> (kolor, który już znajduje się w pikselu, do którego rysujemy). Podczas określania nowego koloru piksela strona <span class="notranslate">GameMaker</span> połączy kolory źródłowy i docelowy zgodnie z <strong>trybem mieszania</strong>, jak wspomniano powyżej. Każdy składnik kolorów jest przechowywany jako wartość zmiennoprzecinkowa z zakresu od 0 do 1, a nowy kolor jest obliczany przez pomnożenie każdego składnika koloru źródłowego przez pewien współczynnik oraz przez pomnożenie każdego składnika koloru docelowego przez inny współczynnik, a następnie zsumowanie wyników składnik po składniku.</p>
  <p> </p>
  <h2>PODSTAWOWE TRYBY MIESZANIA</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> używa funkcji <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode()</a> do zmiany sposobu mieszania, jakiego używa gra podczas rysowania. Możesz ją wywołać przed (na przykład) narysowaniem strony <span class="notranslate">sprite</span>, a następnie ustawić ją ponownie po zakończeniu rysowania, coś w tym stylu:</p>
  <p class="code">gpu_set_blendmode(bm_add);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>Ten kod rysuje instancję <span class="notranslate">sprite</span> przy użyciu <strong>addytywnego </strong>trybu mieszania. Tryb mieszania addytywnego jest ustawiany za pomocą jednej z dostępnych stałych <span class="notranslate">GML</span>, z których cztery są dostępne dla trybów podstawowych:</p>
  <p class="code">bm_normal<br />
    bm_add<br />
    bm_subtract<br />
    bm_max</p>
  <p>Widzieliśmy już, jak wygląda strona <span class="inline">bm_normal</span> - ponieważ jest to domyślne ustawienie wszystkiego! - przyjrzyjmy się więc pozostałym trzem stronom nieco bardziej szczegółowo...</p>
  <p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Ten tryb mieszania sumuje kolory pikseli źródłowych i docelowych (ale nie ma wpływu na wartości alfa). Na przykład, jeśli obraz tła jest jednolitym kolorem o wartości RGB (100,15,70), a następnie narysujesz prostokąt o wartości RGB (120,25,30), to (używając bm_add) końcowe wartości RGB dla każdego piksela prostokąta będą wynosiły (220,40,100). Zauważ, że wartości kolorów nie mogą przekraczać 255 (lub być mniejsze od 0), więc wszystko, co daje więcej niż ta wartość, zostanie zaciśnięte na 255.</p>
    <p class="dropspot"><img>Ten tryb mieszania to świetny sposób na uzyskanie efektu &quot;neonowej poświaty&quot;. Najczęściej jest on używany do tworzenia efektów świetlnych, laserów i innych elementów, które mają sprawiać wrażenie świecących lub luminescencyjnych.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Ten tryb mieszania różni się nieco od poprzedniego, ponieważ działa na zasadzie procentowej, a nie bezpośredniej wartości. Wartość procentowa jest tym, co zostanie odjęte od koloru docelowego (koloru piksela, do którego rysowany jest obraz). Aby lepiej to wyjaśnić, przyjrzyjmy się przykładowi.</p>
    <p class="dropspot"><img>Wyobraź sobie, że chcesz zmniejszyć wartość koloru czerwonego wszystkich pikseli narysowanych w obszarze <span class="notranslate">room</span> o 25%. Musiałbyś najpierw uzyskać 25% z 255, następnie przekonwertować to na wartość koloru RGB, a na koniec użyć tego wraz z bm_subtract do narysowania obszaru. Coś w tym stylu:</p>
    <p class="code">var red = (25 / 100) * 255;<br />
      var col = make_colour_rgb(red, 0, 0);<br />
      gpu_set_blendmode(bm_subtract);<br />
      draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br />
      gpu_set_blendmode(bm_normal);</p>
    <p class="dropspot">Zgodnie z tą samą zasadą, jeśli chcesz po prostu zmniejszyć jasność tła o 50%, uzyskasz kolor, który jest w 50% czerwony, w 50% zielony i w 50% niebieski, czyli RGB (128, 128, 128). Ten tryb mieszania jest używany głównie do rysowania cieni lub tworzenia ciekawych efektów wygaszania.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Ten tryb mieszania jest bardziej skomplikowany do wyjaśnienia, ale w zasadzie mnoży on kolory źródłowe przez źródłową alfę, a następnie dodaje je do wartości kolorów docelowych pomnożonych przez odwrotność wartości kolorów źródłowych. Właściwą matematykę kryjącą się za bm_max (i innymi trybami mieszania) omówimy w drugiej części naszego artykułu, ale wystarczy wiedzieć, że rezultatem będzie bardziej &quot;nasycony&quot; i jaśniejszy kolor, nie prowadzący do tego samego czystego białego blasku, który spowoduje użycie <span class="inline">bm_add</span>.</p>
    <p class="dropspot"><img>Ten tryb mieszania może być przydatny, gdy trzeba narysować nakładające się na siebie obrazy, a jednocześnie nie mogą one stać się tak jasne, że nie będzie ich widać. Jasne części staną się jaśniejsze, ale nadal powinny zachować odpowiedni poziom koloru i odcienia. Należy jednak pamiętać, że wartość alfa obrazu źródłowego również będzie miała wpływ na efekt końcowy przy użyciu tego trybu mieszania.</p>
  </div>
  <p> </p>
  <p>Teraz znasz już podstawy używania trybu mieszania w programie <span data-keyref="GameMaker Name">GameMaker</span>. Tryb ten pobiera wartości RGB i alfa obrazu źródłowego (tego, co jest rysowane), a następnie miesza je z wartościami RGB i alfa obrazu docelowego (tego, co też jest rysowane). Mieszanie odbywa się poprzez mnożenie poszczególnych składowych dla każdego koloru piksela i alfa przez różne wartości, w zależności od efektów, jakie chcemy uzyskać. Mając tę wiedzę, możesz zacząć używać trybów mieszania w swoich grach, aby uzyskać świecące lasery, realistyczne cienie lub nasycone efekty przejścia, ale wciąż jest jeszcze wiele do nauczenia się! Poniżej przyjrzymy się <strong>rozszerzonym tryb</strong>om mieszania, a także zgłębimy nieco matematyki, która się za nimi kryje, abyś mógł tworzyć własne efekty mieszania, takie jak mnożenie czy nakładanie.</p>
  <p> </p>
  <h2>Rozszerzone tryby mieszania</h2>
  <p>Powyżej omówiliśmy funkcję <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>teraz zajmiemy się <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>. Jest to (jak sama nazwa wskazuje) rozszerzona funkcja do ustawiania <em>niestandardowych </em>trybów mieszania, ale jak to działa? Zanim przejdziemy dalej, zapoznajmy się z suchą, techniczną odpowiedzią:</p>
  <ul class="colour">
    <li>Funkcja <span class="inline">gpu_set_blendmode_ext</span><span class="inline">(src, dest)</span> wskazuje tryb mieszania, który należy zastosować zarówno dla koloru źródłowego, jak i docelowego. Nowy kolor to pewien współczynnik razy kolor źródłowy i inny współczynnik razy kolor docelowy. Współczynniki te ustawia się za pomocą tej funkcji. Aby to zrozumieć, należy pamiętać, że zarówno kolor źródłowy, jak i docelowy mają składową czerwoną, zieloną, niebieską i alfa. Zatem <strong>źródło </strong>to (<span class="inline">Rs, Gs, Bs, As</span>), a <strong>miejsce </strong>docelowe to (<span class="inline">Rd, Gd, Bd, Ad</span>). Przyjmuje się, że wszystkie wartości mieszczą się w przedziale od 0 do 1.</li>
  </ul>
  <p>Chociaż tekst ten jest poprawny i wyjaśnia, na czym polegają tryby mieszania, nie jest zbyt intuicyjny... Dlatego też omówmy go nieco dokładniej i wyjaśnijmy, o co w tym wszystkim chodzi.</p>
  <p>Gdy mówimy o <strong>źródle </strong>, mamy na myśli kolor i wartości alfa rysowanego piksela, a gdy mówimy o miejscu <strong>docelowym </strong>, mamy na myśli kolor i wartości alfa piksela, nad którym jest ono rysowane. Aby ułatwić sobie pracę, możemy zapisać kolor źródłowy jako jego składowe, na przykład tak:</p>
  <ul class="colour">
    <li><span class="inline">(Rs, Gs, Bs, As)</span> = RGB i Alfa koloru, który ma zostać narysowany.</li>
  </ul>
  <p>A cel podróży wyglądałby tak:</p>
  <ul class="colour">
    <li><span class="inline">(Rd, Gd, Bd, Ad)</span> = RGB i alfa koloru, który ma zostać użyty do rysowania.</li>
  </ul>
  <p>Kiedy więc rysujemy coś na ekranie, nasz procesor graficzny wykonuje następujące czynności dla każdego piksela:</p>
  <p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p>
  <p>Wspomniane wyżej <strong>współczynniki mieszania</strong> są zdefiniowane w programie <span data-keyref="GameMaker Name">GameMaker</span> za pomocą kilku stałych <span class="notranslate">GML</span>, a każdy z nich reprezentuje współczynnik, przez który należy pomnożyć źródłowe lub docelowe wartości R, G, B i A. Dostępne są następujące współczynniki:</p>
  <ul class="colour">
    <li><span class="inline">bm_zero</span>: Współczynnik mieszania wynosi (0, 0, 0, 0)</li>
    <li><span class="inline">bm_one</span>: Współczynnik mieszania wynosi (1, 1, 1, 1, 1)</li>
    <li><span class="inline">bm_src_colour</span>: Współczynnik mieszanki wynosi (Rs, Gs, Bs, As).</li>
    <li><span class="inline">bm_inv_src_colour</span>: Współczynnik mieszanki wynosi (1-Rs, 1-Gs, 1-Bs, 1-As).</li>
    <li><span class="inline">bm_src_alpha</span>: Współczynnik mieszanki wynosi (As, As, As, As)</li>
    <li><span class="inline">bm_inv_src_alpha</span>: Współczynnik mieszanki wynosi (1-As, 1-As, 1-As, 1-As)</li>
    <li><span class="inline">bm_dest_alpha</span>: Współczynnik mieszania wynosi (Ad, Ad, Ad, Ad, Ad)</li>
    <li><span class="inline">bm_inv_dest_alpha</span>: Współczynnik mieszanki wynosi (1-Ad, 1-Ad, 1-Ad, 1-Ad)</li>
    <li><span class="inline">bm_dest_colour</span>: Współczynnik mieszanki to (Rd, Gd, Bd, Ad)</li>
    <li><span class="inline">bm_inv_dest_colour</span>: Współczynnik mieszanki wynosi (1-Rd, 1-Gd, 1-Bd, 1-Ad).</li>
    <li><span class="inline">bm_src_alpha_sat</span>: Czynnikiem mieszającym jest (f, f, f, 1); f = min(As, 1-Ad)</li>
  </ul>
  <p>Cztery &quot;podstawowe&quot; tryby mieszania dostępne w programie <span data-keyref="GameMaker Name">GameMaker</span> są w rzeczywistości kompozycjami dwóch z tych czynników mieszania.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Przykład działania bm_normal</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Czas przyjrzeć się praktycznemu przykładowi, jak to się łączy w rysowaniu w <span data-keyref="GameMaker Name">GameMakerze</span>. W tym celu przyjrzymy się bm_normal, który jest naprawdę:</p>
    <p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);</p>
    <p class="dropspot">Jednym z problemów, z jakimi borykają się użytkownicy trybów mieszania, jest wizualizacja wyników, dlatego aby pokazać, na czym polega matematyka, użyjemy tego trybu mieszania jako obiektu testowego, ponieważ jest on najczęściej używany przez wszystkich i wiemy dokładnie, czego można się po nim spodziewać. Wyobraźmy sobie, że rysujemy prostokąt o kolorze (128, 255, 64, 255) na tle o kolorze (64, 128, 255, 255):</p>
    <p class="dropspot"><img>Tak więc nasz tryb mieszania wygląda następująco:</p>
    <p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br />
      (0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p>
    <p class="dropspot">Jak widać, mnożymy wartości docelowe przez 0, co również daje im wartość 0, co oznacza, że kolory źródłowe pozostają niezmienione, a więc nasza ostateczna wartość koloru wynosi <strong>(128, 255, 64, 255)</strong>. Widać, jak włączenie alfa wpływa również na tę wartość:</p>
    <p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br />
      (0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p>
    <p class="dropspot">W ten sposób uzyskasz ostateczny kolor pikseli (96, 192, 159, 192), a w efekcie obraz podobny do pokazanego poniżej:</p>
    <p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" /></p>
    <p class="dropspot">Mam nadzieję, że teraz wyraźnie widać, jak działają czynniki trybu mieszania i jak ich łączenie może zmienić rysowany obraz, tworząc interesujące efekty. Przyjrzymy się teraz praktycznemu przykładowi łączenia tych czynników w celu utworzenia własnych trybów mieszania.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p>Teraz, gdy już wiesz, jak działa ustawianie trybów mieszania i widziałeś przykład ich zastosowania w codziennym rysowaniu, przyjrzyjmy się czemuś bardziej złożonemu...</p>
  <p> </p>
  <h2>TWORZENIE WŁASNYCH TRYBÓW MIESZANIA</h2>
  <p>Korzystając z różnych dostępnych czynników, można tworzyć własne tryby mieszania, aby uzyskać opcje mieszania niedostępne w normalnych warunkach. W tym przykładzie zamierzamy utworzyć efekt <strong>mnożenia </strong>, taki jak w Photoshopie. Możemy zasymulować ten tryb mieszania, używając dwóch z wyżej wymienionych stałych współczynników trybu mieszania, jak poniżej:</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p>
  <p>Zanim zaczniemy rysować coś przy użyciu tego trybu mieszania, zobaczmy, jak to powinno wyglądać w Photoshopie:</p>
  <p><img>Korzystając z rozszerzonego trybu mieszania, uzyskamy następujące wyniki:</p>
  <p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br />
    Source colour * dest colour + dest colour * zero = source colour * dest colour</p>
  <p>Współczynnik mieszania <span class="inline">bm_zero</span> skutecznie usuwa kolor docelowy z równania (ponieważ zero razy cokolwiek jest zerem), więc pozostaje nam kolor źródłowy pomnożony przez współczynnik mieszania koloru docelowego, stąd nazwa trybu &quot;multiply&quot;. Aby użyć tego trybu w programie <span data-keyref="GameMaker Name">GameMaker</span>, wystarczy w <strong>zdarzeniu Draw</strong> wprowadzić coś takiego:</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>Następny obraz pochodzi z projektu testowego w witrynie <span class="notranslate">GameMaker</span>, w którym użyto dokładnie tego kodu:</p>
  <p><img>Czy potrafisz dostrzec różnicę? Prawdopodobnie nie! Będą jednak występować pewne odchylenia między nimi ze względu na różnice między używanymi narzędziami do renderowania, ale jest to prawie dokładnie tak, jak można by się spodziewać. Należy jednak pamiętać, że nie wszystkie tryby mieszania używane w programach artystycznych są dostępne w <span data-keyref="GameMaker Name">GameMakerze</span>, ponieważ niektóre z nich mogą wymuszać przekroczenie wartości 255 i w ten sposób tworzyć efekty specjalne, ale nie oznacza to, że nie można za ich pomocą tworzyć udanych imitacji tych efektów, a nawet zupełnie nowych efektów.</p>
  <p>Warto wspomnieć, że w <span data-keyref="GameMaker Name">GameMakerze</span> można pójść o krok dalej, korzystając z funkcji <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span>. Pozwala ona wyodrębnić składowe alfa różnych trybów mieszania i używać ich pojedynczo w celu tworzenia jeszcze większej liczby możliwych kombinacji. Nie będziemy tutaj omawiać tej funkcji, ponieważ jest ona szczegółowo opisana w podręczniku, ale warto o niej wspomnieć, abyś wiedział, że można z niej korzystać.</p>
  <p> </p>
  <h2>POWIERZCHNIE I ALFA</h2>
  <p>Warto jeszcze zwrócić uwagę na jedną rzecz związaną z trybami mieszania, a mianowicie na to, jak wpływają one na składową <strong>alfa </strong>koloru. Podczas rysowania na <a class="glossterm" data-glossterm="powierzchnia zastosowania" href="#">powierzchni aplikacji</a> lub w <a class="glossterm" data-glossterm="bufor wyświetlacza" href="#">buforze</a> monitora nie trzeba brać pod uwagę docelowej wartości alfa, ponieważ <em>zawsze </em>będzie ona równa jeden. W przypadku powierzchni, które tworzysz samodzielnie, jest inaczej, ponieważ możesz nadać im dowolną wartość alfa w zakresie od zera do jednego. Prowadzi to do ciekawych efektów, które są sprzeczne z oczekiwaniami większości ludzi.</p>
  <p>Aby to zilustrować, przyjrzymy się rysowaniu przy użyciu podstawowej, domyślnej opcji <span class="inline">bm_normal</span>. Większość ludzi myśli, że jeśli powierzchnia jest wyczyszczona do wartości alfa 0, a następnie narysuje coś z alfą 0,5, to wynikowa wartość alfa też wyniesie 0,5... <strong>ale tak nie jest</strong> i wiele osób uważa to za &quot;błąd&quot; w sposobie renderowania w <span data-keyref="GameMaker Name">GameMakerze</span>. Jednak, jak się przekonasz, to wcale nie jest błąd!</p>
  <p>Powiedzmy, że mamy powierzchnię, której każdy piksel ma alfę 0, a następnie rysujemy na niej okrąg z alfą 0,5 za pomocą trybu mieszania <span class="inline">bm_normal</span>. Cała powierzchnia nadal będzie miała alfa 0, ale w okręgu alfa będzie wynosić 0,25, ponieważ:</p>
  <p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p>
  <p>Jeśli następnie narysujesz kolejny okrąg w istniejącym okręgu, również z alfą 0,5, to alfa poza okręgiem wyniesie 0, między okręgami 0,25, a w mniejszym okręgu 0,375:</p>
  <p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p>
  <p>Jeśli nadal będziesz rysować pewną liczbę okręgów o alfie 0,5 na powierzchni o alfie 0, a następnie narysujesz tę powierzchnię na stronie <span class="notranslate">room</span>, będziesz mógł to wyraźnie zobaczyć:</p>
  <p><img>Jeśli nadal nie wiesz, czym jest alfa, spróbuj wyobrazić ją sobie jako kolejny kolor. Zachowuje się jak kolor i wszystkie obliczenia na nim są wykonywane w podobny sposób. Po prostu nie jest widoczna, choć wpływ, jaki wywiera na inne kolory, jest widoczny. W ten sposób dochodzimy do ostatniej rzeczy, na którą należy zwrócić uwagę podczas używania powierzchni i trybów mieszania (nawet na stronie <span class="inline">bm_normal</span>)...</p>
  <p>Nawet jeśli alfa powierzchni jest równa 0, <em><strong>składowe koloru nadal tam są, istnieją i będą miały wpływ na wszystkie operacje mieszania</strong></em>. Zatem rysowanie na powierzchni o zerowej alfie, która została oczyszczona przy użyciu koloru czerwonego (na przykład), spowoduje mieszanie kolorów źródłowych z docelowymi i da inne efekty niż się wydaje. Powyższy obrazek został utworzony na czarnej powierzchni na czarnym tle, ale jeśli wyczyścimy powierzchnię na czerwono, otrzymamy taki efekt:</p>
  <p><img>Mam nadzieję, że teraz można samemu ustalić, dlaczego tak się dzieje, korzystając ze wzorów, które przedstawiłem powyżej, i stosując odpowiednie liczby dla strony <span class="inline">bm_normal</span>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Additional_Information.htm">Informacje dodatkowe</a></div>
        <div style="float:right">Następny: <a href="Error_Reporting.htm">Zgłaszanie błędów</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>