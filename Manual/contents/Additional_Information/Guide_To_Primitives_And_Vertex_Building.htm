<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Przewodnik po prymitywach i tworzeniu wierzchołków</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Przewodnik po prymitywach i <span class="notranslate">Vertex</span> Budowanie</h1>
  <p>W tym podręczniku omówiono pokrótce sposób tworzenia i używania <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">prymitywów</a> przy użyciu niestandardowych <strong>formatów wierzch</strong> ołków i <strong>buforów wierzchołków</strong>. </p>
  <p>Na ogół, gdy zaczynasz pracę z 3D, efektami specjalnymi, złożonymi procesami rysowania lub stroną <span class="notranslate">shaders</span>, nie musisz się zbytnio przejmować używanym formatem <span class="notranslate">vertex</span>, ponieważ <span data-keyref="GameMaker Name">GameMaker</span> automatycznie skonfiguruje i przepuści dane <a class="glossterm" data-glossterm="wierzchołek" href="#">wierzchołków</a>. Czasami jednak konieczne jest utworzenie własnych danych <span class="notranslate">vertex</span> i odpowiednie ich sformatowanie, zwłaszcza gdy chcesz zwiększyć szybkość lub przekazać dodatkowe informacje. Na przykład standardowy format <span class="notranslate">vertex</span> zawiera pozycję 3D x, y, z, kolor (z alfą) oraz współrzędne UV <span class="notranslate">texture</span>. Gdybyś sam tworzył takie dane, wyglądałyby one następująco</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Jeśli jednak używasz (na przykład) adresu <span class="notranslate">shader</span> tylko do manipulowania położeniem adresu <span class="notranslate">vertex</span>, nie ma potrzeby przekazywania danych o kolorze ani adresu <span class="notranslate">texture</span>. W takim przypadku należy utworzyć własny format w następujący sposób:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    my_format = vertex_format_end();</p>
  <p>W sumie istnieje pięć różnych atrybutów <span class="notranslate">vertex</span>, których można użyć podczas definiowania formatu <span class="notranslate">vertex</span>:</p>
  <ul class="colour">
    <li>Kolor</li>
    <li>Normalna</li>
    <li>Pozycja</li>
    <li>Pozycja 3D</li>
    <li>Współrzędna tekstury</li>
  </ul>
  <p>Ogólnie rzecz biorąc, w formacie należy <em>zawsze</em> podawać pozycję lub pozycję 3D, ale wszystkie pozostałe elementy są opcjonalne.</p>
  <p>Należy pamiętać, że po utworzeniu formatu <span class="notranslate">vertex</span> kolejność, w jakiej zostały zdefiniowane atrybuty <span class="notranslate">vertex</span>, <i>musi być przestrzegana</i> podczas tworzenia <strong>prymitywów</strong>. Tak więc, jeśli zdefiniowałeś format <span class="notranslate">vertex</span> jako pozycję, kolor i współrzędną <span class="notranslate">texture</span>, <b> <i>musisz</i></b> dodać te atrybuty do prymitywu w tej samej kolejności, w przeciwnym razie pojawi się błąd. Należy również pamiętać, że jak każdy inny zasób dynamiczny, format <span class="notranslate">vertex</span> wymaga pamięci i dlatego powinien być usuwany, gdy nie jest potrzebny, za pomocą funkcji <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><span class="inline">vertex_format_delete()</span></a>.</p>
  <p>Wszystkie prymitywy, które zostaną zbudowane, są przechowywane w <b>buforze wierzchołków</b>. Bufor ten musi być utworzony wcześniej, a następnie odwołują się do niego funkcje używane do budowania prymitywów. Strona <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> może być używana tyle razy, ile jest to konieczne do tworzenia różnych prymitywów, lub może zostać &quot;zamrożona&quot;, aby zachować określony typ prymitywu na czas trwania gry lub poziomu (jest to najszybsze rozwiązanie, więc jeśli wiesz, że zbudowany prymityw nie ulegnie zmianie, zawsze powinieneś korzystać z tej opcji).</p>
  <p>Przykład budowy prymitywu pojedynczego trójkąta jest przedstawiony w poniższym kodzie:</p>
  <p class="code">// CREATE EVENT<br />
    v_buff = vertex_create_buffer();<br />
    vertex_begin(v_buff, global.my_format);<br />
    vertex_position(v_buff, 10, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 0, 0);<br />
    vertex_position(v_buff, 110, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 0);<br />
    vertex_position(v_buff, 110, 110);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 1);<br />
    vertex_end(v_buff);<br />
    <br />
    // DRAW EVENT<br />
    var tex = sprite_get_texture(spr_Background, 0);<br />
    shader_set(shd_shimmer);<br />
    vertex_submit(v_buff, pr_trianglelist, tex);<br />
    shader_reset();
  </p>
  <p>W tym przypadku najpierw tworzymy nasz wierzchołek <span class="notranslate">buffer</span> w zdarzeniu Create Event instancji, a następnie rozpoczynamy definicję różnych wierzchołków, które tworzą nasz prymityw trójkąta, podając pozycję, kolor i współrzędną UV <span class="notranslate">texture</span> dla każdego z trzech punktów, których chcemy użyć. Następnie kończymy definicję <span class="notranslate">vertex</span> i wiemy, że strona <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> z danymi <span class="notranslate">vertex</span> jest przechowywana w zmiennej &quot;v_buff&quot;.  </p>
  <p class="note"><strong>UWAGA</strong>: Jeśli zawartość strony <span class="notranslate">buffer</span> ma być stale aktualizowana, można by utworzyć stronę <span class="notranslate">buffer</span>, przekazać jej dane <span class="notranslate">vertex</span>, a następnie ponownie ją zniszczyć - po narysowaniu - wszystko w tym samym kroku.</p>
  <p>Następnie w zdarzeniu Draw Event rysujemy zawartość strony <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> za pomocą strony <span class="notranslate">shader</span>. Jest to bardzo prosty przykład i w zasadzie tak właśnie działa <span data-keyref="GameMaker Name">GameMaker</span>, tzn. gdy rysujesz stronę <span class="notranslate">sprite</span>, strona <span class="notranslate">GameMaker</span> tworzy stronę <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> z czterema wierzchołkami tworzącymi dwa trójkąty (które tworzą kwadrat, zwany też &quot;quadem&quot;), a strona <span class="notranslate">textures</span> tworzy z tych dwóch trójkątów obraz <span class="notranslate">sprite</span>. Podczas rysowania tej strony <span class="notranslate">sprite</span> przesyłamy na ekran obraz <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> i jego zawartość.</p>
  <p>Po przesłaniu strony <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> do narysowania podajemy typ prymitywu. Prymityw może być punktem, listą lub paskiem linii albo listą lub paskiem trójkątów, ale <i>nie</i> wolno używać trójkątów, ponieważ większość urządzeń przenośnych nie akceptuje tego typu prymitywów. Nie zapomnij sformatować strony <span class="notranslate">vertex</span> <span class="notranslate">buffer</span> poprawnie dla typu prymitywu, który ma być użyty do jej narysowania. Na przykład, rysowanie prymitywu dwóch trójkątów jako listy trójkątów wymaga 6 punktów, ale jako paska trójkątów wymaga tylko 4 punktów. To, którego typu użyjesz, zależy od tego, co chcesz narysować i jaki efekt chcesz osiągnąć.</p>
  <p>Ostatnią ważną kwestią, na którą należy zwrócić uwagę, używając w ten sposób własnej strony <span class="notranslate">vertex</span> <span class="notranslate">buffers</span>, jest to, jak wpływa ona na partie wierzchołków wysyłane do GPU. Gdy tworzysz <span class="notranslate">vertex</span> <span class="notranslate">buffer</span>, tworzysz najniższy poziom danych graficznych, więc podczas rysowania wszystko, co się dzieje, to fakt, że <span data-keyref="GameMaker Name">GameMaker</span> wysyła <span class="notranslate">buffer</span> bezpośrednio do karty graficznej. Z tego powodu, jeśli chcesz uzyskać lepszy podział na partie, musisz to zrobić samodzielnie i przechowywać elementy, które chcesz podzielić na partie, w tej samej witrynie <span class="notranslate">buffer</span>.</p>
  <p>Jak już wspomniano powyżej, formaty <span class="notranslate">vertex</span> są tworzone poprzez łączne wykorzystanie następujących 5 typów atrybutów (dodawanych za pomocą odpowiedniej funkcji <span class="inline">vertex_format_add_*</span> ):</p>
  <ul class="colour">
    <li>Kolor</li>
    <li>Normalna</li>
    <li>Pozycja</li>
    <li>Pozycja 3D</li>
    <li>Współrzędna tekstury</li>
  </ul>
  <p>W języku GLSL ES <span class="notranslate">shader</span> rodzaje te są rozpoznawane za pomocą następujących 4 atrybutów:</p>
  <ul class="colour">
    <li>Kolor</li>
    <li>Normalna</li>
    <li>Pozycja</li>
    <li>Współrzędna tekstury</li>
  </ul>
  <p>Może to wyglądać dziwnie, ponieważ wydaje się, że w naszym formacie <span class="notranslate">vertex</span> możemy określić więcej rodzajów atrybutów niż w <span class="notranslate">vertex</span> <span class="notranslate">shader</span>. Jednak w formacie <span class="notranslate">shader</span> <i>Position</i> i <i>3D</i> Position są traktowane jako te <em>same </em>atrybuty, z tym wyjątkiem, że <i>Position</i> ma mieć tylko współrzędne &quot;x&quot; i &quot;y&quot;, podczas gdy <i>3D</i> Position ma współrzędne &quot;x&quot;, &quot;y&quot; i &quot;z&quot;. Jak więc odwzorować to, co jest w formacie <span class="notranslate">vertex</span>, na sposób definiowania atrybutów w <span class="notranslate">shader</span>? Na początek przyjrzyjmy się typowemu zestawowi atrybutów z domyślnego shadera:</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position;        // (x,y,z)<br />
    //attribute vec3 in_Normal;        // (x,y,z) unused in this shader.<br />
    attribute vec4 in_Colour;          // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;    // (u,v)</p>
  <p>A oto fragment kodu, który ustawia format <span class="notranslate">vertex</span> kompatybilny z tym shaderem:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>W jaki sposób atrybut <span class="notranslate">shader</span> jest dopasowywany do typu formatu <span class="notranslate">vertex</span>? Opiera się to na konwencji nazewnictwa:</p>
  <ul class="colour">
    <li><span class="inline">&quot;in_Position&quot;</span> mapy do <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">&quot;in_Colour&quot;</span> mapy do <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">&quot;in_TextureCoord&quot;</span> mapy do <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span> Sytuacja komplikuje się, gdy mamy wiele atrybutów tego samego rodzaju, ale nadal stosujemy tę samą konwencję nazewnictwa. Przyjrzymy się teraz dostarczaniu dodatkowych <b>współrzędnych</b> <b>koloru</b> i <b>tekstury</b>, ponieważ w formacie <span class="notranslate">shader</span> lub <span class="notranslate">vertex</span> może być tylko <b>jeden</b> atrybut Pozycja i <b>jeden</b> atrybut Normalny, ale <em>może</em> być wiele atrybutów koloru lub <span class="notranslate">texture</span>.</p>
  <p>Podczas dodawania dodatkowych atrybutów koloru do strony <span class="notranslate">shader</span> na końcu atrybutu <span class="notranslate">shader</span> należy dodać numer wskazujący, do którego wpisu w formacie <span class="notranslate">vertex</span> atrybut ten jest przypisany. Oto przykład - najpierw format <span class="notranslate">vertex</span>:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>A teraz powiązane atrybuty <span class="notranslate">shader</span>:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour0;       // (r,g,b,a)<br />
    attribute vec4 in_Colour1;       // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;  // (u,v)</p>
  <p>W tym przypadku adres <span class="inline">in_Colour0</span> odpowiada pierwszemu adresowi <span class="inline">vertex_format_add_colour()</span>, a adres <span class="inline">in_Colour1</span> odpowiada drugiemu.</p>
  <p>Współrzędne tekstury są traktowane nieco inaczej niż kolor. Zasadniczo wszystko, co nie ma nazwy <span class="inline">in_Position</span>, <span class="inline">in_Normal</span> lub jednego z atrybutów <span class="inline">in_Colour[0 ... ]</span>, jest traktowane jako współrzędna <span class="notranslate">texture</span>. Kolejność, w jakiej są one zdefiniowane na liście atrybutów w witrynie <span class="notranslate">shader</span>, określa, do którego atrybutu w formacie <span class="notranslate">vertex</span> są one mapowane. Patrz następujący przykład <span class="notranslate">GML</span>:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Kod <span class="notranslate">shader</span> wyglądałby mniej więcej tak:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour;        // (r,g,b,a)<br />
    attribute vec2 in_myTexcoord;    // (u,v)<br />
    attribute vec2 in_TextureCoord;  // (u,v)<br />
    attribute vec2 in_Something;     // (u,v)</p>
  <p>W tym przykładzie adresy <span class="inline">in_myTexcoord</span>, <span class="inline">in_TextureCoord</span> i <span class="inline">in_Something</span> odpowiadają trzem kolejnym atrybutom współrzędnych <span class="notranslate">texture</span> zdefiniowanym w formacie <span class="notranslate">vertex</span>.</p>
  <p>Pełną listę wszystkich funkcji potrzebnych do tworzenia formatów <span class="notranslate">vertex</span>, <span class="notranslate">vertex</span> <span class="notranslate">buffers</span> i prymitywów można znaleźć na następnej stronie:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Prymitywy i <span class="notranslate">Vertex</span> Formaty</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Additional_Information.htm">Informacje dodatkowe</a></div>
        <div style="float:right">Następny: <a href="Guide_To_Using_Blendmodes.htm">Przewodnik korzystania z Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>