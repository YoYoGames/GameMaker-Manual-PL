<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Przewodnik po używaniu buforów</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Przewodnik korzystania z buforów</h1>
  <p>Strona <span class="notranslate">buffer</span> (w programowaniu) to miejsce w pamięci systemowej, które służy do przechowywania małych pakietów danych dotyczących praktycznie wszystkiego (np. transferu danych, kolizji, kolorów itp.). Ponieważ jest przechowywana w pamięci systemowej, dostęp do niej jest bardzo szybki, a <span class="notranslate">buffer</span> jest zwykle używana do bardzo krótkotrwałego przechowywania danych, na przykład do odbierania informacji z sieci przed ich przetworzeniem lub do przechowywania punktu kontrolnego w grze (wyjaśniono to w przykładzie podanym w dalszej części strony).</p>
  <p><img>Bufory są tworzone poprzez przydzielenie miejsca w pamięci systemowej <span class="glossextra">,</span> liczonego w <a class="glossterm" data-glossterm="bajt" href="#">bajtach</a>, które jest następnie rezerwowane dla Twojej gry tak długo, jak gra jest uruchomiona, lub do momentu usunięcia <span class="notranslate">buffer</span> za pomocą odpowiedniej funkcji (wszystkie funkcje <span class="notranslate">GML</span> <span class="notranslate">buffer</span> znajdziesz <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">tutaj</a>). Oznacza to, że nawet jeśli gra nie jest w centrum uwagi (np. na urządzeniu przenośnym, gdy odbierasz połączenie, gra przechodzi w tło), adres <span class="notranslate">buffer</span> będzie nadal istniał, jednak w przypadku zamknięcia lub ponownego uruchomienia gry adres <span class="notranslate">buffer</span> zostanie utracony.</p>
  <p class="note"><strong>UWAGA</strong>: Ponowne uruchomienie gry nie spowoduje wyczyszczenia ani usunięcia adresu <span class="notranslate">buffer</span>! Uniemożliwi jednak dalszy dostęp do wcześniej utworzonej strony <span class="notranslate">buffer</span>, ponieważ utracony zostanie uchwyt identyfikacyjny, co spowoduje wyciek pamięci, który w końcu doprowadzi do awarii gry. Dlatego przy ponownym uruchamianiu gry pamiętaj, aby najpierw usunąć wszystkie <span class="notranslate">buffers</span>.</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span> pozwala na tworzenie czterech różnych typów <span class="notranslate">buffer</span>. Powodem tego jest fakt, że <span class="notranslate">buffers</span> został zaprojektowany jako wysoce zoptymalizowany tymczasowy nośnik danych i dlatego powinieneś utworzyć <span class="notranslate">buffer</span> odpowiedni do typu danych, które chcesz w nim przechowywać, w przeciwnym razie możesz otrzymać błędy lub spowodować wąskie gardło w swoim kodzie. Zanim wyjaśnimy to dalej, przyjrzyjmy się czterem dostępnym typom <span class="notranslate">buffer</span> (zdefiniowanym jako <strong>stałe </strong>w <span class="notranslate">GML</span>):</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Stała</th>
        <th>opis</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fixed</span></td>
        <td><br>
          Adres <span class="notranslate">buffer</span> o stałym rozmiarze w bajtach. Rozmiar jest ustalany podczas tworzenia strony <span class="notranslate">buffer</span> i nie może być ponownie zmieniony.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_grow</span></td>
        <td><br>
          Strona <span class="notranslate">buffer</span>, która będzie się dynamicznie <i>powiększać</i> w miarę dodawania danych. Tworzy się ją z rozmiarem początkowym (który powinien być przybliżony do rozmiaru danych, które mają być przechowywane), a następnie rozszerza się ją, aby przyjąć dalsze dane, które przekraczają ten rozmiar początkowy.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_wrap</span></td>
        <td><br>
          Adres <span class="notranslate">buffer</span>, na który będą <i>zawijane</i> dane. Gdy dodawane dane osiągną limit rozmiaru <span class="notranslate">buffer</span>, nadpisanie zostanie umieszczone z powrotem na początku <span class="notranslate">buffer</span>, a dalszy zapis będzie kontynuowany od tego miejsca.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fast</span></td>
        <td><br>
          Jest to specjalny, &quot;okrojony&quot; adres <span class="notranslate">buffer</span>, na którym można bardzo szybko odczytywać i zapisywać dane. Można go jednak używać tylko z typami danych <span class="inline"><span class="inline">buffer_u8</span> i musi być wyrównany do 1 bajta. (Informacje o <b>typach</b> danych i <b>wyrównywaniu</b> bajtów można znaleźć w dalszej części tej strony).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Są to typy <span class="notranslate">buffer</span> dostępne w programie <span data-keyref="GameMaker Name">GameMaker</span>, a to, który z nich wybierzesz, zależy w dużej mierze od tego, do czego chcesz go wykorzystać. Na przykład strona grow <span class="notranslate">buffer</span> byłaby używana do przechowywania &quot;migawek&quot; danych w celu utworzenia zapisu gry, ponieważ nie znasz rzeczywistej ilości danych, które zostaną w niej umieszczone, lub szybka <span class="notranslate">buffer</span> byłaby używana, gdy wiesz, że wszystkie wartości, z którymi pracujesz, zawierają się w przedziale od 0 do 255 lub od -128 do 127, na przykład podczas przetwarzania danych <a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a> z obrazu.</p>
  <p><img>Tworząc stronę <span class="notranslate">buffer</span>, należy zawsze starać się nadać jej rozmiar odpowiedni dla danego typu, przy czym ogólna zasada mówi, że powinna ona być utworzona tak, aby pomieścić maksymalny rozmiar danych, które ma przechowywać, a w razie wątpliwości należy użyć grow <span class="notranslate">buffer</span>, aby zapobiec błędom nadpisywania.</p>
  <p>Faktyczny kod tworzący stronę <span class="notranslate">buffer</span> wygląda mniej więcej tak:</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br>
    W ten sposób powstałaby stała strona <span class="notranslate">buffer</span> o rozmiarze 16384 bajtów i wyrównana do 2 bajtów. Funkcja zwróciłaby unikatową wartość identyfikacyjną, która jest przechowywana w zmiennej w celu późniejszego odwoływania się do tej strony <span class="notranslate">buffer</span>.</p>
  <p>Podczas odczytywania i zapisywania danych na stronie <span class="notranslate">buffer</span> robi się to w &quot;kawałkach&quot; danych określonych przez ich &quot;typ danych&quot;. Typ danych&quot; określa liczbę bajtów przydzielonych w ramach <span class="notranslate">buffer</span> dla zapisywanej wartości i bardzo ważne jest, aby go poprawnie określić, w przeciwnym razie można uzyskać bardzo dziwne wyniki (lub nawet błędy) w swoim kodzie.</p>
  <p>Bufory są zapisywane (i odczytywane) <strong>sekwencyjnie</strong>, tzn. jedna porcja danych jest zapisywana po drugiej, a każda porcja danych jest określonego typu. Oznacza to, że użytkownik powinien zawsze wiedzieć, jakie dane zapisuje w buforze <span class="notranslate">buffer</span>. Te typy danych są zdefiniowane w witrynie <span class="notranslate">GML</span> za pomocą następujących stałych:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Typ danych Stała</th>
        <th>Bajty</th>
        <th>Opis</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td><br>
          8-bitowa liczba całkowita bez znaku. Jest to wartość dodatnia z zakresu od 0 do 255.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td><br>
          Podpisana, 8-bitowa liczba całkowita. Może to być wartość dodatnia lub ujemna z zakresu od -128 do 127 (0 jest wartością dodatnią).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td><br>
          Niepodpisana, 16-bitowa liczba całkowita. Jest to wartość dodatnia z zakresu od 0 do 65 535.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td><br>
          Podpisana, 16-bitowa liczba całkowita. Może to być wartość dodatnia lub ujemna z zakresu od -32,768 do 32,767 (0 oznacza wartość dodatnią).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td><br>
          16-bitowa liczba zmiennoprzecinkowa. Może to być wartość dodatnia lub ujemna z zakresu +/- 65504. <b>(Obecnie nieobsługiwana!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td><br>
          Niepodpisana, 32-bitowa liczba całkowita. Jest to wartość dodatnia z zakresu od 0 do 4 294 967 295.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td><br>
          Podpisana, 32-bitowa liczba całkowita. Może to być wartość dodatnia lub ujemna z zakresu od -2,147,483,648 do 2,147,483,647 (0 oznacza wartość dodatnią).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td><br>
          32-bitowa liczba zmiennoprzecinkowa. Może to być wartość dodatnia lub ujemna z zakresu +/-16777216.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td><br>
          64-bitowa liczba całkowita bez znaku.<b>(Obecnie nie jest obsługiwana przez wszystkie funkcje <span class="notranslate">buffer</span>!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td><br>
          64-bitowa liczba zmiennoprzecinkowa.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td><br>
          Wartość logiczna. Może wynosić tylko 1 lub 0 (<span class="inline">true</span> lub <span class="inline">false</span>).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>N/A</td>
        <td><br>
          Jest to plik UTF-8 zakończony zerem (0x00) <span class="notranslate">string</span>. Zasadniczo adres <span class="notranslate">GameMaker</span> <span class="notranslate">string</span> jest umieszczany w adresie <span class="notranslate">buffer</span>, a na końcu jest umieszczane 0.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Jeśli więc utworzyłeś stronę <span class="notranslate">buffer</span> i chcesz zapisywać na niej informacje, użyj następującego kodu:</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br />
    buffer_write(buff, buffer_bool, global.Music);<br />
    buffer_write(buff, buffer_s16, obj_Player.x);<br />
    buffer_write(buff, buffer_s16, obj_Player.y);<br />
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>Patrząc na powyższy przykład, widać, że można zapisywać różne typy danych na stronie <span class="notranslate">buffer</span> w tym samym czasie (w przypadku korzystania z <em>szybkiego </em>bufora jesteśmy ograniczeni tylko do jednego typu danych), a dane te będą kolejno dodawane do strony <span class="notranslate">buffer</span> (choć ich faktyczna pozycja w <span class="notranslate">buffer</span> będzie zależała od wyrównania bajtów, co wyjaśniono poniżej). Tak samo jest w przypadku odczytywania informacji z <span class="notranslate">buffer</span>. W powyższym przykładzie dane z <span class="notranslate">buffer</span> należy odczytywać w takiej samej kolejności, w jakiej zostały zapisane, sprawdzając, czy dane są tego samego typu, np:</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br />
    global.Music = buffer_read(buff, buffer_bool);<br />
    obj_Player.x = buffer_read(buff, buffer_s16);<br />
    obj_Player.y = buffer_read(buff, buffer_s16);<br />
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>Jak widać, informacje są odczytywane w takiej samej kolejności, w jakiej zostały wczytane do <span class="notranslate">buffer</span>. Więcej informacji na temat dodawania i usuwania danych z <span class="notranslate">buffer</span> można znaleźć w poniższych przykładach.</p>
  <p>Jeśli czytałeś tę stronę, na pewno widziałeś wzmianki o <strong>wyrównaniu bajtów </strong>w adresie <span class="notranslate">buffer</span>. Odnosi się to do pozycji, na której nowe dane będą zapisywane w danym adresie <span class="notranslate">buffer</span>. Jak to działa? Otóż w przypadku strony <span class="notranslate">buffer</span> z wyrównaniem do jednego bajtu każda porcja danych jest zapisywana na stronie <span class="notranslate">buffer</span> kolejno, przy czym każda nowa porcja danych jest dodawana bezpośrednio po poprzedniej. Natomiast w przypadku strony <span class="notranslate">buffer</span> z wyrównaniem do 2 bajtów każdy fragment danych będzie zapisywany w odstępach 2-bajtowych, więc nawet jeśli początkowy zapis wyniesie 1 bajt danych, następny zapis zostanie wyrównany do dwóch bajtów:</p>
  <p><img>Jeśli więc wyrównanie bajtowe jest ustawione na, powiedzmy, 4 bajty i zapiszesz pojedynczy fragment danych o rozmiarze 1 bajta, a następnie wykonasz <strong>tell </strong> <span class="notranslate">buffer</span> (tell określa bieżącą pozycję do odczytu/zapisu dla <span class="notranslate">buffer</span>), otrzymasz <strong>przesunięcie </strong>o 1 bajt (przesunięcie w tym przypadku to liczba bajtów od początku adresu <span class="notranslate">buffer</span> do bieżącej pozycji odczytu/zapisu).</p>
  <p>Jeśli jednak zapiszesz kolejną porcję danych, również o rozmiarze 1 bajta, a <em>następnie </em>wykonasz <span class="notranslate">buffer</span> tell, otrzymasz przesunięcie o 5 bajtów (mimo że zapisałeś tylko 2 bajty danych), ponieważ wyrównanie spowodowało wyścielenie danych, aby wyrównać je do 4-bajtowego wyrównania <span class="notranslate">buffer</span>.</p>
  <p>Zasadniczo oznacza to, że wyrównanie będzie miało wpływ tylko na <em>miejsce </em>zapisu, więc jeśli wykonasz <span class="notranslate">buffer</span> tell po zapisaniu czegoś, zwróci ono bieżącą pozycję zapisu, która znajduje się bezpośrednio za wcześniej zapisanymi danymi. Zauważ jednak, że jeśli następnie napiszesz kolejną porcję danych, to <span class="notranslate">buffer</span> wewnętrznie przesunie pozycję zapisu do następnej wielokrotności rozmiaru wyrównania przed faktycznym zapisem porcji danych.</p>
  <p>Poniżej przedstawiamy kilka przykładów wykorzystania strony <span class="notranslate">buffers</span> w projekcie:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Bufor Punkt kontrolny</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Prostym przykładem na to, jak można wykorzystać stronę <span class="notranslate">buffer</span> w dowolnej grze <span data-keyref="GameMaker Name">GameMaker</span> na dowolną platformę, jest funkcja <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>. Funkcja ta wykonuje &quot;migawkę&quot; bieżącego stanu gry i zapisuje ją w zdefiniowanym wcześniej adresie <span class="notranslate">buffer</span>, który można następnie odczytać, aby ponownie załadować grę w tym samym punkcie.</p>
    <p class="note"><strong>UWAGA</strong>: Ta funkcja jest bardzo ograniczona i została zaprojektowana dla początkujących graczy, aby szybko uruchomić system punktów kontrolnych. Bardziej zaawansowani użytkownicy mogą jednak preferować kodowanie własnego systemu przy użyciu funkcji pliku, ponieważ gra nie zapisze żadnych zasobów dynamicznych, które można utworzyć w czasie gry, takich jak struktury danych, powierzchnie, dodane strony <span class="notranslate">sprites</span>, itp.</p>
    <p class="dropspot">Pierwszą rzeczą, którą musimy zrobić, jest utworzenie nowego adresu <span class="notranslate">object</span>, który będzie sterował zapisywaniem i ładowaniem danych, dlatego należy go utworzyć i nadać mu zdarzenie <strong>Create</strong>. W tym zdarzeniu można umieścić następujący kod:</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br />
      StateSaved = false;</p>
    <p class="dropspot">W pierwszym wierszu tworzony jest plik grow <span class="notranslate">buffer</span> (ponieważ nie znamy ostatecznego rozmiaru zapisanych danych) o rozmiarze 1024 bajtów i wyrównany do 1 bajta. Następnie tworzona jest zmienna, która będzie sprawdzać, czy gra została zapisana, czy nie (zostanie ona użyta podczas wczytywania).</p>
    <p class="dropspot">Następnie dodajemy <strong>zdarzenie naciśnięcia klawisza</strong> (na przykład), w którym zapiszemy bieżący stan gry do utworzonego bufora:</p>
    <p class="code">StateSaved = true;<br />
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">Powyższe działanie spowoduje najpierw ustawienie zmiennej sterującej na <span class="inline">true </span>(dzięki czemu zostanie ona zapisana podczas zapisywania gry na stronie <span class="notranslate">buffer</span>), a następnie przejście na początek strony <span class="notranslate">buffer</span> przed zapisaniem do niej bieżącego stanu zapisu. Dlaczego używamy <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Otóż, jak już wspomniano na tej stronie, czytasz i zapisujesz na stronie <span class="notranslate">buffer</span> od miejsca, w którym ostatnio zostały do niej dodane dane. Oznacza to, że jeśli nie ustawisz <span class="notranslate">buffer</span> tell z powrotem na początek, to podczas zapisywania dane zostaną dodane do <span class="notranslate">buffer</span> w bieżącej pozycji odczytu/zapisu <span class="notranslate">buffer</span>. Dlatego użyjemy funkcji <span class="inline">buffer_seek()</span>, aby przenieść tell na początek <span class="notranslate">buffer</span>.</p>
    <p class="dropspot">Aktualny stan gry został zapisany na stronie <span class="notranslate">buffer</span>. Następnym krokiem będzie zakodowanie sposobu jego załadowania, prawdopodobnie w innym <strong>zdarzeniu Keypress Event</strong>:</p>
    <p class="code">if StateSaved<br />
      {<br />
          buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
          game_load_buffer(SaveBuffer);<br />
      }</p>
    <p class="dropspot">Gra zostanie załadowana na końcu zdarzenia, w którym umieszczono powyższy kod.</p>
    <p class="note"><strong>UWAGA</strong>: Można tego używać tylko w tej samej witrynie <span class="notranslate">room</span>, a nie do generowania kompletnych zapisanych gier po zamknięciu lub ponownym uruchomieniu gry!</p>
    <p class="dropspot">Ostatnią rzeczą, którą należy dodać do kontrolera <span class="notranslate">object</span>, jest kod &quot;czyszczący&quot;. <span class="notranslate">Buffers</span> są przechowywane w pamięci i jeśli nie wyczyścisz ich po zakończeniu, mogą wystąpić wycieki pamięci, które w końcu spowodują lagi i awarię gry. Można więc dodać <strong>zdarzenie zakończenia pomieszczenia</strong> (z kategorii <strong>Inne</strong> <strong>zdarzenia</strong> ) o treści:</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">Tę stronę <span class="notranslate">object</span> można teraz umieścić w witrynie <span class="notranslate">room</span>, a po naciśnięciu klawisza zapisać i załadować stan <span class="notranslate">room</span> z witryny <span class="notranslate">buffer</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Bufory sieciowe</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Podczas pracy z <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">funkcjami sieciowymi</a> programu <span data-keyref="GameMaker Name">GameMaker</span> należy używać adresu <span class="notranslate">buffers</span> do tworzenia pakietów danych, które są przesyłane przez połączenie sieciowe. Ten przykład ma na celu pokazanie, jak to się robi, ale ze względu na zakres możliwości sieciowych ma on na celu jedynie pokazanie, jak używać samego <span class="notranslate">buffers</span>, a nie całego systemu sieciowego.</p>
    <p class="dropspot">Pierwszą rzeczą, którą pokażemy, jest tworzenie i używanie <span class="notranslate">buffer</span> po stronie klienta połączenia sieciowego. Ta strona <span class="notranslate">buffer</span> będzie używana do tworzenia małych pakietów danych, które następnie będą mogły być wysyłane do strony <span class="notranslate">server</span>, dlatego w <strong>zdarzeniu tworzenia</strong> instancji przypisalibyśmy jej adres <span class="notranslate">buffer</span> w następujący sposób:</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">Strona <span class="notranslate">buffer</span> jest niewielka (256 bajtów), ponieważ nie jest przeznaczona do przechowywania dużych ilości danych, a następnie jest powiększana (grow <span class="notranslate">buffer</span> ), aby zapewnić brak błędów w przypadku konieczności dodania większej ilości danych do wysłania w dowolnym momencie, a wyrównanie jest ustawione na jeden dla wygody.</p>
    <p class="dropspot">Załóżmy, że chcemy, aby nasz klient wysyłał dane do <span class="notranslate">server</span>. W tym celu musimy utworzyć &quot;pakiet&quot; <span class="notranslate">buffer</span>. W tym przykładzie wyślemy <strong>zdarzenie naciśnięcia klawisza</strong>, np. gdy gracz naciśnie <em>strzałkę w lewo </em>, aby poruszać się w grze. Aby to zrobić, najpierw zapisujemy niezbędne dane na stronie <span class="notranslate">buffer</span>, a następnie je wysyłamy:</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
      buffer_write(buff, buffer_u8, 1);<br />
      buffer_write(buff, buffer_s16, vk_left);<br />
      buffer_write(buff, buffer_bool, true);<br />
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">Przed zapisem na stronie <span class="notranslate">buffer</span> ustawiamy &quot;tell&quot; na początek strony <span class="notranslate">buffer</span>, ponieważ sieci zawsze pobierają dane od początku strony <span class="notranslate">buffer</span>. Następnie wpisujemy wartość kontrolną (zostanie ona wykorzystana przez stronę <span class="notranslate">server</span> do określenia typu zdarzenia, które ma zostać przetworzone), używany klawisz, a następnie stan klawisza (w tym przypadku true oznacza naciśnięty). Ta strona <span class="notranslate">buffer</span> jest następnie wysyłana przez funkcję sieciową jako pakiet danych. Zwróć uwagę, że nie wysyłamy całej strony <span class="notranslate">buffer</span>! Wysyłamy tylko zapisane dane, używając funkcji buffer_tell do zwrócenia aktualnej pozycji odczytu/zapisu na stronie <span class="notranslate">buffer</span> (pamiętaj, że zapis na stronie <span class="notranslate">buffer</span> przenosi &quot;tell&quot; na koniec tego, co zostało zapisane). Ma to na celu uniknięcie wysyłania większej liczby bajtów, niż jest to konieczne.</p>
    <p class="dropspot">A co z odbiorem danych na stronie <span class="notranslate">server</span>? Odebrany pakiet danych musi zostać zapisany w <span class="notranslate">buffer</span> na stronie <span class="notranslate">server</span>, a następnie wykorzystany do aktualizacji gry. W tym celu należy użyć <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">zdarzenia asynchronicznego Networking</a> w kontrolerze <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">sieciowym</a> <span class="notranslate">object</span> na stronie <span class="notranslate">server</span>, jak pokazano w poniższym uproszczonym kodzie:</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br />
      if cmd == buffer_read(buff, buffer_u8);<br />
      {<br />
          key = buffer_read(buff, buffer_s16);<br />
          key_state = buffer_read(buff, buffer_bool);<br />
      }</p>
    <p class="dropspot">Zdarzenie asynchroniczne będzie zawierało specjalną tymczasową mapę DS <span class="inline">async_load</span> (jest ona usuwana z pamięci po zakończeniu zdarzenia automatycznie), która zawiera różne informacje w zależności od typu danych przychodzących z sieci. W tym przypadku zakładamy, że mapa została sprawdzona i uznana za pakiet danych <span class="notranslate">buffer</span> wysłany od klienta. Sprawdzamy teraz pierwszą część danych, która znajduje się na stronie <span class="notranslate">buffer</span>, aby sprawdzić, jakiego rodzaju zdarzenie zostało wysłane - w tym przypadku wartość &quot;1&quot; oznacza zdarzenie związane z klawiszem, jednak podczas kodowania takich rzeczy należy zdefiniować stałe przechowujące te wartości, aby uprościć pracę - a następnie zapisujemy naciśnięty klawisz i jego stan (<span class="inline">true</span> = naciśnięty, <span class="inline">false</span> = zwolniony). Te informacje zostaną następnie użyte do zaktualizowania wszystkich klientów o nowy stan gracza wysyłającego.</p>
    <p class="note"><strong>UWAGA</strong>: Strona <span class="notranslate">buffer</span> utworzona z mapy DS jest automatycznie usuwana na końcu zdarzenia asynchronicznego sieci, więc nie ma potrzeby używania tutaj <span class="inline" style="font-size: 14px">funkcji buffer_delete()</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Additional_Information.htm">Informacje dodatkowe</a></div>
        <div style="float:right">Następny: <a href="Bitwise_Operators.htm">Operatory bitowe</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>