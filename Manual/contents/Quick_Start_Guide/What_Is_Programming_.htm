<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Co to jest programowanie?</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Co to jest programowanie?</h1>
  <p>W <a href="Quick_Start_Guide.htm">poprzednim rozdziale</a> opisaliśmy, w jaki sposób <span data-keyref="GameMaker Name">GameMaker</span> tworzy grę, ale niezależnie od tego, co dodałeś na stronach <span class="notranslate">sprites</span>, <span class="notranslate">objects</span> czy <span class="notranslate">rooms</span>, nic się nie stanie, jeśli tego nie <strong>zaprogramujesz </strong>. Ale co to jest program?</p>
  <p>W ogólnym rozumieniu program to po prostu zestaw instrukcji (lub <strong> <a class="glossterm" data-glossterm="oświadczenie" href="#">oświadczenie</a></strong><span class="glossextra">s</span>), które użytkownik przekazuje komputerowi, aby ten wykonał określone zadania. Zadania te mogą być bardzo różne - od prostego nakazania komputerowi narysowania czegoś na ekranie po obliczenie wartości na podstawie danych wprowadzonych przez użytkownika i zareagowanie na nią. Na poprzedniej stronie rozmawialiśmy o przesunięciu instancji <span class="notranslate">object</span> w prawo o 2 piksele, przyjrzyjmy się więc programowi, który to zrobi:</p>
  <p>W języku <span data-keyref="GML_Visual">GML Visual</span> wyglądałoby to następująco:</p>
  <p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>Przy użyciu <span data-keyref="GML_Code">kodu GML</span> wyglądałoby to następująco:</p>
  <p class="code">x = x + 2;</p>
  <p>Aby zrozumieć, o co chodzi, musimy najpierw omówić <strong>zmienne</strong>, a następnie <strong>funkcje </strong>i wreszcie <strong>warunki </strong>, ponieważ te trzy elementy stanowią zasadniczą część każdego programu.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">Zmienne</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Zmienne są podstawą programowania, podobnie jak <strong>funkcje </strong>(o których za chwilę). Zmienna to po prostu <em>wartość o określonej nazwie</em>, a w powyższym przypadku zmienna nazywa się &quot;<span class="inline">x</span>&quot;. Zmienna &quot;<span class="inline">x</span>&quot; może mieć dowolną wartość, np. -126, 583 lub nawet 1.56378, ale rzeczywista wartość &quot;<span class="inline">x</span>&quot; jest nieistotna, ponieważ może się zmieniać (stąd nazwa &quot;zmienna&quot;). Ważne jest to, że bierzemy &quot;<span class="inline">x</span>&quot; i dodajemy do niej 2. Warto zauważyć, że w tym przypadku &quot;<span class="inline">x</span>&quot; jest zmienną <strong>wbudowaną</strong>, co oznacza, że jest to zmienna tworzona przez <span data-keyref="GameMaker Name">GameMaker</span> dla wszystkich <span class="notranslate">objects</span>, ale można też tworzyć własne zmienne.</p>
    <p class="dropspot">Aby utworzyć zmienną, należy ją <strong>zadeklarować </strong>, zanim będzie można jej użyć. Zadeklarowanie zmiennej jest informacją dla <span data-keyref="GameMaker Name">GameMakera</span>, że ta nowa zmienna istnieje i ma wartość początkową. Aby zadeklarować zmienną, wystarczy zrobić coś takiego:</p>
    <p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">lub:</p>
    <p class="code">points = 0;</p>
    <p class="dropspot">Gdy zmienna zostanie zadeklarowana, można jej używać w dalszym kodzie lub działaniach programu. Wspaniałą cechą zmiennych jest to, że pozwalają na &quot;ponowne użycie&quot; wartości w wielu miejscach, bez konieczności martwienia się o to, jaka to jest wartość. Na przykład, powiedzmy, że mamy zmienną &quot;<span class="inline">damage</span>&quot; i używamy jej w różnych miejscach, aby powiedzieć programowi <span data-keyref="GameMaker Name">GameMaker</span>, by zadał pewną ilość obrażeń innym <span class="notranslate">objects</span> w grze. Możemy zadeklarować zmienną &quot;<span class="inline">damage</span>&quot; jako 20, ale później zdecydujemy, że jest to zbyt duża wartość i chcemy ją zmienić na 10. Gdybyśmy użyli wartości 20 zamiast zmiennej, musielibyśmy przejrzeć cały nasz kod lub akcje i zmienić 20 na 10, co jest czasochłonne i podatne na błędy. Natomiast użycie zmiennej oznacza, że musimy ją zmienić na 10 tylko <em>raz </em>, gdy ją zadeklarujemy, a reszta kodu lub działań będzie korzystać z tej nowej wartości.</p>
    <p class="dropspot">Warto zauważyć, że istnieje wiele różnych typów zmiennych, a każdy z nich ma nieco inne sposoby użycia. Nie będziemy się tutaj tym zajmować, ale więcej informacji na ten temat można znaleźć w rozdziale <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">GameMaker Language Overview</a> w podręczniku.</p>
    <p class="dropspot">Zmienne to jednak tylko pierwsza część tej historii. Kolejną częścią jest użycie Funkcji...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">Funkcje</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">Kolejną ważną częścią programowania jest używanie <strong>funkcji </strong>i zmiennych. Funkcja jest po prostu instrukcją dla komputera, aby coś zrobił, i może mieć wartości wejściowe oraz wyjściowe (tzn. możesz podać jej jakąś wartość, a ona wykona jakąś operację i zwróci inną wartość), choć nie wszystkie funkcje wymagają danych wejściowych i nie wszystkie mają wartości wyjściowe. Aby lepiej to zrozumieć, przyjrzyjmy się funkcji wbudowanej w program <span data-keyref="GameMaker Name">GameMaker</span>.</p>
    <p class="dropspot">Funkcja, którą się zajmiemy, to <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>która w <span class="notranslate">GML</span> Visual jest akcją <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">Get Instance Count</a>. Ta funkcja/akcja pobierze liczbę wystąpień danego elementu <span class="notranslate">object</span> w grze <span class="notranslate">room</span>, a Ty użyjesz jej w następujący sposób:</p>
    <p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">lub:</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">W obu powyższych przykładach funkcja przyjmuje identyfikator <span class="notranslate">object</span> jako wartość wejściową (parametr <strong> <a class="glossterm" data-glossterm="argument" href="#">argument</a></strong> lub <strong>parametr</strong>) i daje wartość wyjściową (wartość <strong>zwracaną </strong>), która jest liczbą instancji danej strony <span class="notranslate">object</span> obecnych na stronie <span class="notranslate">room</span> w momencie wywołania funkcji/działania. Zwróć uwagę, że do przechowywania wartości zwracanej używamy zmiennej &quot;<span class="inline">number</span>&quot;. Zmienna ta może zostać zadeklarowana przed uruchomieniem tego kodu lub zostanie uznana za zadeklarowaną w momencie uruchomienia kodu i przypisania jej wartości zwracanej przez funkcję/działanie.</p>
    <p class="dropspot">Warto zauważyć, że użytkownik nie jest ograniczony do korzystania z wbudowanych akcji <span class="notranslate">GameMaker Language</span> lub <span class="notranslate">GML</span> Visual i może konstruować własne funkcje, które można wykorzystać do rozszerzenia możliwości programowania (więcej informacji na ten temat można znaleźć <a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">tutaj</a> dla <span class="notranslate">GML</span> i <a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">tutaj</a> dla <span class="notranslate">GML</span> Visual).</p>
    <p class="dropspot">Z funkcjami i zmiennymi można zrobić bardzo wiele, ale byłyby one bezużyteczne bez ostatniego ważnego elementu programistycznej opowieści, jakim są <strong>warunki</strong>...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">Warunkowe</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Duża część programowania polega na zadawaniu pytań. Są to zazwyczaj proste pytania, których wynik może być albo prawdziwy, albo fałszywy. Pytania te nazywamy <strong>warunkowymi </strong>(a wartości <span class="inline">true </span>i <span class="inline">false </span>są nazywane wartościami <strong>boolean </strong>). Najbardziej powszechnym i szeroko stosowanym pytaniem warunkowym jest pytanie &quot;<span class="inline">if</span>&quot;, które służy do sprawdzania, czy coś jest <span class="inline">true </span>lub <span class="inline">false </span>, a następnie do podejmowania odpowiednich działań. Prostym przykładem może być usunięcie postaci z gry, jeśli jej zdrowie spadnie poniżej zera, co w prostym języku można by wyrazić jako:</p>
    <p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p>
    <p class="dropspot">Aby przekształcić powyższy tekst w kod, otrzymalibyśmy następującą instrukcję:</p>
    <p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">lub:</p>
    <p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p>
    <p class="dropspot">Tak więc powyżej zadajemy pytanie &quot;czy zmienna hp jest mniejsza lub równa 0&quot;, a następnie, jeśli jest to prawda, wywołujemy funkcję <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> lub akcję <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Zniszcz instancję <span class="notranslate">Object</span> </a>. Zwróć uwagę, że &quot;<span class="inline">then</span>&quot; (jeśli coś... to coś...) jest <em>domyślne </em>i nie musisz go dodawać, a także zwróć uwagę, że w kodzie <span class="notranslate">GML</span> używamy nawiasów klamrowych <span class="inline">{} </span>, aby &quot;zablokować&quot; kod, który ma być wykonany, gdy &quot; <span class="inline">if</span>&quot; osiągnie wartość <span class="inline">true </span>(w kodzie wizualnym <span class="notranslate">GML</span> jest to symbolizowane przez usunięcie akcji po <em>prawej </em>stronie akcji &quot;<span class="inline">If</span>&quot;). Wszystko, co zostanie dodane między nawiasami klamrowymi, zostanie wykonane tylko wtedy, gdy &quot; <span class="inline">if</span>&quot; zostanie ocenione na <span class="inline">true</span>, więc w jednym &quot;bloku&quot; można wykonać więcej niż jedną instrukcję.</p>
    <p class="dropspot">Jeszcze jedną rzeczą, na którą należy zwrócić uwagę, używając warunku &quot;<span class="inline">if</span>&quot;, jest to, że możemy dodać do niego również instrukcję &quot;<span class="inline">else</span>&quot;, tak więc warunek będzie brzmiał &quot;jeśli coś zostanie ocenione na <span class="inline">true </span>to zrób coś, w <em>przeciwnym razie </em>zrób coś innego&quot;. W ten sposób można sobie poradzić z wyrażeniem warunkowym zwracającym <span class="inline">true </span> <em>lub </em> <span class="inline">false</span>. Przytoczmy też przykład:</p>
    <p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">lub:</p>
    <p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p>
    <p class="dropspot">Powyższy kod można przetłumaczyć na zwykły język jako:</p>
    <p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else:<br />
      <br />
          subtract one from the countdown variable.
    </p>
    <p class="dropspot">Nie należy się zbytnio przejmować częścią powyższego kodu dotyczącą tworzenia instancji, ponieważ zajmiemy się nią bardziej szczegółowo w następnych rozdziałach. Ważne jest, aby zrozumieć, że możesz tworzyć wyrażenia warunkowe, które sprawdzają, czy coś jest <span class="inline">true </span>lub <span class="inline">false </span>, i w ten sposób sprawić, że Twój program będzie reagował w różny sposób. Może się to wydawać bardzo proste, ale w rzeczywistości jest niezwykle potężne i stanowi podstawę niemal wszystkiego, co robisz, programując w <span data-keyref="GameMaker Name">GameMakerze</span>.</p>
  </div>
  <p> </p>
  <p>Tak więc, aby odpowiedzieć na nasze pytanie &quot;Czym jest programowanie?&quot;, możemy powiedzieć, że <strong>programowanie </strong>to używanie kombinacji <strong>stwierdzeń - </strong> które mogą wykorzystywać <strong> <a class="glossterm" data-glossterm="zmienna" href="#">zmienna</a></strong> <span class="glossextra">s</span><strong> </strong>, aby utworzyć <strong> <a class="glossterm" data-glossterm="wyrażenie" href="#">wyrażenie</a></strong><span class="glossextra">s</span>, <strong>funkcji </strong>do wykonywania zadań oraz <strong><a class="glossterm" data-glossterm="warunkowe" href="#">warunkowe</a></strong> <span class="glossextra">s</span> do zadawania pytań - a następnie uruchamianie tych instrukcji współbieżnie, aby osiągnąć jakiś cel. Poniżej znajduje się nieco bardziej złożony program w języku <span class="notranslate">GML</span> Visual i <span class="notranslate">GML</span>. Czy potrafisz odgadnąć, co on robi?</p>
  <p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>lub:</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if mouse_check_button_released(mb_left) == true<br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">Spoiler</a><span class="expandtext" data-targetname="expanding">Powyższy kod najpierw sprawdza, czy jest wciśnięty przycisk myszy ( <strong>lewy </strong>przycisk myszy, który jest zdefiniowany za pomocą stałej &quot; <span class="inline">mb_left</span>&quot;),
      a jeśli przycisk ten został naciśnięty, to przesuwa instancję uruchomionego kodu na bieżącą pozycję myszy (zdefiniowaną za pomocą zmiennych wbudowanych &quot; <span class="inline">mouse_x</span>&quot; i &quot; <span class="inline">mouse_y</span>&quot;) oraz
      ustawia także kolor mieszania instancji na <strong>czerwony</strong>. Jeśli przycisk myszy nie został wciśnięty, to sprawdzane jest, czy został on <strong>zwolniony</strong>, a jeśli tak, to przywracany jest kolor mieszanki instancji na biały (zauważ, że
      ponownie używamy pewnych wbudowanych <strong>stałych - </strong>&quot; <span class="inline">c_red</span>&quot; i &quot; <span class="inline">c_white</span>&quot; - aby łatwo zdefiniować kolory).</span></p>
  <p> </p>
  <p>Mam nadzieję, że teraz masz już nieco większe pojęcie o tym, na czym polega programowanie. Przejdźmy więc do poznania <span data-keyref="GameMaker Name">GameMaker</span> <a class="glossterm" data-glossterm="IDE" href="#">IDE</a> i zobaczmy, jak dodawać do gry <span class="notranslate">assets</span> takie elementy, jak <em>sprite </em>'y, <em>obiekty </em>i inne ważne zasoby, których będzie potrzebować Twoja gra.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Content.htm">Indeks</a></div>
        <div style="float:right">Następny: <a href="Creating_Sprites.htm">Tworzenie sprite'ów</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>