<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shadery</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Redaktor <span class="notranslate">Shader</span> </h1>
  <p><img>Shadery to bardzo potężne narzędzie, które może być używane do manipulowania grafiką renderowaną przez grę na ekranie, umożliwiając uzyskanie niezwykle szybkich efektów, począwszy od dodania subtelnego odcienia koloru do strony <span class="notranslate">sprite</span>, aż po efekty zniekształcenia całego ekranu. Ale co to jest <span class="notranslate">shader</span>?</p>
  <p>Strona <span class="notranslate">shader</span> to w zasadzie dwuczęściowy program, który jest uruchamiany bezpośrednio na karcie graficznej, dzięki czemu jest bardzo szybki, ponieważ procesor graficzny wykonuje całą pracę, i zwalnia cykle procesora centralnego na potrzeby kodu gry. Pełna strona <span class="notranslate">shader</span> składa się z programu <span class="notranslate">vertex</span> <span class="notranslate">shader</span> oraz fragmentu <span class="notranslate">shader</span> (znanego także jako pixel <span class="notranslate">shader</span>). Oba te małe programy współpracują ze sobą, aby manipulować tym, co karta graficzna wyświetla na ekranie. Umożliwia to manipulowanie w czasie rzeczywistym położeniem, kolorem i wartościami alfa, które są faktycznie <a class="glossterm" data-glossterm="renderowane" href="#">renderowane</a> do <a class="glossterm" data-glossterm="bufor wyświetlacza" href="#">bufora wyświetlacza</a>.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Vertex Shader</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"> <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> to programowalny etap <span class="notranslate">shader</span> w potoku renderowania, który zajmuje się przetwarzaniem poszczególnych wierzchołków (punktów trójkątów używanych do renderowania dowolnego obrazu). Podczas renderowania geometrii - takiej jak <span class="notranslate">sprite</span> lub powierzchnia
      - <span data-keyref="GameMaker Name">GameMaker</span> tworzy strumień wierzchołków - zwany <strong>buforem wierzchołków (Vertex Buffer </strong>) - który definiuje geometrię tych trójkątów. Na przykład na stronie <span class="notranslate">sprite</span> geometria składa się z dwóch trójkątów (normalnie nazywanych <em>wielokątami</em>) wyrenderowanych
      razem w celu utworzenia &quot;quada&quot;. Strumień <span class="notranslate">vertex</span> z <span class="notranslate">Vertex</span> <span class="notranslate">Buffer</span> jest podawany jako wejście do <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span>, który może przetwarzać dane wierzchołków w programowalny sposób. Wyjście <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> jest wykorzystywane przez procesor graficzny do składania trójkątów,
      które są następnie odpowiednio przycinane i przycinane do portu widoku i kamery, a następnie przesyłane do bloku rasteryzacji układu GPU, który generuje nowy strumień wyjściowy, składający się z czegoś, co nazywa się <strong>Fragmentami</strong>. Są to niewielkie struktury danych
      danych, z których każda odnosi się do pojedynczego piksela wyświetlanego na ekranie.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Shader fragmentów</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Fragment <span class="notranslate">Shader</span> to programowalny etap <span class="notranslate">shader</span> w potoku renderowania, który zajmuje się &quot;fragmentami&quot; - interpolowanymi pikselami używanymi do <span class="notranslate">texture</span> danego wielokąta - i jest odpowiedzialny za wyprowadzenie ostatecznego koloru piksela każdego
      renderowanego trójkąta. Zasadniczo działa to tak: Fragment <span class="notranslate">Shader</span> otrzymuje na wejściu wszystkie te fragmenty (poszczególne piksele renderowanego trójkąta), które zostały przekazane wzdłuż rurociągu przez <span class="notranslate">Vertex</span> <span class="notranslate">Shader</span>. Może on następnie
      przetworzyć te fragmenty, aby zmienić kolor i alfa końcowego piksela docelowego, który zostanie narysowany na ekranie.</p>
  </div>
  <p> </p>
  <p>Pełne omówienie tego, jak naprawdę działa strona <span class="notranslate">shaders</span> i jakie miejsce zajmuje w potoku graficznym, wykracza poza zakres tego opracowania, ale krótki przewodnik można znaleźć tutaj:</p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Przewodnik po użyciu shaderów</a></li>
  </ul>
  <p> </p>
  <h2>Pomoc językowa</h2>
  <p>Program<span data-keyref="GameMaker Name">GameMaker</span> obsługuje następujące języki <span class="notranslate">shader</span>:</p>
  <table>
    <tbody>
      <tr>
        <th>Język shaderów</th>
        <th>Platforma docelowa</th>
      </tr>
      <tr>
        <td><strong>GLSL ES 1.0</strong></td>
        <td>Wszystkie platformy docelowe</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac i <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows, UWP, Xbox One i Series S/X</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>PlayStation 4 i 5</td>
      </tr>
    </tbody>
  </table>
  <p>Podczas pisania kodu GLSL ES <span class="notranslate">shaders</span> zaleca się jak najściślejsze przestrzeganie <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf" title="GLSL ES 1.0 Specification">oficjalnej specyfikacji języka</a>, aby uniknąć błędów, ponieważ niektóre platformy docelowe mogą być bardziej restrykcyjne niż inne (np. platformy docelowe HTML5 i Opera GX, które mogą być bardziej restrykcyjne niż inne platformy, takie jak <span class="notranslate">Windows</span>, <span class="notranslate">macOS</span>, itp. jeśli chodzi o ograniczenia językowe).</p>
  <p> </p>
  <h2>Tworzenie shadera</h2>
  <p>Aby utworzyć zasób <span class="notranslate">shader</span>, wystarczy kliknąć prawym przyciskiem myszy na stronie <img> w <a href="../Introduction/The_Asset_Browser.htm">Przeglądarce</a> zasobów i wybrać <em>Utwórz -&gt; Shader</em>. Po utworzeniu podstawowego zasobu <span class="notranslate">shader</span>, możesz użyć menu prawego przycisku myszy <img> na nowym zasobie, aby wybrać typ <span class="notranslate">shader</span> przed kontynuowaniem edycji kodu:</p>
  <p><img>Sam edytor kodu jest dzielony na dwa &quot;programy&quot; - <span class="notranslate">Vertex</span> i Fragment - podczas tworzenia nowego <span class="notranslate">shader</span>, przy czym każdy z nich jest dostępny w zakładkach na górze edytora. Oba są tworzone jednocześnie, ponieważ <em>nie można utworzyć strony <span class="notranslate">shader</span> bez obu części</em>. Nawet jeśli chcesz używać tylko fragmentu <span class="notranslate">shader</span>, musisz najpierw utworzyć &quot;przelotowy&quot; <span class="notranslate">vertex</span> <span class="notranslate">shader</span>, dlatego domyślnie każdy nowo tworzony <span class="notranslate">shader</span> będzie miał już zakodowane <span class="notranslate">vertex</span> i fragmentowy przelotowy <span class="notranslate">shader</span> (na zrzucie ekranu u góry strony widać, że użyliśmy widoku panelu edytora kodu, aby pokazać te dwa programy obok siebie... przydatne, gdy pracujesz nad oboma programami <span class="notranslate">shader</span> razem).</p>
  <p>Warto zauważyć, że można używać GLSL ES <span class="notranslate">shaders</span> na <em>wszystkich </em>platformach docelowych, ale aby działały one na platformie docelowej <strong>HTML5 </strong>, należy włączyć WebGL w <a href="../Settings/Game_Options/HTML5.htm">Opcjach gry HTML5</a>, w przeciwnym razie nie będą działać.</p>
  <p>Więcej informacji na temat funkcji <span class="notranslate">shader</span> i możliwości ich wykorzystania w programie <span data-keyref="GameMaker Name">GameMaker</span> można znaleźć na kolejnych stronach:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Funkcje shaderów</a> - sekcja referencyjna <span class="notranslate">GML</span> dla <span class="notranslate">shaders</span>.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Stałe shaderów</a> - Stałe wbudowane w <span data-keyref="GameMaker Name">GameMakera</span>, które można wykorzystać podczas pisania strony <span class="notranslate">shaders</span>.</li>
    <li><a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">Specyfikacja GLSL ES 1.0</a> - plik PDF dla języka OpenGL ES 1.0 <span class="notranslate">Shader</span> używanego w programie <span data-keyref="GameMaker Name">GameMaker</span>.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL Language Reference</a> - strony referencyjne firmy Microsoft dotyczące używania<a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">języka</a> HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">Prezentacja języka PSSL</a> - Przegląd języka PSSL w formie prezentacji.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="The_Asset_Editors.htm">Redaktorzy Aktywów</a></div>
        <div style="float:right">Następny: <a href="Sounds.htm">Dźwięki</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
The <span class="notranslate">Shader</span> Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>