<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Wyrażenia i operatory</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different GML expressions" />
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~" />
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Wyrażenia i operatory</h1>
  <h2>Wyrażenia</h2>
  <p>Wyrażenie to wyrażenie matematyczne, które może zawierać zwykłe liczby, zmienne, <span class="notranslate">strings</span>, lub funkcje, a także jeden lub więcej <strong>operatorów </strong>(takich jak dodawanie, odejmowanie, mnożenie itd...). Wartości używane w wyrażeniu mogą być liczbami rzeczywistymi (np. <span class="inline">3.4 * 6</span>), liczbami szesnastkowymi zaczynającymi się od znaku <span class="inline">$</span> (np. <span class="inline">$00FFAA | $88FFAA</span>), <span class="notranslate">strings</span> w cudzysłowie (np. <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span>) lub bardziej skomplikowanymi wyrażeniami wykorzystującymi wiele operatorów i wartości.</p>
  <h2>Operatorzy</h2>
  <p>W wyrażeniach można stosować następujące operatory:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Przypisanie (=)</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span class="inline2"><b>=</b></span> służy do przypisywania wartości do zmiennej. Zauważ, że można go <i>także</i> użyć do porównywania zmiennych w <span data-keyref="GameMaker Name">GameMakerze</span> i możesz to zobaczyć w przykładach i kodach innych osób. Jest to jednak pozostałość po starych wersjach <i>GameMakera</i> i powinieneś używać operatorów <b>==</b> do porównywania i <b>=</b> do przypisywania, jak pokazano w poniższych przykładach:</p>
    <p class="code">a = 12;<br />
      speed = 5;<br />
      val = (old_val + 5);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Łączenie (&amp;&amp;, ||, ^^)</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b><span class="inline2">&amp;&amp;</span>, <span class="inline2">||</span>, ^^ (<span class="inline2">and</span>, <span class="inline2">or</span> i <span class="inline2">xor</span></b> ) są używane do łączenia wartości logicznych w celu uzyskania wartości true lub false. Jeśli którykolwiek z poniższych przykładów zostanie rozwiązany przez <span class="inline">true</span>, kod zostanie uruchomiony:</p>
    <p class="code">if (a == b &amp;&amp; c == d) { do something... }  // and<br />
      if (a == b || c == d) { do something... }   // or<br />
      if (a == b ^^ c == d) { do something... }  // xor</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Nullish (??, ??=)</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="note"><span class="note">UWAGA</span> &quot;Nullish&quot; odnosi się po prostu do wartości równej <span class="inline2">undefined</span> lub <span class="inline2">pointer_null</span>.</p>
    <p class="dropspot"><span class="inline2">?</span>? to zerowy operator koalescencji, który zwraca określone wyrażenie, jeśli podana wartość jest <span class="inline2">niezdefiniowana</span> lub <span class="inline2">pointer_null</span>. Operator ten wymaga następującej składni:</p>
    <p class="code_plain">(input ?? null_output)</p>
    <p class="dropspot">Jeśli dane <span class="inline2">wejściowe</span> są <span class="inline2">niezdefiniowane</span> lub <span class="inline2">pointer_null</span>, wyrażenie zwróci wartość <span class="inline2">null_output</span>; jednak we wszystkich innych przypadkach zwróci po prostu wartość <span class="inline2">wejściową</span>. Można tego użyć do zdefiniowania &quot;domyślnej&quot; wartości zmiennej, na wypadek gdyby sama zmienna nie posiadała poprawnej wartości.</p>
    <p class="dropspot">Rozważmy następujący przykład:</p>
    <p class="code_plain">username = data.username ?? &quot;INVALID USERNAME&quot;;</p>
    <p class="dropspot">W tym przypadku zmienna <span class="inline2">username</span> otrzyma wartość zapisaną w <span class="inline2">data.</span>username, jednak jeśli <span class="inline2">data.us</span> ername będzie <span class="inline2">niezdefiniowana</span> lub <span class="inline2">pointer_null</span>, zmienna otrzyma zamiast tego <span class="notranslate">string</span> <span class="inline2">&quot;INVALID USERNAME&quot;</span>. Przykład ten gwarantuje, że wywołania funkcji korzystających ze zmiennej <span class="inline2">username</span> nie spowodują błędu z powodu otrzymania wartości null oraz że użytkownik będzie wiedział, kiedy jego nazwa użytkownika nie została zwrócona.</p>
    <p class="note"><span class="note">UWAGA</span> Wyrażenie po prawej stronie operatora koalescencji nullish jest wykonywane tylko wtedy, gdy wartość wejściowa jest nullish, co oznacza, że wszelkie wywołania funkcji zawarte w wyrażeniu RHS będą wykonywane tylko wtedy, gdy wartość wejściowa jest nullish.</p>
    <hr />
    <p class="dropspot"><span class="inline2">??=</span> jest podobny do opisanego powyżej operatora koalescencji nullish, ale jest używany specjalnie do przypisywania zmiennych. Operator ten wymaga następującej składni:</p>
    <p class="code">variable ??= null_value</p>
    <p class="dropspot">Jeśli <span class="inline2">zmienna</span> jest <span class="inline2">niezdefiniowana</span> lub <span class="inline2">pointer_null</span>, zostanie jej przypisana wartość <span class="inline2">null_value</span>; w przeciwnym razie zmienna pozostanie niezmieniona. Można tego użyć do przypisania zmiennej niestandardowej, &quot;domyślnej&quot; wartości, gdy przechowuje ona wartość null.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Porównywanie (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!</span>=, <span class="inline2">&gt;</span>, <span class="inline2">&gt;</span></b><b> <span class="inline2">=</span></b> są porównaniami i mogą dawać tylko wynik <span class="inline">true</span> lub <span class="inline">false</span> (gdzie true może być również interpretowane jako 1, a false jako 0). Przykłady użycia:</p>
    <p class="code">if (a &lt; b) {do something...}<br />
      if (a != b) {do something...}</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Bitowe (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, ^, <span class="inline2">&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span> </b>służą do wykonywania operacji bitowych, gdzie | = bitowe lub, &amp; = bitowe i, ^ = bitowe xor, &lt;&lt; = przesunięcie w lewo, &gt;&gt; = przesunięcie w prawo. Przykłady użycia:</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br />
      if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">Dodatkowe informacje na temat używania operatorów bitowych i ich działania można znaleźć w rozdziale: <a href="../../Additional_Information/Bitwise_Operators.htm">Operatory bit</a>owe.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Arytmetyczne (+, -, *, /)</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b> oznaczają odpowiednio dodawanie, odejmowanie, mnożenie i dzielenie. Przykłady użycia:</p>
    <p class="code">c = a * b;<br />
      str = a + &quot;world&quot;;</p>
    <p class="note"><span class="note"><b>UWAGA</b></span> Liczby zmiennoprzecinkowe nie zatrzymują się na dzieleniu przez zero, ponieważ w odpowiedzi otrzymają nieskończoność. Jeśli A i B są liczbami całkowitymi (int32 lub int64), to dzielenie zostanie wykonane jako dzielenie przez liczby całkowite (zostanie sprawdzone dzielenie przez 0 i zostanie usunięty błąd). W przeciwnym razie zostanie wykonane dzielenie zmiennoprzecinkowe (bez sprawdzania dzielenia przez 0).</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Zwiększanie/ zmniejszanie (++, --)</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span> służą do dodawania lub odejmowania jednego<span class="inline2">(1</span>) od wartości. Warto zauważyć, że umieszczenie tego przed lub po wartości, do której ma być dodane lub od której ma być odjęte, daje nieco inne wyniki. Na przykład:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++a</span> spowoduje inkrementację zmiennej i zwróci jej zwiększoną wartość.</li>
      <li class="dropspot"><span class="inline">a++</span> spowoduje inkrementację zmiennej, ale zwróci wartość sprzed jej inkrementacji.</li>
    </ul>
    <p class="dropspot">Dlatego też, jeśli masz coś takiego:</p>
    <p class="code">var a = 1;<br />
      show_debug_message(string(a++));<br />
      show_debug_message(string(++a));</p>
    <p class="dropspot">Wyjściem debugowania byłyby wartości 1 i 3. Oto kilka przykładów użycia:</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br />
      {<br />
          do something...<br />
      }</p>
    <p class="code">if (hit == true)<br />
      {<br />
          --score;<br />
      }</p>
    <p class="note"><strong>UWAGA</strong>: Na platformach docelowych kompilatora <span class="notranslate">YoYo</span> (oznaczonych (YYC)) wyrażenia te są obliczane od lewej do prawej, podczas gdy na wszystkich innych platformach docelowych są one obliczane od prawej do lewej, co oznacza, że:</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">daje różne wyniki w zależności od platformy.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Dzielenie i modulo (div, %, mod)</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong><span class="inline2">div</span></strong><strong><span class="inline2"></span>, <span class="inline2">mod</span> (<span class="inline2">%</span></strong> ) to dzielenie i modulo, gdzie div określa, na ile wartości można podzielić, uzyskując tylko iloraz całkowity, a mod określa tylko resztę z dzielenia. Zauważ, że dzielenie i modulowanie można wykonywać tylko przy użyciu wartości całkowitych. Przykłady użycia: </p>
    <p class="code">secs = time mod 60;<br />
      time_str = string(time div 60);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Jednoargumentowe (!, -, ~)</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">Dostępne są następujące operatory <strong>jednoargumentowe</strong>:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline2"><strong>!</strong></span>: boolean &quot;nie&quot;, więc <span class="inline">!true == false</span></li>
      <li class="dropspot"><span class="inline2"><strong>-</strong></span>: neguje następną wartość rzeczywistą lub całkowitą (nie dotyczy <span class="notranslate">strings</span> lub booleans)</li>
      <li class="dropspot"><span class="inline2"><strong>~</strong></span>: neguje następną wartość bitowo</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <h2>Grupowanie wyrażeń</h2>
  <p><i></i>Jako wartości we wszystkich wyrażeniach można używać liczb, zmiennych lub funkcji, które zwracają wartość, a podwyrażenia można umieszczać również w nawiasach. Wszystkie operatory działają dla wartości liczb rzeczywistych, ale <em>porównania </em>działają również dla <span class="notranslate">strings</span>, a operator &quot;<strong>+</strong>&quot; może być używany do łączenia łańcuchów.</p>
  <p>W przypadku wykonywania wielu operacji w jednym wyrażeniu <b>bardzo ważne</b> jest użycie nawiasów <span class="inline">()</span> w celu oddzielenia kolejności operacji, ponieważ różne platformy mogą wykonywać je w różny sposób, jeśli nie zostaną wyraźnie określone w ten sposób. Na przykład rozważmy następujący kod:</p>
  <p class="code">a = b == c || d;</p>
  <p>Różne docelowe kompilatory będą wykonywać operacje w różnej kolejności, ponieważ nie są one wyraźnie pokazane, co może prowadzić do &quot;dziwnych&quot; wyników, których nie spodziewasz się podczas gry. aby tego uniknąć, użyj <span class="inline">()</span>, aby oddzielić poszczególne części, tak jak poniżej:</p>
  <p class="code">a = (b == c || d);   //better<br />
    a = ((b == c) || d); //best</p>
  <h2>Grupowanie zestawień</h2>
  <p>W przypadku używania różnych operacji i wyrażeń w jednym bloku kodu, również one powinny być rozdzielone. Na przykład poniższy kod <em>wygląda</em> na poprawny:</p>
  <p class="code">if my_var == your_var ++their_var;</p>
  <p>Jednak kompilator może to zinterpretować na jeden z dwóch sposobów:</p>
  <p class="code">if my_var == your_var<strong>++</strong> then their_var;<br />
    <br />
    // or<br />
    <br />
    if my_var == your_var then <strong>++</strong>their_var;
  </p>
  <p>Patrząc na kod, można stwierdzić, że jedno z tych rozwiązań jest nieco głupie, ale to dlatego, że my wiemy, co chcemy osiągnąć i co ma się wydarzyć, ale kompilator tego nie wie. Widzi on jedynie dwie zmienne z operatorem ++ między nimi, więc musi wybrać, do której z nich go zastosować. Dlatego <strong>zawsze</strong> należy <strong>wyraźnie nawiasować wyrażenia, operacje i instrukcje</strong>. Poprawna wersja powyższego kodu powinna wyglądać następująco:</p>
  <p class="code">if (my_var == your_var)<br />
    {<br />
        ++their_var;<br />
    }</p>
  <p>Może się to wydawać bardziej czasochłonne, ale nie ma żadnych niejasności co do wykonywanych operacji i będzie się kompilować i zachowywać spójnie na wszystkich platformach. Należy również pamiętać, że chociaż obecnie można tworzyć łańcuchy wyrażeń i instrukcji bez użycia nawiasów, jest to funkcja starsza i w przyszłości może zostać zdeprecjonowana i usunięta z <span class="notranslate">GML</span>, dlatego też odpowiednie użycie nawiasów już teraz &quot;uodporni&quot; kod na przyszłość (i jest ogólnie dobrą praktyką).</p>
  <p>Oto kilka ostatnich przykładów różnych wyrażeń:</p>
  <p class="code">{<br />
        x = 23 div 2;<br />
        colour = $FFAA00 + $00BB12;<br />
        str = &quot;hello&quot; + &quot;world&quot;;<br />
        y += 5;<br />
        x *= y;<br />
        x = y &lt;&lt; 2;<br />
        x = 23 * ((2 + 4) / sin(y));<br />
        b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br />
    }</p>
  <p>Ostatnią rzeczą, na którą warto zwrócić uwagę, jest to, że istnieją pewne &quot;skróty&quot; wyrazowe, zwane <b>accessorami</b>, przeznaczone do stosowania z niektórymi <a href="../GML_Reference/Data_Structures/Data_Structures.htm">strukturami danych</a> i <a href="Arrays.htm">tablicami</a>. Umożliwiają one szybkie i łatwe dodawanie lub zastępowanie danych w tych formatach bez konieczności wywoływania jakichkolwiek funkcji. Szczegółowe informacje można znaleźć na następującej stronie</p>
  <ul class="colour">
    <li><a href="Accessors.htm">Akcesoria</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="Script_Functions.htm">Funkcje i zmienne skryptu</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>