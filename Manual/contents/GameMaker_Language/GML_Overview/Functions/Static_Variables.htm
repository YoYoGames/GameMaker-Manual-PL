<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Zmienne statyczne</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Static Variables" />
  <meta name="search-keywords" content="Static Variables,static" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Zmienne statyczne</h1>
  <p>Interesującą cechą <a href="../Script_Functions.htm">funkcji skryptowych</a> i <a href="../Method_Variables.htm">zmiennych metod</a> jest to, że mogą one posiadać zmienne <strong>statyczne</strong>. Zmienna statyczna to taka, która jest definiowana przy pierwszym wywołaniu funkcji i która od tego momentu będzie utrzymywać swoją wartość. Aby utworzyć zmienną statyczną, należy zdefiniować ją za pomocą słowa kluczowego <span class="inline">static</span>, jak pokazano w tym prostym przykładzie:</p>
  <p class="code">counter = function()<br />
    {<br />
        static num = 0;<br />
        return num++;<br />
    }</p>
  <p>W powyższym przykładzie zmienna <span class="inline">num</span> jest zmienną statyczną, a więc zostanie zdefiniowana jako <span class="inline">0</span> przy pierwszym wywołaniu funkcji, ale przy każdym kolejnym wywołaniu funkcji inicjalizacja zmiennej zostanie zignorowana. Jeśli więc następnie wywołasz tę funkcję w następujący sposób:</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br />
    {<br />
        show_debug_message(counter());<br />
    }</p>
  <p>Dane wyjściowe będą następujące:</p>
  <p class="code">0<br />
    1<br />
    2<br />
    3<br />
    4<br />
    5<br />
    6<br />
    7<br />
    8<br />
    9</p>
  <p>Gdybyś nie użył tutaj słowa kluczowego <span class="inline">static</span>, to wyjściem byłoby po prostu <span class="inline">0</span> dla każdej iteracji funkcji <span class="notranslate">loop</span>, ponieważ zmienna <span class="inline">num</span> będzie definiowana jako <span class="inline">0</span> przy każdym wywołaniu funkcji przed jej zwróceniem. Zwróć uwagę, że zmienna statyczna może być zmieniana tylko wewnątrz oryginalnej funkcji, a zwrócenie jej da po prostu kopię jej wartości - zasadniczo współdzielona zmienna statyczna może być zmieniana tylko przez funkcję, która ją zawiera.</p>
  <p>Zmienna statyczna jest zawsze inicjalizowana na początku funkcji, więc niezależnie od tego, gdzie w funkcji zdefiniujemy zmienną statyczną, będzie ona zawsze dostępna do odczytu i zmiany w całej funkcji (nawet jeśli zostanie użyta przed jej zdefiniowaniem). Zobacz poniższy przykład:</p>
  <p class="code">function add_health()<br />
    {<br />
        my_health++;<br />
        show_debug_message(my_health);<br />
        static my_health = 1;<br />
    }</p>
  <p>Tutaj zmienna statyczna &quot;<span class="inline">my_health</span>&quot; jest zmieniana i wypisywana na wyjście kompilatora <em>przed</em> jej zainicjalizowaniem. Chociaż wygląda to źle, jest to całkowicie w porządku, ponieważ zmienne statyczne są inicjowane <em>przed </em>wykonaniem jakiegokolwiek kodu funkcji. Należy pamiętać, że jeśli w funkcji znajduje się wiele zmiennych statycznych, to przy ich inicjalizacji na początku zostanie zachowana kolejność, w jakiej zostały zdefiniowane.</p>
  <p>Można również użyć słowa kluczowego <span class="inline">static</span> wewnątrz funkcji, aby utworzyć funkcję <strong>statyczną</strong>, co - podobnie jak w przypadku zmiennych - oznacza po prostu, że funkcja zostanie zdefiniowana tylko raz, na przykład przy pierwszym wywołaniu funkcji:</p>
  <p class="code">function(_x, _y) Vector2 constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function( _other )<br />
        {<br />
            x += _other.x;<br />
            y += _other.y;<br />
        }<br />
    }
  </p>
  <p>W powyższym przykładzie można użyć funkcji konstruktora <span class="inline"><span class="inline">Vector2</span> do utworzenia strony <span class="notranslate">struct</span>, a strona <span class="notranslate">struct</span> będzie miała kilka zmiennych, z których jedną jest zmienna metody <span class="inline"><span class="inline">Add</span>. Ponieważ zmienna ta została zdefiniowana jako statyczna, funkcja, którą zawiera, zostanie zainicjalizowana tylko <em>raz </em>, przy pierwszym wywołaniu funkcji <span class="inline">Vector2</span>, a wszystkie kolejne <span class="notranslate">structs</span> utworzone za pomocą tego konstruktora będą odwoływać się do funkcji <span class="inline">Add</span>, która została utworzona na początku, zamiast tworzyć nową funkcję dla każdego <span class="notranslate">struct</span> (więcej informacji na temat <span class="notranslate">structs</span> i słowa kluczowego <span class="inline">constructor</span> można znaleźć <a href="../Structs.htm">tutaj</a>).</p>
  <p>Gdy używamy dziedziczenia z konstruktorami, wszelkie zmienne statyczne w konstruktorze potomnym zostaną zainicjowane dopiero po wykonaniu konstruktora nadrzędnego, więc zmienne statyczne konstruktora potomnego nie będą nadpisywać zmiennych statycznych konstruktora nadrzędnego. Zobacz poniższy przykład:</p>
  <p class="code">function Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 10;<br />
    }<br />
    <br />
    function Child() : Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 20;<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Wywołanie konstruktora <span class="inline">Child()</span> powoduje wypisanie tego do dziennika wyjściowego:</p>
  <p class="code">10<br />
    20</p>
  <p>Pierwsza wartość pochodzi z konstruktora rodzica, a druga z konstruktora dziecka. Pokazuje to, że zmienna statyczna <span class="inline">value</span> dziecka nie została zainicjalizowana do momentu zakończenia konstruktora rodzica, a w każdym konstruktorze zmienna statyczna została zainicjowana przed wywołaniem <span class="inline">show_debug_message()</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="../Arrays.htm">Tablice</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Static Variables
static
-->
  <!-- TAGS
static
-->
</body>
</html>