<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else i operatory warunkowe</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>if / else i operatory warunkowe</h1>
  <p>Podstawową cechą większości języków programowania jest możliwość zadania prostego pytania, które daje odpowiedź typu boolean <span class="inline">true</span> lub <span class="inline">false</span>. W języku <span class="notranslate">GML</span> można to osiągnąć za pomocą słowa kluczowego <span class="inline">if</span>. Prosty warunek <span class="inline">if</span> przyjmuje <a class="glossterm" data-glossterm="wyrażenie" href="#">wyrażenie</a> i wykonuje jedno lub więcej<span class="glossextra">poleceń</span>, jeśli wyrażenie ma postać <span class="inline">true</span>, o następującej podstawowej postaci:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><br>
    Mówisz, że jeśli wyrażenie ma postać <span class="inline">true</span>, to zrób coś. Zauważ, że część &quot;wtedy&quot; warunku jest <em>niejawna</em>, ale istnieje słowo kluczowe <span class="inline">then</span>, którego można użyć (choć prawie zawsze jest ono pomijane), więc można również tworzyć takie warunki:</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Oprócz <span class="inline">if</span> i <span class="inline">then</span>, można również użyć słowa kluczowego <span class="inline">else</span>, aby zrobić coś innego, jeśli sprawdzane wyrażenie zostanie obliczone jako <span class="inline">false</span>. Ta forma &quot;<span class="inline">if... then... else...</span>&quot; wygląda następująco:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>W tym przypadku wyrażenie zostanie obliczone i jeśli jego wynikiem będzie <span class="inline">false</span>, to zostanie wykonana instrukcja następująca po <span class="inline">else</span>, w przeciwnym razie zostanie wykonana instrukcja początkowa ( <span class="inline">true</span>).</p>
  <p class="note"><span class="note">UWAGA</span> W języku <span class="notranslate">GameMaker</span> każda wartość mniejsza lub równa 0 będzie oznaczana jako <span class="inline">false</span>, natomiast każda wartość większa od 0 będzie oznaczana jako <span class="inline">true</span>.</p>
  <p>Dobrym zwyczajem jest umieszczanie nawiasów wokół wyrażeń i nawiasów klamrowych {} wokół poleceń w <span class="inline">if</span> (w przeciwnym razie zostanie wykonane tylko pierwsze polecenie), a także zajmowanie nowego wiersza w bloku dla każdego polecenia, na przykład:</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>Mimo że jest to nieco bardziej czasochłonne, oznacza to, że w kodzie nie ma żadnych niejasności i że będzie on zawsze poprawnie kompilowany na wszystkich platformach. Jednak w początkowym przykładzie może być inaczej, co wyjaśniono w sekcji na stronie <a href="../Expressions_And_Operators.htm">Wyrażenia i operatory</a>.</p>
  <p class="note"><strong>UWAGA</strong>: Przy porównywaniu dwóch wartości w celu sprawdzenia, czy są równe, należy użyć operatora &quot;<span class="inline">==</span>&quot;, a do przypisywania używać tylko operatora &quot;<span class="inline">=</span>&quot;. Obecnie <span class="notranslate">GameMaker</span> traktuje je jako wymienne, ale w przyszłości może się to zmienić, a Twój kod będzie czystszy i bardziej oczywisty, jeśli będziesz używać właściwych operatorów do porównań i przypisań.</p>
  <p>Aby podać właściwy przykład użycia <span class="inline">if</span>, rozważmy następujący kod, który przesunie instancję w kierunku pozycji <span class="inline">x=200</span> w <span class="notranslate">room</span>, gdy zostanie umieszczona w zdarzeniu Step:</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <p>Należy pamiętać, że w <span class="inline">if</span> można również wykonywać sprawdzenia <i>złożone</i>, tzn. sprawdzać różne wartości lub wyrażenia w tej samej instrukcji. W takich kontrolach można używać różnych <a href="../Expressions_And_Operators.htm">operatorów łączenia</a> (<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, oraz <span class="inline">^^</span> xor). Gdy to zrobisz, <span data-keyref="GameMaker Name">GameMaker</span> oceni każdą z nich po kolei i w zależności od tego, jak zostaną ocenione, reszta może zostać pominięta. Na przykład:</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = room_speed;<br />
    }</p>
  <p>Tutaj sprawdzamy, używając operatora &quot;i&quot; <span class="inline">&amp;&amp;</span>, a więc sprawdzane jest, czy <em>oba </em>warunki w <span class="inline">if</span> mają wartość <span class="inline">true</span>, a jeśli pierwszy z nich ma wartość <span class="inline">false</span>, to drugi nie zostanie nawet sprawdzony. Nazywa się to &quot;zwarciem&quot; kodu, dlatego łącząc wyrażenia do sprawdzenia, należy upewnić się, że &quot;najtańsze&quot; z punktu widzenia wydajności jest zawsze pierwsze, aby uniknąć sprawdzania droższych wyrażeń, jeśli pierwsze z nich będzie miało wartość <span class="inline">false</span>. W podobny sposób, jeśli warunek może być oceniony jako <span class="inline">true</span> lub <span class="inline">false</span> w czasie kompilacji, to cały warunek zostanie usunięty z kodu, np. powiedzmy, że masz <a href="../Variables/Constants.htm">makro</a> <span class="inline">DEBUG_ON </span>dla <span class="notranslate">debugging</span> i może to być albo <span class="inline">true</span>, albo <span class="inline">false</span> - jeśli zostanie ono ustawione na <span class="inline">false</span>, to poniższy blok kodu zostanie usunięty z gry podczas kompilacji:</p>
  <p class="code">if DEBUG_ON == true<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <p>Można również wykonywać <b>operacje warunkowe</b> (znane również jako operacje <b>trójskładnikowe</b> ), które są zasadniczo &quot;skrótowym&quot; sposobem wykonywania podstawowych <b>operacji</b> <span class="inline">if</span>. Ma ona następującą składnię:</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>Operator warunkowy &quot;<span class="inline">?</span>&quot; zwróci jedną z dwóch podanych wartości, w zależności od tego, czy wyrażenie warunkowe zostanie obliczone jako <span class="inline">true</span> lub <span class="inline">false</span>, na przykład:</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>Powyższy kod sprawdzi, czy wartość &quot;x&quot; jest równa połowie szerokości <span class="notranslate">room</span>, a następnie, jeśli jest mniejsza, ustawi &quot;<span class="inline">temp_x</span>&quot; na 32, w przeciwnym razie &quot;<span class="inline">temp_x</span>&quot; będzie równe szerokości <span class="notranslate">room</span> - 32. Poniżej znajduje się kilka innych przykładów użycia:</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br />
    (--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p>Warto również zauważyć, że można zagnieżdżać operacje warunkowe, ale w takim przypadku każda operacja będzie musiała być ujęta w nawiasy, np:</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a data-xref="{title}" href="../GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">Zwracanie się do zmiennych w innych przypadkach</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>