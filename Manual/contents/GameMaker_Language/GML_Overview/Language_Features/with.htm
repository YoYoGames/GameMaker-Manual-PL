<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>z</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the with function" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>z</h1>
  <p>Jak wskazano w rozdziale <a href="../Addressing_Variables_In_Other_Instances.htm">Adresowanie zmiennych w innych inst</a>ancjach, możliwe jest odczytywanie i zmienianie wartości zmiennych w instancjach i <a href="../Structs.htm">strukturach</a> innych niż ta, w której aktualnie wykonywany jest dany kod. Jednak w wielu przypadkach chcesz zrobić znacznie więcej niż tylko zmienić pojedynczą zmienną w tych innych instancjach i możesz chcieć wykonać bardziej złożone działania, które wymagają wielu funkcji i linii kodu. Na przykład, wyobraź sobie, że chcesz przesunąć wszystkie instancje piłki <span class="notranslate">object</span> w swojej grze o 8 pikseli w dół. Może Ci się wydawać, że można to osiągnąć za pomocą następującego fragmentu kodu:</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>Ale to nie jest poprawne, ponieważ prawa strona przypisania pobiera wartość współrzędnej y pierwszej kulki i dodaje do niej 8. Następnie ta nowa wartość jest ustawiana jako współrzędna y <em>wszystkich </em>kulek, więc w rezultacie wszystkie kulki otrzymują tę samą współrzędną y i nawet jeśli użyjesz następującego rozwiązania:</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>będzie miało dokładnie taki sam efekt, ponieważ jest po prostu skrótem pierwszego wyrażenia. Jak <i>więc</i> osiągnąć coś takiego? Właśnie dlatego w <span class="notranslate">GML</span> istnieje instrukcja <span class="inline">with</span>. Stwierdzenie <span class="inline">with</span> ma następującą składnię:</p>
  <p class="code">with (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>W <a class="glossterm" data-glossterm="wyrażenie" href="#">wyrażeniu</a> można wskazać jedną lub więcej instancji (lub <span class="notranslate">struct</span>), na których ma zostać wykonany kod, używając identyfikatora instancji, identyfikatora <span class="notranslate">object</span> (który wskazuje, że <i>wszystkie</i> instancje w <span class="notranslate">room</span> tego <span class="notranslate">object</span> mają wykonać blok kodu), identyfikatora <span class="notranslate">struct</span> lub jednego ze specjalnych <a href="../Instance_Keywords.htm">słów kluczowych</a> (<span class="inline">all</span> lub <span class="inline">other</span>). Spowoduje to zmianę <strong>zakresu</strong> kodu w nawiasach klamrowych <span class="inline">{}</span> z instancji, <span class="notranslate">struct</span> lub funkcji, w której faktycznie znajduje się kod, na instancję (lub instancje lub <span class="notranslate">struct</span>) podaną w wyrażeniu.</p>
  <p>Po ustawieniu przez wyrażenie zakresu <span class="inline">with</span>, <a class="glossterm" data-glossterm="oświadczenie" href="#">instrukcja</a> zostanie wykonana dla każdej ze wskazanych instancji, tak jakby ta instancja była instancją bieżącą ( <span class="inline">self</span>). Tak więc, wracając do naszego oryginalnego problemu, aby przesunąć wszystkie instancje kulki <span class="notranslate">object</span> o 8 pikseli w dół, należałoby wpisać:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p>
  <p>Zasadniczo jest to strona <span class="notranslate">loop</span>, a każda <a class="glossterm" data-glossterm="iteracja" href="#">iteracja</a> strony <span class="notranslate">loop</span> powoduje uruchomienie kodu na jednej instancji strony <span class="notranslate">object</span> <span class="inline">obj_ball</span>.</p>
  <p>Jeśli chcesz wykonać wiele poleceń, po prostu umieść je w nawiasach klamrowych, tak samo jak każdy inny blok kodu. Na przykład, aby przesunąć wszystkie kulki w naszym przykładzie w losowe położenie i nadać im losową prędkość i kierunek, użyjesz polecenia:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p>
  <p>Jak wspomniano powyżej, w instrukcji (instrukcjach) wskazana instancja lub struktura stała się instancją docelową (<span class="inline">self</span>), która uruchamia blok kodu, co oznacza, że oryginalna instancja (zawierająca <span class="inline">with</span> i cały blok kodu) stała się instancją <a href="../Instance_Keywords.htm"><span class="inline">other</span></a> instancją. Tak więc - na przykład - aby przenieść wszystkie kulki na pozycję bieżącej instancji, która faktycznie zawiera kod, można napisać tak:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p>
  <p>Oświadczenie <span class="inline">with</span> to niezwykle potężne narzędzie, przydatne w wielu, wielu okolicznościach, dlatego ważne jest, aby w pełni zrozumieć, jak można je wykorzystać. Dla ułatwienia poniżej podajemy kilka przykładów użycia:</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p>
  <p>Powyższy kod utworzy instancję <span class="inline">obj_Ball</span> i przypisze jej prędkość i kierunek instancji, która uruchamia cały blok kodu.</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p>
  <p>Powyższy kod zniszczy instancję <span class="inline">obj_Ball</span> znajdującą się najbliżej instancji uruchamiającej kod.</p>
  <p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p>
  <p>Powyższy kod używa adresu <span class="inline">with</span>, aby wycelować w <span class="notranslate">struct</span> i ustawić zmienne członkowskie <span class="notranslate">struct</span> na wartości przechowywane w zmiennych instancji wywołującej kod.</p>
  <p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p>
  <p>Powyższy kod jest nieco bardziej skomplikowany niż poprzednie, ponieważ wykorzystuje zmienną <a href="../Variables_And_Variable_Scope.htm">lokalną</a>. Zmienna ta jest <strong>lokalna </strong>dla <em>zdarzenia</em> lub<em>funkcji</em> <em>skryptu </em>, a nie dla instancji lub <span class="notranslate">struct</span> i dlatego może być używana i dostępna dla wszystkich instancji, do których odwołujemy się w bloku kodu. Tak więc w powyższym kodzie ustawiliśmy zmienną lokalną na specjalne słowo kluczowe <span class="inline">noone</span>, a następnie użyliśmy konstrukcji <span class="inline">with</span>, aby każda instancja <span class="inline">obj_Ball</span> sprawdziła swoją zmienną <span class="inline">str</span> względem zmiennej instancji uruchamiającej blok kodu. Jeśli wartość zmiennej jest większa, to zapisują one swój unikalny identyfikator w zmiennej lokalnej <span class="inline">inst</span>, co oznacza, że na końcu kodu w zmiennej lokalnej <span class="inline">_inst</span> będą przechowywane tylko instancje o wartości większej niż instancja wywołująca (lub słowo kluczowe <span class="inline">noone</span>, jeśli żadna nie jest większa).</p>
  <p>Warto zauważyć, że w ramach wywołania można używać specjalnych instrukcji <span class="inline"><a href="break.htm">break</a></span> i <span class="inline"><a href="continue.htm">continue</a></span>. <font face="Lucida Console"><span style="font-size: 16px;"><b>z</b></span></font> również w wywołaniu. Użycie <span class="inline">break</span> spowoduje natychmiastowe opuszczenie bloku kodu <span class="inline">with</span> i przejście do dowolnego kodu znajdującego się w zdarzeniu lub funkcji po zakończeniu <span class="inline">with</span>, np:</p>
  <p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p>
  <p>Powyższy kod <span class="notranslate">loops</span> przegląda instancje w <span class="notranslate">room</span> z <span class="notranslate">object</span> <span class="inline">obj_Enemy</span> i ustawia zmienną <span class="inline">hp</span> na 100 dla pierwszych 10, które znajdzie. Jeśli istnieje więcej niż 10 instancji, kod ten wywoła stronę <span class="inline">break</span> i zakończy działanie.</p>
  <p>Przykładem użycia adresu <span class="inline">continue</span> w pętli <span class="inline">with</span> może być:</p>
  <p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p>
  <p>Ten kod <span class="notranslate">loop</span> przechodzi przez wszystkie instancje z rodzicem <span class="inline">obj_Enemy_Parent</span>, a następnie sprawdza każdą z nich, czy zmienna instancji <span class="inline">invulnerable</span> jest <span class="inline">true</span> czy nie. Jeśli tak, słowo kluczowe <span class="inline">continue</span> kończy bieżącą iterację <span class="notranslate">loop</span> i przechodzi do następnej dostępnej instancji, w przeciwnym razie usuwa 25 ze zmiennej <span class="inline">hp</span>. Czynność ta jest powtarzana do momentu, aż zostaną sprawdzone wszystkie instancje z tym rodzicem.</p>
  <div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"> </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Language_Features.htm">Cechy językowe</a></div>
        <div style="float:right">Następny: <a href="return.htm"><span class="notranslate">return</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>