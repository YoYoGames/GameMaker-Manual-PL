<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>try / catch / finally</h1>
  <p>Instrukcje <span class="inline">try</span>, <span class="inline">catch</span> oraz <span class="inline">finally</span> mogą być używane w grze do sprawdzania błędów i pozwalają na testowanie bloków kodu oraz kontrolowanie, co się stanie, jeśli wystąpią <a href="../../../Additional_Information/Errors/Runner_Errors.htm">wyjątki</a>. Użycie tych instrukcji zapobiegnie zamknięciu gry przez wyjątek i wyświetleniu standardowego komunikatu o błędzie użytkownikowi, ale oznacza to, że będziesz musiał zająć się tym, co stanie się potem w takim przypadku, na przykład zapisaniem plików dziennika i zakończeniem gry (zauważ, że jeśli zdecydujesz się nie robić nic, Twoja gra może stać się niestabilna i nie działać poprawnie).</p>
  <p>Najbardziej podstawowa składnia strony <span class="inline">try</span> jest następująca:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Jednak posiadanie adresu <span class="inline">try</span> bez niczego do faktycznej obsługi wyjątków, które może wygenerować kod, nie będzie zbyt pomocne, dlatego zwykle łączymy go z adresem <span class="inline">catch</span>, o następującej składni:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Adres <span class="inline">catch</span> pozwala na uruchomienie dodatkowego kodu dostarczonego w następnym bloku, gdy wyjątek z poprzedniego bloku <span class="inline">try</span> został przechwycony. Jeśli jest to wyjątek <span class="notranslate">runtime</span>, to dostarczonej zmiennej można użyć do uzyskania dostępu do <a href="../Structs.htm">struktury</a>, która będzie zawierała następujące informacje:</p>
  <p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p>
  <p>Poniżej przedstawiono prosty przykład użycia:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p>
  <p>Może się zdarzyć, że będziesz chciał uruchomić jakiś kod niezależnie od tego, czy wyjątek został rzucony, czy nie. W tym celu możesz dodać blok <span class="inline">finally</span>. Składnia <span class="inline">finally</span> jest następująca:</p>
  <p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p>
  <p>Warto zauważyć, że można zastosować dowolną kombinację tych elementów, np:</p>
  <ul class="colour">
    <li><span class="inline">try</span> / <span class="inline">finally</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li>
  </ul>
  <p>Należy pamiętać, że w bloku <span class="inline">finally</span> <em>nie można </em>używać <a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a> lub <a href="return.htm"><span class="inline">return</span></a> ponieważ nie mają one żadnego znaczenia w tym kontekście i kompilator wygeneruje błąd, jeśli zostaną użyte.</p>
  <p>Można także zagnieżdżać różne <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> wewnątrz siebie, na przykład:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p>
  <p>Warto zauważyć, że można przejąć domyślny komunikat o błędzie <span class="notranslate">GML</span> i użyć własnego kodu obsługi, wywołując funkcję <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. Ta <a href="../Runtime_Functions.htm">funkcja runtime</a> umożliwia dostarczenie niestandardowego <a href="../Method_Variables.htm"><span class="notranslate">method</span></a> który będzie wywoływany za każdym razem, gdy w grze wystąpią nieobsługiwane wyjątki.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Language_Features.htm">Cechy językowe</a></div>
        <div style="float:right">Następny: <a href="throw.htm"><span class="notranslate">throw</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>