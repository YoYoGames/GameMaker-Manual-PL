<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>natomiast</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>natomiast</h1>
  <p>Na stronie <span class="notranslate">GameMaker Language</span> można wykonywać <i>pętle</i> na wiele sposobów, a jednym z najważniejszych jest funkcja <span class="inline">while</span> <span class="notranslate">loop</span>. Funkcja <span class="notranslate">loop</span> ma postać:</p>
  <p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>W tym przypadku mamy do czynienia z <a class="glossterm" data-glossterm="oświadczenie" href="#">instrukcją</a>, która jest powtarzana wielokrotnie na podstawie wyników oceny <a class="glossterm" data-glossterm="wyrażenie" href="#">wyrażenia</a>, tzn. z <span class="inline">while</span> <span class="notranslate">loop</span>, tak długo, jak wyrażenie jest oceniane na <span class="inline">true</span>, instrukcja (która może być również blokiem kodu składającym się z wielu instrukcji z nawiasami klamrowymi <span class="inline">{}</span>) jest wykonywana. Poniżej znajduje się przykład typowego sposobu użycia wyrażenia &quot;while&quot;:</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p>
  <p>Powyższy kod sprawdza kolizję między instancją wywołującą a instancją &quot;ściany&quot; i wykonuje wiele <a class="glossterm" data-glossterm="iteracja" href="#">iteracji</a>w trakcie jej występowania - przesuwając instancję w lewo o jeden piksel - aż do momentu, gdy instancja przestanie być w kolizji.</p>
  <p><strong>Kiedy należy używać <span class="inline">while</span> <span class="notranslate">loop</span>?</strong> Należy go używać zawsze wtedy, gdy chcemy powtórzyć jedno lub więcej poleceń, ale nie wiemy, ile razy mają one zostać powtórzone, pamiętając, że jeśli początkowa ocena to <span class="inline">false</span>, polecenia mogą nawet nie zostać uruchomione.</p>
  <p>Pamiętaj, że powinieneś <strong>bardzo uważać z pętlami <span class="inline">while</span> </strong>! Możesz łatwo zrobić <i>nieskończoną</i> <span class="notranslate">loops</span>, w którym to przypadku Twoja gra zawiesi się i nie będzie reagować na żadne dane wejściowe użytkownika i będzie musiała zostać przymusowo zamknięta. Na przykład:</p>
  <p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p>
  <p>Powyższy kod może działać poprawnie, ale może też spowodować nieskończoną <span class="notranslate">loop</span>, jeśli instancja nie będzie w stanie znaleźć pustej pozycji, do której mogłaby się przenieść, co spowoduje zawieszenie gry. Jeśli znajdziesz się w sytuacji, w której takie coś jest możliwe, powinieneś albo użyć innego nieblokującego rodzaju <span class="notranslate">loop</span>, albo użyć dodatkowego sprawdzania zmiennych w wyrażeniu (możesz użyć wielu wyrażeń wraz z<span class="glossextra">operatorami</span> <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>, <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span></a> ) i <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span></a> ) do sprawdzenia):</p>
  <p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if _check &gt;= 100<br />
    {<br />
        // code failed, so deal with it<br />
    }</p>
  <p>Alternatywnie można użyć instrukcji <span class="inline"><a href="break.htm">break</a></span>, aby wyłamać się z <span class="notranslate">loop</span>, na przykład poniższy kod wygeneruje 100 liczb losowych, a następnie będzie kontynuował, mimo że ocena <span class="inline">while</span> <em>zawsze</em> będzie <span class="inline">true</span>:</p>
  <p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p>
  <p>Można także użyć instrukcji <a href="continue.htm"><span class="notranslate">continue</span></a> na stronie <span class="inline">while</span> <span class="notranslate">loop</span>. Użycie tej instrukcji spowoduje zakończenie bieżącej iteracji <span class="notranslate">loop</span> i ponowne uruchomienie pętli na przykład w nowej iteracji:</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p>
  <p>Powyższy kod otwiera plik i odczytuje z niego wiersz w każdej iteracji <span class="notranslate">loop</span> aż do osiągnięcia końca zawartości pliku. Jeśli czytany wiersz jest pusty <span class="notranslate">string</span>, to bieżąca iteracja <span class="notranslate">loop</span> zostanie zakończona przy użyciu instrukcji <span class="inline">continue</span> i rozpocznie się nowa iteracja, w przeciwnym razie <span class="notranslate">string</span> zostanie dodany do <a href="../Arrays.htm">tablicy</a>, a pozycja tablicy będzie inkrementowana.</p>
  <p>Więcej przykładów funkcji <span class="notranslate">loop</span> można znaleźć w rozdziałach <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>, oraz <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Language_Features.htm">Cechy językowe</a></div>
        <div style="float:right">Następny: <a href="do___until.htm"><span class="notranslate">do / until</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>