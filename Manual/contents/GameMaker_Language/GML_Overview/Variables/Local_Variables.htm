<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Zmienne lokalne</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining local variables" />
  <meta name="rh-index-keywords" content="var,Local Variables" />
  <meta name="search-keywords" content="local variables,local,var,local scope" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Zmienne lokalne</h1>
  <p>Zmienna <strong>lokalna</strong> to taka, którą tworzymy <i>tylko</i> na potrzeby konkretnego <strong>zdarzenia</strong> lub <strong>funkcji</strong>, a następnie usuwamy po zakończeniu tego zdarzenia lub funkcji. Jeśli jest tworzona w funkcji użytkownika, zmienna lokalna jest dostępna tylko dla tej funkcji, a następnie usuwana po jej zakończeniu. Dlaczego są one potrzebne? Cóż, zmienne zajmują miejsce w pamięci i może się zdarzyć, że będziemy ich używać tylko do jednej operacji lub funkcji, w którym to przypadku musimy mieć je w pamięci tylko przez ten krótki czas, kiedy są używane. Dzięki temu baza kodu jest czysta i uporządkowana, a miejsce w pamięci optymalizowane dla tych rzeczy, które naprawdę go potrzebują. Aby zadeklarować zmienną lokalną, używamy operatora <span class="inline"><strong><span class="inline">var</span>, jak poniżej:</p>
  <p class="code">var _i, _num, _str;<br />
    _i = 0;<br />
    _num = 24.5;<br />
    _str = &quot;Hello World&quot;;<br />
    <br />
    // or<br />
    <br />
    var _i = 0, _num = 24.5, _str = &quot;Hello World&quot;;<br />
    <br />
    // or<br />
    <br />
    var _i = 0;<br />
    var _num = 24.5;<br />
    var _str = &quot;Hello World&quot;;
  </p>
  <p>Wszystkie utworzone w ten sposób zmienne zostaną &quot;zapomniane&quot; (tzn. usunięte z pamięci) po zakończeniu zdarzenia (lub funkcji), w którym zostały utworzone. Należy uważać, aby nazwa, którą nadajemy wszystkim zmiennym zadeklarowanym na stronie <span class="inline">var</span>, nie pokrywała się z inną zmienną instancji w ramach <span class="notranslate">object</span>, a także upewnić się, że nie mamy zamiaru używać wartości przechowywanej w tej zmiennej poza zdarzeniem lub funkcją, w której ją zadeklarowaliśmy (w powyższych przykładach wszystkie zmienne zadeklarowane na stronie <span class="inline">var</span> zostały zdefiniowane z podkreśleniem &quot;_&quot; przed nazwą zmiennej, ale nie jest to wymagane i zostało zrobione tylko po to, aby w kodzie było bardziej oczywiste, że mamy do czynienia ze zmienną lokalną). Jeśli jednak znajdziesz się w sytuacji, w której zmienna lokalna <em>powinna</em> być taka sama jak zmienna instancji, możesz użyć <a href="../Instance_Keywords.htm">słowa kluczowego</a> <span class="inline">self</span>, aby określić zmienną instancji jako oddzielną, na przykład:</p>
  <p class="code">var hp = 10;<br />
    with (obj_Enemy)<br />
    {<br />
        self.hp -= hp;<br />
    }</p>
  <p>Zmienne lokalne są często używane w programach, szczególnie w <span class="notranslate">loops</span> do zliczania <a class="glossterm" data-glossterm="iteracja" href="#">iteracji</a>lub w przypadku wielokrotnego użycia wartości w jednej operacji, która nie będzie już powtarzana. Oto kilka innych przykładów:</p>
  <p class="code">var _i = 0;<br />
    repeat (10)<br />
    {<br />
        inventory[_i] = 0;<br />
        _i += 1;<br />
    }</p>
  <p>Powyższy kod tworzy zmienną lokalną o nazwie &quot;<span class="inline">_i</span>&quot; i ustawia ją na 0, wszystko w tej samej linii. Zauważ, że w poprzednich wersjach <i>GameMakera</i> musiałeś najpierw zadeklarować zmienne lokalne, a <i>następnie</i> przypisać im wartości, ale w tej wersji możesz je zadeklarować <i>i</i> przypisać im wartość w tym samym czasie. Powyższy kod używa następnie tej zmiennej do zainicjowania <a href="../Arrays.htm">tablicy</a>. Ponieważ zmienna &quot;<span class="inline">_i</span>&quot; nie będzie używana do żadnych innych funkcji w instancji poza tą, może mieć zasięg lokalny. Oto jeszcze jeden przykład:</p>
  <p class="code">var _x, _y;<br />
    _x = x - 32 + irandom(64);<br />
    _y = y - 32 + irandom(64);<br />
    instance_create_layer(_x, _y, &quot;Effects&quot;, obj_blood);</p>
  <p>Użyliśmy zmiennych lokalnych &quot;<span class="inline">_x</span>&quot; i &quot;<span class="inline">_y</span>&quot; do przechowywania losowych współrzędnych, których następnie użyjemy do utworzenia instancji. W tym przykładzie widać, że użycie tych zmiennych nie jest absolutnie konieczne, ale ze względu na czytelność i łatwość użycia, używamy ich. To, co robimy, jest o wiele bardziej przejrzyste i oczywiste, niż gdybyśmy użyli tego kodu:</p>
  <p class="code">instance_create_layer(x - 32 + irandom(64), y - 32 + irandom(64), &quot;Effects&quot;, obj_guts);</p>
  <p>Należy zwrócić uwagę na jeszcze jedną rzecz związaną z <span class="inline">var</span>... Ponieważ są one unikalne dla zdarzenia lub funkcji, która je uruchamia, mogą być używane w innych instancjach za pomocą kodu! Oznacza to, że możemy używać tych zmiennych do ustawiania i zmieniania rzeczy w innych instancjach za pomocą konstrukcji &quot;<span class="inline">with()</span>&quot; (więcej informacji na ten temat znajduje się w rozdziale dotyczącym <a href="../Variables_And_Variable_Scope.htm">zakresu zmiennych</a> ). Sam kod wyglądałby mniej więcej tak:</p>
  <p class="code">var num = instance_number(obj_Enemy);<br />
    with (obj_Enemy)<br />
    {<br />
        if num&gt;10 instance_destroy();<br />
    }</p>
  <p>Powyższy kod działa, ponieważ zmienna zadeklarowana na stronie <span class="inline">var</span> jest lokalna dla <i>zdarzenia</i> (lub funkcji), w którym się znajduje, a nie dla instancji czy świata gry, a zatem może być użyta w dowolnej funkcji w dowolnym miejscu <span class="notranslate">object</span>, o ile znajduje się w tym samym bloku kodu.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Variables_And_Variable_Scope.htm">Zmienne i zakres zmiennych</a></div>
        <div style="float:right">Następny: <a href="Instance_Variables.htm">Zmienne instancji</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
local variables
var
-->
  <!-- TAGS
var
local_variables
-->
</body>
</html>