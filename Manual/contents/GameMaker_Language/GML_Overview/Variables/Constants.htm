<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Stałe</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the different GML constants" />
  <meta name="rh-index-keywords" content="Constants,macro,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi" />
  <meta name="search-keywords" content="constants,macros,enums,macro,enum" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Stałe</h1>
  <p>Stała to rodzaj zmiennej, która jest ustawiana raz na początku gry i nigdy się nie zmienia. W rzeczywistości wartości stałych <em>nie można zmieniać po ich zadeklarowaniu</em>. Dzięki temu idealnie nadają się do przechowywania wartości, które są używane w grze do identyfikacji specjalnych danych.</p>
  <p>W witrynie <span class="notranslate">GameMaker Language</span> istnieją dwa rodzaje stałych definiowanych przez użytkownika: <strong>makra</strong> i <strong>enumy</strong>, które zostały omówione poniżej. Należy również pamiętać, że każda wartość, która jest zawsze taka sama, jest klasyfikowana jako stała, niezależnie od <a href="../Data_Types.htm">typu danych</a>, np. <span class="notranslate">string</span> lub liczba 3.</p>
  <p class="note"><span class="note">UWAGA</span> Strona <span class="notranslate">GameMaker Language</span> ma także szereg wbudowanych stałych wartości, które służą do identyfikacji określonych rzeczy. Są one opisane na odpowiednich stronach dla funkcji <span class="notranslate">runtime</span>, które ich wymagają, w sekcji <a href="../../GML_Reference/GML_Reference.htm">GML Reference</a>.</p>
  <h2>Makra</h2>
  <p>Makra, choć nie są zmiennymi, są do nich podobne pod względem sposobu użycia, tzn. są nazwanymi wartościami, których można używać w kodzie w celu zastąpienia wartości <a class="glossterm" data-glossterm="twardo zakodowane" href="#">zakodowanych</a> na sztywno. Zasadniczo makro jest zmienną nazwaną, która przechowuje wyrażenie. Makra można definiować za pomocą <a href="../Script_Functions.htm">Edytora skryptów</a>, a następnie używać ich w kodzie i akcjach tak, jakby były zwykłymi zmiennymi, z tą różnicą, że <i>nie można ich zmieniać w grze</i>.</p>
  <p>Struktura składni makra jest następująca:</p>
  <p class="code">#macro <i>&lt;variable&gt;</i> <i>&lt;expression&gt;</i></p>
  <p>Na przykład, zdefiniuj następujące makro &quot;<span class="inline">total_weapons</span>&quot;:</p>
  <p class="code">#macro total_weapons 10</p>
  <p class="note_heading">Makroskładnia...</p>
  <p class="note">Aby zdefiniować makra, należy poprawnie używać przedstawionej powyżej składni. Nie można używać znaku równości (jak w zmiennych) ani umieszczać średnika na końcu (jak w zwykłej instrukcji). Spowoduje to, że definicja makra będzie niepoprawna.<br>
    <br>
    Na przykład, to nie jest poprawny sposób definiowania makra:<br>
    <br>
   <span class="inline2">#macro total_weapons = 10;</span><br>
    <br>
    Usunięcie znaku równości i dwukropka spowoduje, że będzie to poprawna definicja makra.
  </p>
  <p>Następnie można to wykorzystać w kodzie w następujący sposób:</p>
  <p class="code">pos++;<br />
    <br />
    if (pos &gt;= total_weapons)<br />
    {<br />
        pos = 0;<br />
    }
  </p>
  <p>Zauważ, że nie będziesz mógł zmienić wartości stałej, więc taki kod spowoduje awarię gry:</p>
  <p class="code">total_weapons = 11;</p>
  <p>Makro można zdefiniować w dowolnym miejscu w kodzie lub w skrypcie, a zostanie ono <i>prekompilowane</i> i dołączone do gry, tak jakby było tam od początku. Zalecamy jednak utworzenie specjalnej strony <span class="notranslate">script</span> <span class="notranslate">asset</span> i zdefiniowanie tam wszystkich makr. Będzie to łatwiejsze do zorganizowania i późniejszego debugowania!</p>
  <p>Jeśli wartość makra ma się zmieniać w czasie wykonywania gry, to prawdopodobnie należy uczynić z niego <a href="Global_Variables.htm">zmienną globalną</a>, ponieważ można je zmieniać z poziomu kodu w czasie gry, chyba że makro zostanie ustawione jako<span> <a href="../Runtime_Functions.htm">runtime </a></span> <a href="../Runtime_Functions.htm"><span class="notranslate">function</span></a>. Ustawienie makra jako funkcji oznacza, że funkcja ta będzie wywoływana za każdym razem, gdy użyjesz makra. Na przykład:</p>
  <p class="code">#macro col make_colour_hsv(irandom(255), 255, 255)</p>
  <p>Makro to można wywołać w następujący sposób:</p>
  <p class="code">image_blend = col;</p>
  <p>Użycie tego kodu spowoduje, że za każdym razem, gdy zostanie użyte makro, obraz będzie mieszał się w innym kolorze. Warto zauważyć, że makra można również rozdzielać na wiele wierszy, używając znaku <span class="inline"><span class="inline">\</span>, aby pokazać miejsce przerwania linii. Przykładem może być coś takiego:</p>
  <p class="code">#macro hello show_debug_message(&quot;Hello&quot; + \<br />
    string(player_name) + \<br />
    &quot;, how are you today?&quot;);</p>
  <p>Jest to rozwiązanie czysto kosmetyczne, ponieważ podział makra w ten sposób nie będzie miał żadnego wpływu na wynik działania makra końcowego, a jego celem jest po prostu zapewnienie obsługi tekstu wielowierszowego w makrach zawierających dłuższe linie kodu.</p>
  <p>Bardzo ważną cechą makr jest to, że można je zdefiniować do użycia z określonymi <a href="../../../Settings/Configurations.htm">konfiguracjami</a> (configami), co oznacza, że można mieć tę samą nazwę makra, ale nadawać mu różne wartości w zależności od aktualnie wybranego configu. Na przykład, jeśli masz konfigurację dla <span class="notranslate">Android</span> Ads i inną dla <span class="notranslate">iOS</span> Ads, możesz zdefiniować jedno makro, które będzie przechowywało wymaganą wartość App ID:</p>
  <p class="code">#macro ad_id &quot;&quot;;<br />
    #macro Android:ad_id &quot;com.yoyogames.googlegame&quot;<br />
    #macro iOS:ad_id &quot;com.yoyogames.appstoregame&quot;</p>
  <p>Jak widać, najpierw podajesz nazwę konfiguracji, potem dwukropek <span class="inline">:</span>, a następnie nazwę i wartość makra. Zwróć uwagę, że pomiędzy dwukropkiem <span class="inline">:</span> a nazwą konfiguracji lub nazwą makra nie może być białych spacji, w przeciwnym razie zostanie wyświetlony błąd.</p>
  <h2 id="enumhead">Enumy</h2>
  <p>Enum to &quot;wyliczarka&quot;, która umożliwia utworzenie własnego ograniczonego typu danych z listą stałych wartości o następującej strukturze:</p>
  <p class="code">enum <i>&lt;variable&gt;</i><br />
    {<br />
    <i>    &lt;constant&gt;</i> [= <i>&lt;value&gt;</i>],<br />
    <i>    &lt;constant&gt;</i> [= <i>&lt;value&gt;</i>],<br />
        // etc...<br />
    }
  </p>
  <p>W poniższym przykładzie utworzymy enum dla kolorów tęczy i przypiszemy mu różne stałe oraz wartości domyślne:</p>
  <p class="code">enum rainbowcolours<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }</p>
  <p>Wpisy w enum mogą być tylko <b>liczbami całkowitymi</b> lub <b><a class="glossterm" data-glossterm="wyrażenie" href="#">wyrażeniami</a></b> z poprzednich enum, których wynikiem jest liczba całkowita. Domyślnie są numerowane od 0 w górę, więc w naszym przykładzie będą to <span class="inline">red = 0</span>, <span class="inline">orange = 1</span>, <span class="inline">yellow = 2</span> itd.</p>
  <p>Zmiennym enum można także przypisać wartości w momencie ich tworzenia:</p>
  <p class="code">enum enum_test<br />
    {<br />
        val = 10;<br />
    }<br />
    <br />
    enum rainbowcolours<br />
    {<br />
        red = 5,<br />
        orange = 5 * 2,<br />
        yellow = 15,<br />
        green = 20,<br />
        blue = 25,<br />
        indigo = 30,<br />
        violet = 35 * enum_test.val<br />
    }
  </p>
  <p>Zauważ, że w powyższym przykładzie używamy innego enum do utworzenia wyrażenia dla &quot;fioletowego&quot;. Nie zadziała to w przypadku zmiennych lub funkcji, ponieważ wartość wyliczeniowa musi być obliczana jako stała <i>podczas</i> <a class="glossterm" data-glossterm="Kompilacja" href="#">kompilacji</a> projektu. Należy również pamiętać, że wszystkie wartości wyliczeniowe są obliczane na liczby <b>całkowite</b>, a podczas tworzenia własnych należy pamiętać, że <i>tylko wartości całkowite są dozwolone</i> dla wyliczeń. Wartość ta może być dowolną liczbą całkowitą, którą może reprezentować liczba zmiennoprzecinkowa podwójnej precyzji, w tym wartości ujemne.</p>
  <p>Aby później uzyskać dostęp do wartości w obrębie danego typu enum, można użyć metody point <span class="inline">&quot;.&quot;</span>, jak poniżej:</p>
  <p class="code">variable = &lt;enum_name&gt;.&lt;<em>enum_variable</em>&gt;;</p>
  <p>Jako przykładu użyjmy enum &quot;<span class="inline">rainbowcolours</span>&quot;, które utworzyliśmy w powyższym kodzie:</p>
  <p class="code">colour_value = rainbowcolours.green * rainbowcolours.red;</p>
  <p>Zmienna <span class="inline">colour_value</span> będzie teraz miała wartość 100 (20 * 5).</p>
  <p>Należy pamiętać, że <em>nie można </em>modyfikować wartości stałej enum po jej utworzeniu, podobnie jak nie można modyfikować makr po ich utworzeniu.</p>
  <p class="note"><strong>UWAGA</strong>: Wartości Enum są przechowywane jako <span class="notranslate">int64s</span>, więc uruchomienie na nich adresu <span class="inline"><a href="../../GML_Reference/Variable_Functions/is_real.htm">is_real()</a></span> spowoduje zwrócenie adresu <span class="inline">false</span>.</p>
  <p> </p>
  <h2>Wbudowane stałe</h2>
  <p>W poniższej tabeli przedstawiono listę wbudowanych stałych, które mogą być zwracane przez niektóre funkcje i operacje w projektach:</p>
  <table>
    <tbody>
      <tr>
        <th>Stała</th>
        <th>Opis</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pointer_null</span></td>
        <td>Ta stała wskazuje, że wskaźnik nie wskazuje na nic znaczącego (tak samo jak<span> </span><span class="inline">NULL</span> <span> </span> w C++ lub <span class="inline">null</span> w C#).<br>
          Ta wartość jest <a class="glossterm" data-glossterm="falsy" href="../Data_Types.htm#">falsy</a>.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
        <td>Ta stała oznacza po prostu, że wartość nie jest prawidłowym wskaźnikiem</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">undefined</span></td>
        <td>Ta stała jest zwracana, gdy funkcja musi <em>coś</em> zwrócić, ale nie ma odpowiedniej lub &quot;poprawnej&quot; wartości do zwrócenia.<br>
          Ta wartość jest <a class="glossterm" data-glossterm="falsy" href="../Data_Types.htm#">falsy</a>.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">NaN</span></td>
        <td><span>Jest to stała, którą można zwrócić, gdy kompilator nie może oszacować wyniku operacji jako liczby - na przykład 0 / 0 nie może być zdefiniowane jako liczba rzeczywista, a zatem jest reprezentowane przez </span><span class="inline">NaN</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">infinity</span></td>
        <td><span class="inline"><span data-highlight-container="true"><span data-highlight="true">
                <font face="open_sansregular"><span style="font-size: 18px; font-weight: 400;">This constant </span>
              <span>odnosi się do liczby uważanej za nieskończoną, np. wynik dzielenia dowolnej wartości zmiennoprzecinkowej przez zero, np. 1.0/0.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">true</span></td>
        <td>Ta stała reprezentuje wartość 1, którą <span data-keyref="GameMaker Name">GameMaker</span> oceni jako wartość logiczną &quot;true&quot; (zauważ, że każda wartość równa lub większa od 1 zostanie oceniona jako <span class="inline">true</span>).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">false</span></td>
        <td>Ta stała reprezentuje wartość 0, którą <span data-keyref="GameMaker Name">GameMaker</span> oceni jako wartość logiczną &quot;false&quot; (zauważ, że każda wartość mniejsza lub równa 0 zostanie oceniona jako <span class="inline">false</span>).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pi</span></td>
        <td>Ta stała reprezentuje wartość liczby pi: 3,141592653589793280 itd., chociaż dokładna wartość zależy od różnych czynników, takich jak system operacyjny lub platforma, na którą jest przeznaczony.</td>
      </tr>
    </tbody>
  </table>
  <p>Informacje na temat porównywania równości dla kilku stałych wymienionych powyżej można znaleźć w <a data-xref="{text}" href="../../../Additional_Information/Type_Tables.htm#h">tabeli</a> równości.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Variables_And_Variable_Scope.htm">Zmienne i zakres zmiennych</a></div>
        <div style="float:right">Następny: <a href="Local_Variables.htm">Zmienne lokalne</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
constants
macros
enums
macro
enum
-->
  <!-- TAGS
constants
macro
enum
-->
</body>
</html>