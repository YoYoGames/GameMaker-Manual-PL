<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Struktury i konstruktory</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Structs" />
  <meta name="rh-index-keywords" content="Structs" />
  <meta name="search-keywords" content="structs,new,delete,struct" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Struktury i konstruktory</h1>
  <p> <strong>Struktura </strong>jest zmienną, która przechowuje kolekcję innych zmiennych. Zmienne, które przechowuje <span class="notranslate">struct</span> mogą być dowolnego <a href="Data_Types.htm">typu danych</a> wcześniej wymienionych i te zmienne mogą być odczytywane i zapisywane po początkowej deklaracji <span class="notranslate">struct</span>, a także można dodać więcej zmiennych do <span class="notranslate">struct</span> po jego zadeklarowaniu.</p>
  <p>Zmienne używane w <span class="notranslate">struct</span> powinny być zgodne ze zwykłym schematem nazewnictwa zmiennych, czyli: nie mogą zaczynać się od liczby i powinny składać się tylko ze znaków alfanumerycznych i znaku podkreślenia &quot;_&quot;, a także należy pamiętać, że zawartość <span class="notranslate">struct</span> jest <em>niezależna od instancji lub funkcji, która ją utworzyła</em>, i jako taka możesz - jeśli chcesz - używać wbudowanych nazw zmiennych, takich jak <span class="inline">image_index</span> lub <span class="inline">x</span> i <span class="inline">y</span>.</p>
  <p>Po początkowym utworzeniu, <span class="notranslate">structs</span> nie mają żadnego narzutu przetwarzania, gdy istnieją, chociaż <i>będą</i> zajmować miejsce w pamięci. Składnia <span class="notranslate">struct</span> jest następująca:</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br />
    {<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
        etc...<br />
    };
  </p>
  <p>Zatem przykładem tego w praktyce będzie:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    };</p>
  <p>Powyższy kod tworzy zakres instancji <span class="notranslate">struct</span> w zmiennej <span class="inline">mystruct</span> i zaludnia ją pewnymi wartościami (<span class="notranslate">structs</span> może być tworzony w zakresach lokalnych, instancji i globalnych, tak jak każda inna zmienna - więcej informacji znajdziesz w rozdziale <a href="Variables_And_Variable_Scope.htm">Zmienne i zakres zmien</a> nych). Zauważ, że nie musisz zaludniać zawartości <span class="notranslate">struct</span>, gdy jest ona tworzona początkowo i możesz stworzyć pustą <span class="notranslate">struct</span>, po prostu robiąc to:</p>
  <p class="code">mystruct = {};</p>
  <p>Zmienne mogą być następnie dodane do tego <span class="notranslate">struct</span> w późniejszym punkcie kodu gry. Aby dodać je później, używasz operatora kropki (w taki sam sposób jak w <a href="Addressing_Variables_In_Other_Instances.htm">Addressing Variables In Other Instances</a>): </p>
  <p class="code">mystruct.newItem = &quot;Some Text&quot;;</p>
  <p>Ma to taki sam efekt jak inicjalizacja <span class="notranslate">struct</span> w ten sposób: </p>
  <p class="code">mystruct =<br />
    {<br />
        newItem : &quot;Some Text&quot;<br />
    };</p>
  <p>Oto przykład <span class="notranslate">struct</span> z różnymi zmiennymi i typami danych:</p>
  <p class="code">var _xx = 100;<br />
    mystruct =<br />
    {<br />
        a : 10,<br />
        b : &quot;Hello World&quot;,<br />
        c : int64(5),<br />
        d : _xx + 50,<br />
        e : function(a, b)<br />
            {<br />
                return a + b;<br />
            },<br />
        f : [ 10, 20, 30, 40, 50 ],<br />
        g : image_index<br />
    };</p>
  <p>W powyższym kodzie zauważysz, że możesz również zdefiniować metody i używać funkcji <span class="notranslate">runtime</span> w <span class="notranslate">structs</span>, a także możesz używać zmiennych lokalnych i zmiennych instancji w ramach deklaracji <span class="notranslate">struct</span>.</p>
  <h3 id="inst_in_struct">Zmienne instancji w deklaracji <span class="notranslate">Struct</span>?</h3>
  <p>Na przykład w powyższym przykładzie zauważysz, że zmienna <span class="notranslate">struct</span> &quot;g&quot; jest ustawiana na <span class="inline">image_index</span>, która jest zmienną instancji. Można by pomyśleć, że trzeba by użyć <a href="Instance_Keywords.htm">słowa kluczowego</a> <span class="inline">other</span> w tym przypadku, aby uzyskać zmienną instancji, ale nie jest to konieczne. Zasadniczo, gdy definiujesz struct,<strong> wszystkie zmienne członkowskie po lewej stronie dwukropka &quot;:&quot; są zmiennymi <em>struct</em></strong>, a wartości i zmienne po prawej stronie używają zakresu tego, co definiuje struct (w tym przypadku, instancji). </p>
  <p>Przyjrzyjmy się prostemu przykładowi, aby to zobrazować. Powiedzmy, że chcesz zdefiniować stronę <span class="notranslate">struct</span> ze zmiennymi &quot;x&quot; i &quot;y&quot; i chcesz je ustawić na &quot;x&quot; i &quot;y&quot; instancji definiującej stronę <span class="notranslate">struct</span>. W praktyce kod wyglądałby tak:</p>
  <p class="code">mystruct =<br />
    {<br />
        x : x,<br />
        y : y<br />
    };</p>
  <p>W powyższym kodzie zmienne członkowskie <span class="notranslate">struct</span> <span class="inline">x</span> i <span class="inline">y</span> są ustawiane na wartości przechowywane w zmiennych instancji <span class="inline">x</span> i <span class="inline">y</span>, ponieważ prawa strona dwukropka &quot;:&quot; odnosi się do instancji, która definiuje <span class="notranslate">struct</span>. Warto zauważyć, że oznacza to, że <em>nie można</em> używać zmiennych członkowskich <span class="notranslate">struct</span> do definiowania kolejnych zmiennych w ramach deklaracji <span class="notranslate">struct</span>. Na przykład poniższe dałoby ci błąd:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 10,<br />
        b : 10,<br />
        c : a + b<br />
    }</p>
  <p>Błąd występuje, ponieważ zmienne <span class="inline">a</span> i <span class="inline">b</span> są w rzeczywistości oceniane w zakresie tego, co definiuje <span class="notranslate">struct</span> (są po prawej stronie dwukropka &quot;:&quot;), a <em>nie</em> są definiowane w samym <span class="notranslate">struct</span>.<strong></strong></p>
  <h3 style="padding-left: 20px"><em><strong style="margin-left: 0px">WAŻNE!</strong></em> <strong>Nie można </strong>używać żadnych wbudowanych <em><strong>global </strong></em>zmiennych zakresu jako nazw członków <span class="notranslate">struct</span>, np.: <span class="inline">game_id</span> lub <span class="inline">fps</span>. Pełną listę tych zmiennych globalnych można znaleźć na następnej stronie:</h3>
  <ul class="colour">
    <li><a href="Struct_Forbidden_Variables.htm">Strukturalne zmienne zakazane</a></li>
  </ul>
  <p>Po zdefiniowaniu strony <span class="notranslate">struct</span> można uzyskać dostęp do danych w jej obrębie, używając notacji &quot;punktowej&quot;, jak np:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    }<br />
    <br />
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>Możesz również wykonywać operacje na zmiennych w ramach <span class="notranslate">struct</span> lub używać ich w funkcjach, tak jak w przypadku każdej innej zmiennej. Na przykład:</p>
  <p class="code">mystruct.a += 1;<br />
    mystruct.b = mystruct.a + 20;<br />
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>Wreszcie, <span class="notranslate">structs</span> może mieć inne <span class="notranslate">structs</span> zagnieżdżone wewnątrz nich, jak to:</p>
  <p class="code">mystruct =<br />
    {<br />
        a :<br />
        {<br />
            aa : &quot;This is an example&quot;<br />
        },<br />
        b :<br />
        {<br />
            bb : &quot;And another one&quot;<br />
        },<br />
    };</p>
  <p>Aby uzyskać dostęp do takich zagnieżdżonych <span class="notranslate">structs</span>, nadal używałbyś notacji punktowej, jak to:</p>
  <p class="code">var _str = mystuct.a.aa + &quot; &quot; + mystruct.b.bb;<br />
    show_debug_message(_str);</p>
  <p>Innym sposobem dostępu do danych w <span class="notranslate">struct</span> jest użycie funkcji <a href="Language_Features/with.htm"><span class="inline">with()</span></a> funkcji. Tak więc, na przykład, możesz zrobić to:</p>
  <p class="code">with(mystruct)<br />
    {<br />
        a += other.x;<br />
    }</p>
  <p>Użycie <span class="inline">with()</span> zmienia zakres kodu na podany <span class="notranslate">struct</span> gdzie można manipulować zmiennymi członkowskimi w zakresie struct. Zauważ, że w przykładzie używamy również <a href="Instance_Keywords.htm">słowa kluczowego<span class="inline">other</span> </a>. Działa to tak samo jak w instancji przy użyciu <span class="inline">with()</span> i będzie odwoływać się do instancji (lub <span class="notranslate">struct</span>), która faktycznie uruchamia blok kodu.</p>
  <p>Kiedy <span class="notranslate">struct</span> nie jest już potrzebny, można go usunąć z pamięci za pomocą operatora <a href="Language_Features/delete.htm"><span class="inline">delete</span></a> co spowoduje, że <span class="notranslate">flags</span> <span class="notranslate">struct</span> będzie mógł zostać odśmiecony. Nie jest to ściśle wymagane, ponieważ <a class="glossterm" data-glossterm="śmieciarz" href="#">odśmiecacz</a> może to zrobić automatycznie, jeśli <span class="notranslate">struct</span> nie ma już odniesienia w twoim kodzie, ale jest to dobra praktyka i zalecamy to (na przykład wywołaj <span class="inline">delete</span> w <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">zdarzeniu Clean Up</a> instancji, aby wyraźnie powiedzieć odśmiecaczowi, że zakres instancji <span class="notranslate">struct</span> ma zostać usunięty). Oto przykład:</p>
  <p class="code">// Create event<br />
    mystruct =<br />
    {<br />
        pos_x : x,<br />
        pos_y : y,<br />
        count : 1000<br />
    };<br />
    <br />
    // Clean Up event<br />
    delete mystruct;
  </p>
  <h2 id="constr">Funkcje konstruktora</h2>
  <p>Można również używać <a href="Script_Functions.htm">funkcji</a> lub <a href="Method_Variables.htm">metod</a> <a href="Script_Functions.htm">skryptowych</a> do tworzenia funkcji, które mogą być używane do generowania nowych <span class="notranslate">structs</span>, co wymaga użycia słowa kluczowego <span class="inline">constructor</span> dla funkcji oraz operatora <a href="Language_Features/new.htm"><span class="inline">new</span></a> operatora podczas tworzenia <span class="notranslate">struct</span> z takiej funkcji. Zobacz następującą funkcję:</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Lub, używając składni zmiennej metody:</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Tutaj tworzymy funkcję o nazwie <span class="inline">Vector2</span> i mówimy <span data-keyref="GameMaker Name">GameMakerowi</span>, że jest to funkcja używana do tworzenia struktów poprzez dodanie słowa kluczowego <span class="inline">constructor</span> po jej definicji. Następnie możesz wywołać tę funkcję konstruktora w ten sposób:</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>Zmienna <span class="inline">v2</span> będzie teraz zawierać <span class="notranslate">struct</span> ze zmiennymi <span class="inline">x</span> i <span class="inline">y</span> oraz <a href="Functions/Static_Variables.htm"><span class="notranslate">static</span></a> zmienną <a href="Method_Variables.htm">metodyczną</a> <span class="inline">Add</span>.</p>
  <p>Możesz również użyć opcjonalnych argumentów w swoich funkcjach konstruktora:</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    }</p>
  <p>Ten konstruktor będzie teraz używał <span class="inline">0</span> dla argumentów <span class="inline">_x</span> i <span class="inline">_y</span>, jeśli nie zostaną one określone podczas wywoływania funkcji. Oznacza to, że możesz stworzyć nowy <span class="inline">Vector2</span> <span class="notranslate">struct</span> bez konieczności określania jakichkolwiek argumentów:</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>Dziedziczenie</h2>
  <p>Funkcje utworzone w ten sposób będą również wspierać pojedyncze <b>dziedziczenie</b>, tj. Możesz utworzyć funkcję konstruktora, która <span class="notranslate">inherits</span> dane z innej funkcji konstruktora.</p>
  <p class="note"><strong>UWAGA</strong>: Podczas pracy z dziedziczeniem nie można używać zmiennych metod do definiowania funkcji konstruktora, tylko <span class="notranslate">script</span> funkcji.</p>
  <p>Na przykład, stworzyliśmy funkcję konstruktora <span class="inline">Vector2</span> powyżej, więc możemy użyć jej jako &quot;rodzica&quot; dla innej funkcji konstruktora, którą nazwiemy <span class="inline">Vector3</span>:</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br />
    {<br />
        z = _z;<br />
    <br />
        static Add = function( _vec3 )<br />
        {<br />
            x += _vec3.x;<br />
            y += _vec3.y;<br />
            z += _vec3.z;<br />
        }<br />
    }
  </p>
  <p>Jak widać, podczas definiowania funkcji używamy dwukropka &quot;<span class="inline">:</span>&quot;, aby oddzielić nowy konstruktor od konstruktora rodzica, po którym ma on dziedziczyć. Konstruktor dziecka (<span class="inline">Vector3</span>) przekazuje do konstruktora rodzica (<span class="inline">Vector2</span>) argumenty <span class="inline">_x</span> i <span class="inline">_y</span>, które służą do uruchomienia najpierw konstruktora rodzica, po czym wykonywany jest konstruktor dziecka. W ten sposób konstruktor dziecka otrzymuje zmienne rodzica (<span class="inline">x</span> i <span class="inline">y</span>) i może również zdefiniować własne (<span class="inline">z</span>).</p>
  <p>Możesz również przekazać stałe wartości do konstruktora nadrzędnego, tak aby określony konstruktor dziecka zawsze dostarczał te same wartości do swojego konstruktora nadrzędnego:</p>
  <p class="code">function Item(damage) constructor<br />
    {<br />
        my_damage = damage;<br />
    }<br />
    <br />
    function BasicSword() : Item(10) constructor<br />
    {}<br />
    <br />
    var _basic_sword = new BasicSword();<br />
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>Oznacza to, że obrażenia miecza podstawowego zawsze będą wynosić <span class="inline">10</span>, ponieważ przekazuje on tę wartość do swojego konstruktora macierzystego niezależnie od tego, jakie mogą być jego własne argumenty.</p>
  <p>Zauważ, że przypisanie wartości domyślnej do argumentu w konstruktorze dziecka spowoduje zastąpienie domyślnej wartości rodzica dla tego argumentu. Zobacz następujący przykład:</p>
  <p class="code">function Parent(value = 10) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    function Child(value = 20) : Parent(value) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Oba te konstruktory wydrukują <span class="inline">20</span> do dziennika wyjściowego, ponieważ była to domyślna wartość dla argumentu ustawionego przez konstruktor dziecka, a ta sama wartość została przekazana do konstruktora rodzica.</p>
  <p>Więcej szczegółów na temat operatorów <span class="inline">new</span> i <span class="inline">delete</span> można znaleźć na kolejnych stronach:</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span> </li>
  </ul>
  <h2>String Output</h2>
  <p>Ostatnią rzeczą, o której należy wspomnieć w odniesieniu do <span class="notranslate">structs</span> jest to, że możesz zmienić to, co jest wyprowadzane na konsolę z nich dla <span class="notranslate">debugging</span>. Domyślnie, wywołanie funkcji <a href="../GML_Reference/Debugging/show_debug_overlay.htm"><span class="inline">show_debug_message()</span></a> na <span class="notranslate">struct</span> spowoduje wyświetlenie zawartości <span class="notranslate">struct</span> (jak pokazano powyżej). Można jednak dostosować ten komunikat, dodając do <span class="notranslate">struct</span> specjalnie nazwaną metodę o nazwie <span class="inline">toString</span>:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;,<br />
    <br />
        toString : function()<br />
        {<br />
            return &quot;This stuct says &quot; + b + &quot;, &quot; + string(a) + &quot; times!&quot;;<br />
        }<br />
    }<br />
    show_debug_message(mystruct);
  </p>
  <p>Teraz, gdy funkcja <span class="inline">show_debug_message()</span> zostanie wywołana, metoda <span class="inline">toString</span> zostanie użyta do wygenerowania wyjścia i - z powyższym przykładem - otrzymasz:</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>Zauważ, że możesz również wywołać funkcję <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a> na referencji <span class="notranslate">struct</span> i użyć jej do wyświetlenia zawartości - lub metody <span class="inline">toString</span> - na ekranie, lub zapisać ją do pliku, lub cokolwiek, np:</p>
  <p class="code">var _str = string(mystruct);<br />
    draw_text(32, 32, _str);</p>
  <p>Wreszcie, istnieje szereg funkcji runtime, których możesz użyć na <span class="notranslate">structs</span>, aby uzyskać zmienne, które zawierają, a także kilka innych rzeczy. Możesz je znaleźć w następującej sekcji:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funkcje zmienne</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="Commenting_Code.htm">Komentowanie kodu</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->
</body>
</html>