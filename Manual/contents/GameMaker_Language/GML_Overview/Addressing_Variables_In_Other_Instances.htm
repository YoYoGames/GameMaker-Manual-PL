<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Adresowanie zmiennych w innych instancjach</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Adresowanie zmiennych w innych instancjach</h1>
  <p>W rozdziałach poświęconych <a href="Variables_And_Variable_Scope.htm">zmiennym</a> dowiedziałeś się, jak tworzyć i używać zmiennych w obrębie pojedynczej instancji lub w zakresie globalnym, ale co się stanie, jeśli chcesz, aby jedna instancja miała dostęp do zmiennej w innej, innej instancji? Istnieje wiele przypadków, w których możesz chcieć to zrobić, na przykład podczas zderzenia z pociskiem <span class="notranslate">object</span>, możesz chcieć dowiedzieć się, jak duże obrażenia zadaje pocisk, uzyskując dostęp do zmiennej w pocisku, możesz chcieć zatrzymać ruch wszystkich kulek w układance, możesz chcieć przesunąć głównego bohatera do określonej pozycji lub w wielu innych sytuacjach, z którymi zazwyczaj spotykasz się w grach. Na szczęście gra <span class="notranslate">GameMaker Language</span> jest wyposażona w mechanizmy pozwalające to osiągnąć.</p>
  <p>Jedną z najczęstszych metod dostępu do zmiennej w <em>innej </em>instancji lub jej zmiany jest użycie jej nazwy <span class="notranslate">object</span> jako identyfikatora, a następnie użycie kropki &quot;<span class="inline">.</span>&quot;, aby powiedzieć programowi <span data-keyref="GameMaker Name">GameMaker</span>, że zmienna, do której się odwołujemy, powinna być przypisana lub zmieniona w ramach instancji tego konkretnego obiektu. Jest to tak zwana &quot;notacja kropkowa&quot;, a jej składnia wygląda następująco:</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>W praktyce wyglądałoby to następująco:</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>Za pomocą powyższego kodu ustawiasz prędkość instancji &quot;<span class="inline">obj_ball</span>&quot;. Jeśli jednak masz więcej niż jedną instancję danej <span class="notranslate">object</span> w <span class="notranslate">room</span>, <em>to będzie to dotyczyć WSZYSTKICH z nich jednakowo</em> - chyba że używasz <b>HTML5</b>, w którym to przypadku będzie to dotyczyć tylko <em>jednej</em> z <em>nich</em>, ale nie masz możliwości sprawdzenia, której z nich to dotyczy - więc jeśli potrzebujesz dostępu do wszystkich instancji <span class="notranslate">object</span>, powinieneś używać <a href="Language_Features/with.htm"><span class="inline">with()</span></a>ponieważ jest on w 100% kompatybilny z innymi platformami. Ogólnie rzecz biorąc, tego formatu należy używać tylko wtedy, gdy mamy pojedynczą instancję <span class="notranslate">object</span> w <span class="notranslate">room</span>, lub (jak zobaczysz w następnej części) gdy mamy określony <i> <b>identyfikator</b></i> instancji.</p>
  <p>Można także uzyskać dostęp do pojedynczej instancji strony <span class="notranslate">object</span>, jeśli w obrębie strony <span class="notranslate">room</span> znajduje się wiele instancji, używając unikalnej <b>nazwy</b> instancji, aby wskazać <span data-keyref="GameMaker Name">programowi GameMaker</span>, do której dokładnie instancji chcemy się odnieść. <b>Stała nazwy instancji</b> to unikalna <b>stała</b> identyfikacyjna, która jest nadawana każdej instancji dodanej do <span class="notranslate">room</span> w Twojej grze. Można ją znaleźć, klikając dwukrotnie na instancję w <a href="../../The_Asset_Editors/Rooms.htm">edytorze pomieszczeń</a>:</p>
  <p><img>Należy pamiętać, że nazwę tę można edytować i nadać jej bardziej opisową nazwę - choć <em>musi</em> ona być unikalna dla całej gry - i można jej użyć jako lewej strony punktu:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <p>Zdecydowanie najbardziej powszechną i praktyczną metodą jest jednak użycie <i>zmiennej</i> po lewej stronie punktu, o ile zmienna ta<i> ma zapisany poprawny <b>identyfikator instancji</b></i>. Ilustrują to poniższe przykłady.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if instance_exists(_inst)<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>W powyższym kodzie dla przykładu 1 znajduje się <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> w bloku kodu. Dzieje się tak dlatego, że użycie metody point do uzyskania dostępu lub zmiany wartości innej instancji spowoduje błąd i zawieszenie gry, jeśli instancja nie istnieje, a istnieje możliwość, że tak właśnie jest w tym przykładzie. W przykładach 2 i 3 nie potrzebujemy jednak tego sprawdzania, ponieważ <i>wiemy</i>, że instancja istnieje, ponieważ w przykładzie 2 ją stworzyliśmy, a w przykładzie 3 jest to inna instancja w zdarzeniu kolizji. Jeśli jednak istnieje <i>jakakolwiek</i> możliwość, że instancja może zostać zniszczona, dezaktywowana lub w inny sposób usunięta z <span class="notranslate">room</span> podczas używania tej metody, <i>zawsze</i> powinieneś sprawdzić to wcześniej, używając funkcji <span class="inline">instance_exists()</span> lub funkcji <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> function.</p>
  <p>Zauważ, że nie możesz użyć specjalnego <a href="Instance_Keywords.htm">słowa kluczowego</a> &quot;<span class="inline">all</span>&quot; w tej metodzie, aby skierować wszystkie instancje (np.: <span class="inline">all.val = 10</span> spowoduje błąd), ale <i>możesz</i> użyć <a href="Instance_Keywords.htm">słów kluczowych</a> &quot;<span class="inline">other</span>&quot; i &quot;<span class="inline">self</span>&quot; bez problemu. Na przykład, używając <span class="inline">other</span> w <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">zdarzeniu kolizji</a>:</p>
  <p class="code">// Example 3 other.hp -= 10;<br />
    if other.hp &lt;= 0<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p>
  <p>Należy również pamiętać, że nie można używać żadnej funkcji jako lewej strony przypisania. Na przykład poniższy kod spowoduje błąd:</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>Wartość zwracana przez wyrażenie w tym przykładzie kodu jest liczbą całkowitą (unikalną wartością identyfikatora najbliższej instancji) i dlatego musi być ujęta w nawiasy <span class="inline">()</span>, aby mogła być użyta w ten sposób i prawidłowo zaadresowana do wymaganej instancji. Powyższy kod zostałby poprawnie zapisany jako:</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var inst = instance_nearest(x, y, obj);<br />
    inst.speed = 0;
  </p>
  <p>Wszystkie te sposoby odczytywania, zmieniania i ustawiania zmiennych w innych instancjach są całkowicie poprawne, a działają dlatego, że point jest właściwie <i>operatorem</i>. Przyjmuje on wartość jako lewy <a class="glossterm" data-glossterm="operand" href="#">operand</a> i zmienną jako prawy operand, a następnie zwraca adres tej konkretnej zmiennej we wskazanej <span class="notranslate">object</span> lub instancji. Wszystkie nazwy <span class="notranslate">object</span>, stałe, identyfikatory itp. reprezentują po prostu wartości, z którymi można się obchodzić jak z każdą inną wartością.</p>
  <p>Innym sposobem odwoływania się do zmiennych w innej instancji jest użycie funkcji <span class="notranslate">GameMaker Language</span> <span class="inline">with()</span> , która została szczegółowo omówiona <a href="Language_Features/with.htm">tutaj</a>:</p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if instance_exists(_enemy)<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="Expressions_And_Operators.htm">Wyrażenia i operatory</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>