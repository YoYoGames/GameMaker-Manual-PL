<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Typy danych</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Data Types" />
  <meta name="rh-index-keywords" content="Data Types" />
  <meta name="search-keywords" content="Data Types" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Typy danych</h1>
  <p>W poprzednim rozdziale omówiliśmy <a href="Variables_And_Variable_Scope.htm">zmienne i zasady ich skalowania</a>, ale niewiele zostało powiedziane na temat różnych <b>typów danych</b>, które mogą być przechowywane przez zmienne. Dlatego w tej części wyjaśniono różne typy danych i wyjaśniono, do czego można ich używać.</p>
  <p>Zanim przejdziemy dalej, wyjaśnijmy pokrótce, co rozumiemy pod pojęciem &quot;typy danych&quot;. Kiedy tworzymy zmienną, może ona służyć do przechowywania informacji, a kiedy wywołujemy funkcję, może ona również przechowywać zwracane informacje. Informacje te mogą mieć różne &quot;smaki&quot; - na przykład mogą być <em>liczbami rzeczywistymi</em> lub <em>ciągami</em> znaków. Te różne rodzaje używanych wartości nazywamy <b>typami danych</b>, a w przypadku korzystania z witryny <span class="notranslate">GameMaker Language</span> mogą to być dowolne z poniższych elementów:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Liczby rzeczywiste</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Liczby rzeczywiste to dowolne wartości, które nie są <span class="notranslate">string</span> ani żadnym z innych możliwych typów danych. Tak więc 124, 45639.566546456, 0, -45.5 itd. to przykłady liczb rzeczywistych. Wszystkie liczby rzeczywiste są zapisywane jako 64-bitowe wartości zmiennoprzecinkowe podwójnej precyzji (lub liczby całkowite), a kompilator w miarę możliwości dokonuje optymalizacji (na przykład wartość 0.0 zostanie zoptymalizowana do wartości całkowitej 0).</p>
    <p class="dropspot">W przypadku wartości, które nie są liczbami całkowitymi, mogą wystąpić niewielkie błędy zaokrąglenia, wynikające z natury matematyki zmiennoprzecinkowej. Więcej informacji na temat tej i innych funkcji związanych z liczbami można znaleźć w dokumencie: <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">GML Reference - Number Functions</a>.</p>
    <p class="note"><span class="note">UWAGA</span> W celu <b>HTML5</b> wszystkie liczby rzeczywiste są podwojone.</p>
    <p class="dropspot">Należy pamiętać, że choć wszystkie zmienne w programie <span data-keyref="GameMaker Name">GameMaker</span> są zapisywane jako liczby zmiennoprzecinkowe lub całkowite podwójnej precyzji, to w kontaktach z <span class="notranslate">extensions</span> można używać innych formatów. Można je przekazać do programu <span data-keyref="GameMaker Name">GameMaker</span> z adresu <span class="notranslate">extension</span>, a następnie sprawdzić za pomocą odpowiedniej funkcji <span class="inline">is_*()</span>, których listę można znaleźć <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">tutaj</a>.</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Boolean</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Boolean to po prostu wartość, która może być albo <span class="inline">true</span> albo <span class="inline">false</span>. Zauważ, że obecnie <span data-keyref="GameMaker Name">GameMaker</span> interpretuje liczbę rzeczywistą równą lub mniejszą od 0,5 jako wartość <span class="inline">false</span>, a każdą liczbę rzeczywistą większą od 0,5 jako <span class="inline">true</span>.
     <i>Nie</i> oznacza to jednak, że powinieneś sprawdzać, czy 1 i 0 (lub jakakolwiek inna liczba rzeczywista) to prawda czy fałsz, ponieważ masz do dyspozycji <b>stałe</b> <span class="inline">true</span> i <span class="inline">false</span>, które zawsze powinny być używane w Twoim kodzie, aby
      aby zapobiec problemom, jeśli w przyszłej aktualizacji zostaną dodane prawdziwe typy danych boolean.</p>
    <p class="dropspot">Za pomocą poniższej funkcji można przekształcić dowolną liczbę rzeczywistą na wartość typu boolean w sposób niejawny:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm"><span class="notranslate">bool</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Struny</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">Strona <span class="notranslate">string</span> to po prostu dowolny tekst, który został ujęty w cudzysłów &quot;...&quot;. Na stronie <span class="notranslate">strings</span> można wykonywać pewne operacje, takie jak dodawanie dwóch <span class="notranslate">strings</span> w celu utworzenia dłuższego <span class="notranslate">string</span> (konkatenacja), a także zmieniać właściwości <span class="notranslate">string</span> i wyodrębniać z niego liczby rzeczywiste. Więcej informacji na temat <span class="notranslate">strings</span> i funkcji <span class="notranslate">string</span> można znaleźć w: <a href="../GML_Reference/Strings/Strings.htm">GML Reference - Strings</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Tablice</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">Tablica to specjalny typ danych, który może służyć do przechowywania wielu wartości. Tablicę przypisuje się do zmiennej, a następnie &quot;wypełnia&quot; różne indeksy tablicy wartościami. Taką tablicę można następnie przekazywać do <span class="notranslate">scripts</span> i funkcji na zasadzie "pass-by-reference", jednak w przypadku modyfikacji przekazanej tablicy, stanie się ona kopią oryginalnej tablicy, a więc będzie musiała zostać zwrócona z powrotem do oryginalnej zmiennej, aby tablica została zaktualizowana. Więcej informacji o tablicach można znaleźć w: <a href="Arrays.htm">GML Overview - Arrays</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Struktury</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven"> <span class="notranslate">struct</span> (czasami nazywany &quot;obiektem lekkim&quot;) to surowa struktura danych, która działa jako kontener dla zmiennych wszystkich typów danych. Na stronie <span class="notranslate">struct</span> przypisuje się zmienną, a na stronie <span class="notranslate">struct</span> można zdefiniować kolejne zmienne, z których można odczytywać lub do których można zapisywać dane, zależnie od potrzeb. Więcej szczegółowych informacji na temat <span class="notranslate">structs</span> można znaleźć w rozdziale <a href="Structs.htm">Przegląd GML - Struktury</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Zmienne metody</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">Zmienna metodyczna to zmienna, której przypisano funkcję i można jej używać dokładnie tak samo, jak funkcji <span class="notranslate">GML</span> <span class="notranslate">runtime</span>. Więcej szczegółowych informacji można znaleźć w rozdziale Zmienne <a href="Method_Variables.htm">metody</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">int64</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">Liczba &quot;int64&quot; to 64-bitowa liczba całkowita, którą można utworzyć za pomocą adresu <span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span> (przez podanie nie-64-bitowej liczby rzeczywistej) lub podczas odczytu wartości <span class="inline">buffer_u64</span> z <a href="../GML_Reference/Buffers/buffer_read.htm">bufora</a>.</p>
    <p class="dropspot">Można tego użyć w miejscach, gdzie ściśle wymagana jest 64-bitowa liczba całkowita, lub gdy chcemy pracować z <a href="../../Additional_Information/Bitwise_Operators.htm">przesunięciami bitowymi</a> i potrzebujemy tych 64-bitowych pozycji.</p>
    <p class="dropspot">Wszelkie operacje bitowe, nawet jeśli są wykonywane na wartościach nie64-bitowych, zawsze zwracają 64-bitową liczbę całkowitą.</p>
    <p class="dropspot">Dzielenie na wartościach typu int64 również zwraca liczby całkowite (np.: int64 <span class="inline2">(5) / int64(2) = 2</span>).</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Wartości szesnastkowe</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> akceptuje <b>literały szesnastkowe</b> jako prawidłowe wartości. Wartości szesnastkowe są szczególnie popularne przy pracy z kolorami, ale mogą być używane wszędzie tam, gdzie wymagana jest dodatnia wartość całkowita. Wartości szesnastkowe można sformatować na dwa poniższe sposoby, gdzie <span class="inline"><em>abcd</em></span> jest rzeczywistą wartością szesnastkową:</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br />
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">Na przykład następujące wartości dziesiętne można wyrazić w postaci szesnastkowej, jak pokazano na rysunku:</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br />
      <strong>16777215</strong> -&gt; $ffffff, 0xffffff
    </p>
    <hr />
    <p class="dropspot">Wartość szesnastkowa może również zaczynać się od symbolu haszującego/ funtowego<span class="inline2">(#</span>), jednak zapisana w ten sposób jej wartość nie będzie równa podobnej wartości szesnastkowej zapisanej przy użyciu wcześniej przedstawionego formatu<span class="inline2">($</span> lub <span class="inline2">0x</span>). Wynika to ze sposobu interpretacji kolorów w <span class="notranslate">GML</span>, który wymagał zmiany formatu wartości hash/pound hex, aby kolory CSS mogły być zapisywane w formacie <span class="inline2">#RRGGBB</span>. Więcej informacji można znaleźć w artykule <a data-xref="{text}" href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">Kolory heksadecymalne</a>.</p>
    <p class="dropspot">Na przykład dwa poniższe elementy nie są równe:</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">Aby odnosiły się one do tej samej wartości dziesiętnej, należałoby zamienić miejscami dwa pierwsze i dwa ostatnie znaki:</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Wskaźnik</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Wskaźnik to typ danych, który &quot;wskazuje&quot; na lokalizację w pamięci. Na wskaźniku nie można wykonywać operacji i jest on używany tylko w niektórych, bardzo specyficznych funkcjach, takich jak pobieranie adresu <span class="notranslate">texture</span> lub <span class="notranslate">buffer</span> z pamięci dla innej funkcji. Przykłady funkcji, które zwracają wskaźnik, można znaleźć na stronach <a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a> lub <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>.</p>
    <p class="dropspot">Istnieje również funkcja sprawdzająca, czy wartość jest wskaźnikiem (patrz &quot;<b>Sprawdzanie typów danych</b>&quot;, poniżej) oraz funkcja konwertująca wartość na wskaźnik:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;"><span class="notranslate">ptr</span></a></li>
    </ul>
    <p class="dropspot">Podczas używania wskaźników można również używać (i otrzymywać zwroty) następujących stałych wbudowanych:</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>Stała</th>
          <th>Opis</th>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_null</span></td>
          <td>Ta stała wskazuje, że wskaźnik nie wskazuje na nic znaczącego (tak samo jak <span class="inline">NULL</span> w C++ lub <span class="inline">null</span> w C#). Ta wartość jest <a class="glossterm" data-glossterm="falsy" href="#">falsy</a>.</td>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
          <td>Ta stała oznacza po prostu, że wartość nie jest prawidłowym wskaźnikiem</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Enum</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">Enum to &quot;wyliczarka&quot;, która zasadniczo umożliwia utworzenie własnego ograniczonego typu danych z listą stałych wartości. Enumy są szczegółowo omówione na stronie poświęconej <a href="Variables/Constants.htm">stałym</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Niezdefiniowane</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">Wartość <span class="notranslate">undefined</span> (zwana też wartością &quot;null&quot;) to taka, w której wyrażenie nie ma poprawnej wartości, choć jest poprawne składniowo, a więc musi <i>coś</i> zwrócić. Na przykład, powiedzmy, że mamy <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">mapę DS</a> i używamy funkcji <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>. Co się stanie, gdy mapa nie będzie miała poszukiwanej wartości? Cóż, skoro funkcja jest poprawnie sformatowana, a problem polega na tym, że taka wartość nie istnieje, to zwróci ona stałą <span class="inline">undefined</span>, którą można sprawdzić tak samo, jak <span class="inline">true</span> lub jakąkolwiek inną wartość.<br></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, &quot;key&quot;);<br /><br />if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br />    show_debug_message(&quot;The key does not exist!&quot;);<br />}</label><br /></p>
    <p class="dropspot"> <br /></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">NaN</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span> oznacza &quot;nie jest liczbą&quot; i jest stałą, która może być zwrócona, gdy kompilator nie może oszacować wyniku operacji jako liczby. Na przykład 0/0 nie może być zdefiniowane jako liczba rzeczywista i dlatego jest reprezentowane przez <span class="inline">NaN</span>, a pierwiastek kwadratowy z liczby ujemnej - która jest uważana za liczbę urojoną - nie może być reprezentowany jako liczba rzeczywista i dlatego jest reprezentowany przez <span class="inline">NaN</span>.</label></p>
    <p class="dropspot">Zauważ, że ponieważ <span class="inline">NaN</span> nie jest liczbą, nie można jej porównywać z samą sobą, więc porównanie takie jak <span class="inline">NaN == NaN</span> zwróci <span class="inline">false</span>. To samo dotyczy porównania tablicowego, takiego jak to:</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br />
      <br />
      // Output: 0 (false)
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Infinity</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">Stała <span class="inline">infinity</span> odnosi się do liczby, która jest uważana za nieskończoną, np. wynik dzielenia dowolnej wartości zmiennoprzecinkowej przez zero, np. 1.0/0.</p>
    <p class="dropspot">Zauważ, że stała <span class="inline">infinity</span> jest równa sobie, więc <span class="inline">infinity == infinity</span> zwróci <span class="inline">true</span>.</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">Każdy</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">Typ danych &quot;<strong>Dowolny</strong>&quot; można znaleźć na wielu stronach podręcznika, np. <a href="../GML_Reference/Variable_Functions/is_string.htm">w argumentach</a> lub jako <a href="../GML_Reference/Variable_Functions/array_get.htm">wartość zwracana</a>. Wskazuje on, że akceptowany jest <em>dowolny typ wartości</em> lub może zostać zwrócony.</p>
  </div>
  <p> </p>
  <p>Typ danych dowolnej zmiennej można sprawdzić za pomocą funkcji wymienionych na następnej stronie:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funkcje zmienne</a></li>
  </ul>
  <p>Można tu również znaleźć tablice typów arytmetycznych, które przedstawiają wyniki różnych operacji wykonywanych przy użyciu mieszanych zmiennych typów danych:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="../../Additional_Information/Type_Tables.htm">Tabele typu</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="Language_Features/If_Else_and_Conditional_Operators.htm">if / else i operatory warunkowe</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->
</body>
</html>