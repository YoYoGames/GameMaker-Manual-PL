<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Funkcje i zmienne skryptowe</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Funkcje i zmienne skryptowe</h1>
  <p>Zasoby skryptowe to zbiór jednej lub więcej funkcji lub zmiennych zdefiniowanych przez użytkownika, które użytkownik zapisuje jako fragmenty kodu w <a href="../../The_Asset_Editors/Scripts.htm">Edytorze skryptów</a>. Funkcje zdefiniowane w witrynie <span class="notranslate">script</span> mogą rozwiązywać wyrażenia, zwracać wartości lub robić wszystko inne, na co pozwala witryna <span class="notranslate">GameMaker Language</span>, podobnie jak wbudowane <a href="Runtime_Functions.htm">funkcje runtime</a>.</p>
  <p>Funkcji skryptowych należy używać, gdy mamy blok kodu, który jest używany w więcej niż jednym miejscu lub <span class="notranslate">object</span>, lub gdy chcemy, aby blok kodu był używany w wielu <span class="notranslate">objects</span> w sposób modułowy. Używanie <span class="notranslate">scripts</span> do definiowania funkcji oznacza, że można zmienić funkcję tylko raz, gdy jest to wymagane, a zmiana zostanie &quot;odebrana&quot; przez każdy <span class="notranslate">object</span>, który ma wywołanie tej funkcji.</p>
  <p>Skrypty mogą być również bardzo przydatne z organizacyjnego punktu widzenia, ponieważ umożliwiają tworzenie grup funkcji należących do określonej kategorii - na przykład możesz mieć kilka funkcji związanych z kolizjami między instancjami w swojej grze, więc utworzysz &quot;<span class="inline">Collision_Functions</span>&quot; <span class="notranslate">script</span> i będziesz przechowywać w nim wszystkie te funkcje razem.</p>
  <p>Zobacz także: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funkcje skryptu a metody</a></p>
  <h2>Tworzenie funkcji</h2>
  <p>Podczas tworzenia strony <span class="notranslate">script</span> zawierającej funkcje, funkcje muszą być utworzone w następujących formatach:</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>lub:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Aby utworzyć funkcję w <span class="notranslate">GML</span> Visual, użyj polecenia <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>. Włącz jej opcję &quot;Temp&quot;, aby utworzyć zmienną metody (druga składnia pokazana powyżej).</p>
  <p>Generalnie jednak dla funkcji <span class="notranslate">script</span> należy używać <em>pierwszej </em>formy, ponieważ definiuje ona funkcję jako specyficzną funkcję <span class="notranslate">script</span>, co oznacza, że będzie ona miała <a href="Variables_And_Variable_Scope.htm">zasięg</a> <strong>globalny </strong>, będzie miała przypisany <strong>indeks skryptu</strong> i nie będzie wymagała prefiksu <span class="inline">global</span> do jej identyfikacji, ponieważ kompilator rozpozna ją jako funkcję <span class="notranslate">script</span>.</p>
  <p>Użycie drugiej formy spowoduje wygenerowanie <a href="Method_Variables.htm">zmiennej metody</a> o zasięgu globalnym i jako taka <em>nie </em>zostanie rozpoznana jako funkcja <span class="notranslate">script</span> przez <span class="notranslate">IDE</span> i będzie wymagała użycia prefiksu <span class="inline">global</span> przy odwoływaniu się do niej w kodzie.</p>
  <p class="note"><span class="note">UWAGA</span> Można to sprawdzić, używając obu formularzy w witrynie <span class="notranslate">script</span>, a następnie wywołując na każdym z nich funkcję runtime <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a>. Jedna z nich zostanie zaklasyfikowana jako &quot;liczba&quot; - ponieważ zwraca identyfikator indeksu <span class="notranslate">script</span> - a druga jako &quot;metoda&quot;.</p>
  <h2>Parametry/Argumenty</h2>
  <p>Można zdefiniować własne parametry/argumenty funkcji, które będą dostępne dla funkcji jako zmienne lokalne i mogą być użyte w dowolnym celu w ramach danej funkcji:</p>
  <p class="code">function move(<strong>spd, dir</strong>)<br />
    {<br />
        speed = <strong>spd</strong>;<br />
        direction = <strong>dir</strong>;<br />
    }</p>
  <p>Funkcja ta pobiera dwa argumenty i przypisuje ich wartości do zmiennych <span class="inline">speed</span> i <span class="inline">direction</span> instancji. Można ją teraz wywoływać jak każdą inną funkcję <span class="notranslate">runtime</span> i przekazywać do niej argumenty:</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br />
    <br />
    <strong>move(4, _mouse_dir);</strong>
  </p>
  <h2>Argumenty opcjonalne</h2>
  <p>Jeśli argument nie zostanie przekazany do funkcji, jego wartością będzie <span class="inline">undefined</span>. Można tego użyć do zdefiniowania argumentów <em>opcjonalnych</em> i sprawdzenia, czy argument został przekazany, czy nie, poprzez sprawdzenie, czy jest równy <span class="inline">undefined</span>. Można jednak również jawnie zdefiniować wartość domyślną dla argumentu, która zostanie użyta zamiast <span class="inline">undefined</span>, gdy nie zostanie przekazany.</p>
  <p>Taką wartość domyślną można przypisać do parametru za pomocą znaku równości (<span class="inline">=</span>), czyniąc z niej zmienną opcjonalną:</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br />
    {<br />
        speed = spd;<br />
        direction = dir;<br />
    }</p>
  <p>Jeśli argument <span class="inline">dir</span> nie zostanie podany podczas wywoływania powyższej funkcji, jego wartość będzie domyślnie równa <span class="inline">90</span>, co spowoduje przesunięcie instancji w górę.</p>
  <p class="note"><span class="tip">WSKAZÓWKA</span> W wywołaniach funkcji można pominąć argumenty, które domyślnie będą miały wartość <span class="inline">undefined</span> (lub wartość domyślną dla tego argumentu określoną przez funkcję).<br>
    <br>
    Na przykład wpisanie adresu <span class="inline">my_func(0,,,1)</span> jest równoznaczne z wpisaniem adresu <span class="inline">my_func(0, undefined, undefined, 1)</span>.
  </p>
  <hr />
  <p>Domyślną wartością zmiennej opcjonalnej może być wyrażenie, dlatego definiując zmienną opcjonalną, można na przykład używać zmiennych i wywoływać funkcje. Należy pamiętać, że takie wyrażenie zostanie wykonane tylko wtedy, gdy w wywołaniu funkcji nie zostanie podany jego opcjonalny argument. Zobacz poniższy przykład funkcji logowania:</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br />
    {<br />
        var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br />
        _string += object_get_name(object) + &quot;: &quot;;<br />
        _string += text;<br />
        <br />
        show_debug_message(_string);<br />
    }</p>
  <p>Funkcja ta przyjmuje trzy argumenty, przy czym pierwszy argument jest domyślnie stałą <span class="notranslate">string</span>, drugi argument jest domyślnie zmienną instancji (w zakresie instancji wywołującej), a trzeci argument jest domyślnie wyrażeniem wywołującym funkcję pobierającą bieżącą datę i godzinę. Funkcję tę można teraz wywołać z maksymalnie trzema argumentami, jak widać na poniższym przykładzie:</p>
  <p class="code">log();<br />
    // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br />
    <br />
    log(&quot;Player Shot&quot;, obj_player, 10);<br />
    // Prints: [10] obj_player: Player Shot
  </p>
  <h2>JSDoc</h2>
  <p>Zalecamy również dodawanie komentarzy określających właściwości funkcji (więcej informacji na ten temat znajduje się w rozdziale poświęconym komentarzom <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JSDoc</a> ), tak aby prosta strona <span class="notranslate">script</span> wyglądała następująco:</p>
  <p class="code">/// @function                 log(message);<br />
    /// @param {string}  message  The message to show<br />
    /// @description              Show a message whenever the function is called.<br />
    <br />
    function log(message)<br />
    {<br />
        show_debug_message(message);<br />
    }
  </p>
  <p>Dodatkowe funkcje dla strony <span class="notranslate">script</span> można dodawać w formacie przedstawionym powyżej, jedna po drugiej, w obrębie strony <span class="notranslate">script</span> <span class="notranslate">asset</span>.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>Wartość zwracana</h2>
  <p>Funkcje w <span class="notranslate">scripts</span> mogą również zwracać wartość, tak samo jak funkcje <span class="notranslate">runtime</span>, i jako takie mogą być używane w wyrażeniach. W tym celu należy użyć <a href="Language_Features/return.htm"><span class="inline">return</span></a> wyrażenie:</p>
  <p class="code">return &lt;expression&gt;</p>
  <p>Należy zauważyć, że instrukcja return <strong><i>wykonanie funkcji kończy się wraz z instrukcją return</i></strong>co oznacza, że każdy kod, który pojawi się po wywołaniu <strong>return </strong>, <i>nie zostanie</i> wykonany. Oto krótki przykład funkcji o nazwie &quot;<span class="inline">sqr_calc</span>&quot;, która oblicza kwadrat dowolnej wartości, która zostanie jej przekazana, a w przypadku gdy podana wartość nie jest liczbą rzeczywistą, używa <strong>return</strong> do wcześniejszego zakończenia działania funkcji, tak że właściwe obliczenia nigdy nie zostaną wykonane:</p>
  <p class="code">/// @function           sqr_calc(val);<br />
    /// @param {real}  val  The value to calculate the square of<br />
    /// @description        Calculate the square of the given value<br />
    <br />
    function sqr_calc(val)<br />
    {<br />
        if !is_real(val)<br />
        {<br />
            return 0;<br />
        }<br />
    <br />
        return (val * val);<br />
    }
  </p>
  <p>Zwróć uwagę, że jeśli utworzysz funkcję <span class="notranslate">script</span> <em>bez</em> wartości zwracanej, a następnie w swoim kodzie sprawdzisz, czy jest ona zwracana, domyślnie otrzymasz wartość <span class="inline">undefined</span>.</p>
  <p>Aby wywołać funkcję <span class="notranslate">script</span> z wnętrza kodu, wystarczy użyć jej w taki sam sposób, jak w przypadku wywoływania dowolnej funkcji <span class="notranslate">runtime</span> - to znaczy napisać nazwę funkcji z wartościami parametrów w nawiasach. Tak więc powyższy adres <span class="notranslate">script</span> można by wywołać w następujący sposób:</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br />
    {<br />
        val = scr_sqr(amount);<br />
    }</p>
  <p class="note"><strong>UWAGA</strong>: Podczas używania własnych funkcji z witryny <span class="notranslate">scripts</span> w edytorze kodu można nacisnąć przycisk<span> <img></span> lub kliknąć środkowym przyciskiem myszy <span><img> </span>na nazwie funkcji, aby otworzyć stronę <span class="notranslate">script</span>, która ją zawiera, do bezpośredniej edycji.</p>
  <h2>Nazwy skryptów a nazwy funkcji</h2>
  <p>Ważne jest, aby zrozumieć, że <i>nazwy</i> <span class="notranslate">script</span> są <b>niezależne od funkcji, które zawierają</b>, więc możesz nazywać swoje <span class="notranslate">scripts</span> w bardziej &quot;zdroworozsądkowy&quot; sposób, np. wszystkie funkcje AI mogą być umieszczone w <span class="notranslate">script</span> &quot;<span class="inline">Enemy_AI</span>&quot; (zgodnie ze standardową konwencją nazewnictwa <span class="notranslate">asset</span>, polegającą na stosowaniu znaków alfanumerycznych i tylko znaku &quot;_&quot;). Jednak w grze nadal możesz wywoływać <span class="notranslate">scripts</span> - i możesz nazwać <span class="notranslate">scripts</span> tak samo, jak funkcję, którą w niej definiujesz - co może powodować problemy ze względu na sposób, w jaki <span data-keyref="GameMaker Name">GameMaker</span> przechowuje odwołania do <span class="notranslate">asset</span>. Aby podać przykład, rozważmy następujący kod, wywołany z instancji:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Powyższy kod próbuje wywołać funkcję <span class="notranslate">script</span> o nazwie &quot;myscript&quot; wewnątrz metody, co w tym przypadku nie powiedzie się. Dzieje się tak dlatego, że funkcja in-line tak naprawdę używa <em>indeksu</em> dla <span class="notranslate">script</span> <span class="notranslate">asset</span>, a <strong>nie </strong>wywołuje funkcji <span class="notranslate">script</span> - np. jeśli indeks <span class="notranslate">script</span> ma wartość &quot;4&quot;, funkcja wywołuje <span class="inline">4(arg);</span>, co jest bez sensu. Zamiast tego kod powinien być skonstruowany w jeden z dwóch poniższych sposobów:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(method(undefined, myscript), arg);<br />
    <br />
    // OR<br />
    <br />
    function indirectCall(func, arg)<br />
    {<br />
        script_execute(func, arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Należy o tym pamiętać, zwłaszcza w przypadku starszych projektów, w których <span class="notranslate">scripts</span> zawiera jedną funkcję, a jej nazwa jest taka sama jak nazwa <span class="notranslate">script</span>. Jednak naprawdę <em>nie</em> należy tego robić, a adresy <span class="notranslate">scripts</span> powinny być nazywane niezależnie od funkcji, które zawierają.</p>
  <div data-conref="../../assets/snippets/Script_empty_reference_error.hts"> </div>
  <h2>Zakres scenariusza</h2>
  <p>To prowadzi nas do ostatniej i najważniejszej rzeczy, jaką należy wiedzieć o <span class="notranslate">scripts</span> i zawartych w nich funkcjach: <span class="notranslate">scripts</span> są parsowane na poziomie <b>globalnym</b> i będą <strong>kompilowane na samym początku gry</strong>. Oznacza to, że <em>technicznie</em> wszystkie funkcje w <span class="notranslate">script</span> są &quot;niepowiązanymi&quot; zmiennymi <a href="Method_Variables.htm">metod</a>, a wszelkie zmienne zadeklarowane poza funkcją w <span class="notranslate">script</span> będą uważane za zmienne <a href="Variables/Global_Variables.htm">globalne</a>. Na przykład, rozważmy następujący skrypt:</p>
  <p class="code">function Foo()<br />
    {<br />
        // Do something<br />
    }<br />
    blah = 10;<br />
    function Bar()<br />
    {<br />
        // Do something else<br />
    }</p>
  <p>W powyższym przypadku zdefiniowane zostały nie tylko funkcje <span class="inline">Foo</span> i <span class="inline">Bar</span>, ale także zmienna <span class="inline">blah</span> i wszystkie one są uważane za utworzone w zakresie <b>globalnym</b>. Funkcje te nie potrzebują słowa kluczowego <span class="inline">global</span>, aby zostały rozpoznane, ponieważ kompilator rozumie, że te funkcje są częścią <span class="notranslate">script</span>, ale gdybyś chciał uzyskać dostęp do <span class="inline">blah</span>, musiałbyś to zrobić:</p>
  <p class="code">val = global.blah;</p>
  <p>Zalecamy jednak, aby <b>zawsze wyraźnie wpisywać zmienne globalne</b> podczas ich tworzenia w <span class="notranslate">scripts</span>, aby uniknąć późniejszych problemów. <span class="notranslate">Scripts</span> to także idealne miejsce do definiowania <strong>makr</strong> i <strong>enumów</strong><a href="Variables/Constants.htm">(stałych</a>), ponieważ dodanie ich do <span class="notranslate">script</span> poza funkcją oznacza także, że zostaną one utworzone do użycia przed uruchomieniem kodu gry. Poniżej znajduje się przykład strony <span class="notranslate">script</span>, która tworzy różne wartości zakresu globalnego dla gry:</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br />
    global.player_score = 0;<br />
    global.player_hp = 100;<br />
    global.pause = false;<br />
    global.music = true;<br />
    global.sound = true;<br />
    <br />
    enum rainbowcolors<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }<br />
    <br />
    #macro weapon_num 3<br />
    #macro weapon_gun 0<br />
    #macro weapon_bomb 1<br />
    #macro weapon_knife 2
  </p>
  <p>Zwróć uwagę, że wszystkie te stałe są ustawiane poza wywołaniem funkcji, co oznacza, że zostaną zainicjowane przed wszystkim innym i w zakresie <em>globalnym </em>. Oznacza to, że jeśli chcesz użyć skryptu do zainicjowania zmiennych na poziomie <em>instancji </em>, musisz zawrzeć je w funkcji, na przykład:</p>
  <p class="code">/// @function                init_enemy();<br />
    /// @description             Initialise enemy instance vars<br />
    <br />
    function init_enemy()<br />
    {<br />
        hp = 100;<br />
        dmg = 5;<br />
        mana = 50;<br />
    }
  </p>
  <p>Tak więc strony <span class="notranslate">scripts</span> można używać do generowania makr, enumów i zmiennych globalnych przed rozpoczęciem gry, aby były gotowe do użycia w dowolnym momencie, a także do tworzenia &quot;niepowiązanych&quot; metod (funkcji zdefiniowanych przez użytkownika), których można używać w grze jak funkcji <span class="notranslate">GML</span> <span class="notranslate">runtime</span>.</p>
  <p>Ostatnia uwaga dotycząca funkcji <span class="notranslate">script</span> jest taka, że jeśli tworzysz funkcje dla <strong>sieci Web </strong>(tzn. dla <strong>HTML5</strong>), istnieje dodatkowy protokół funkcji, którego można użyć podczas dodawania funkcji do <span class="notranslate">scripts</span>, polegający na poprzedzeniu nazwy funkcji znakiem <span class="inline">gmcallback_</span>, na przykład:</p>
  <p class="code">gmcallback_create_button</p>
  <p>Użycie powyższej nazwy funkcji oznacza, że funkcja <span class="inline">gmcallback_create_button()</span> nie będzie ukryta i będzie można jej używać w JavaScript <span class="notranslate">extensions</span> oraz w innych miejscach gry, na przykład przy użyciu funkcji <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><span class="inline">clickable_*</span></a> funkcji.</p>
  <h2>Zmienne statyczne</h2>
  <p>Funkcje mogą również korzystać ze zmiennych statycznych, które zachowują swoje wartości podczas każdego wywołania funkcji. Więcej informacji na <a href="Functions/Static_Variables.htm">ten temat można znaleźć na tej stronie</a>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a href="Method_Variables.htm">Zmienne metody</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>