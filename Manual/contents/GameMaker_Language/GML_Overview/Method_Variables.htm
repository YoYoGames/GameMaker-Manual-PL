<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Zmienne metody</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Method Variables" />
  <meta name="rh-index-keywords" content="Method Variables" />
  <meta name="search-keywords" content="Method Variables,methods,method" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Zmienne metody</h1>
  <p>Zmienna metody jest zasadniczo zmienną, której przypisano funkcję, &quot;wiążąc&quot; ją z instancją i umożliwiając użycie zmiennej do odwołania się do funkcji - podobnie jak używa się <a href="Runtime_Functions.htm">nazwy funkcji runtime</a> do odwołania się do wbudowanej funkcji <span class="notranslate">GML</span>. Używana zmienna może mieć zakres <em>lokalny</em>, <em>instancyjny</em> lub <em>globalny</em> (więcej informacji o zakresie zmiennych można znaleźć <a href="Variables_And_Variable_Scope.htm">tutaj</a> ).</p>
  <p>Zobacz także: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funkcje skryptu a metody</a></p>
  <h2>Tworzenie metod</h2>
  <p>Składnia tworzenia zmiennej metody jest następująca:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>lub .</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Aby utworzyć funkcję w <span class="notranslate">GML</span> Visual, użyj polecenia <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>. Włącz opcję &quot;Temp&quot;, aby utworzyć zmienną metody (pierwsza składnia pokazana powyżej).</p>
  <p>Ogólnie rzecz biorąc, <em>pierwszą </em>formę należy jednak stosować do metod, a drugą do definiowania <a href="Script_Functions.htm">funkcji skryptowych</a>, ponieważ druga forma będzie również przypisywać indeks <span class="notranslate">script</span> do nazwy funkcji, podczas gdy pierwsza forma będzie &quot;prawdziwą&quot; metodą (i będzie wymagać użycia przedrostka <a href="Variables/Global_Variables.htm"><span class="notranslate">global</span></a> jeśli jest używana do definiowania funkcji skryptowej).</p>
  <p class="note"><span class="note">UWAGA</span> Możesz to sprawdzić, używając obu formularzy w projekcie, a następnie wywołując na każdym z nich funkcję <span class="notranslate">runtime</span> <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a>. Jeden z nich zostanie zaklasyfikowany jako &quot;liczba&quot; - ponieważ zwraca identyfikator indeksu <span class="notranslate">script</span> - a drugi jako &quot;metoda&quot;.</p>
  <p>Należy więc pamiętać, że - ogólnie rzecz biorąc - mówiąc o metodach i zmiennych metodowych, zawsze będziemy odwoływać się do funkcji, które <em>nie </em>zostały zdefiniowane za pomocą indeksu <span class="notranslate">script</span>. </p>
  <p>Poniżej przedstawiono trzy proste przykłady tworzenia zmiennej metody przy użyciu różnych zakresów:</p>
  <p class="code">// Local<br />
    var _debug = function(message)<br />
    {<br />
        show_debug_message(message);<br />
    }<br />
    <br />
    // Instance<br />
    do_maths = function(val1, val2, val3)<br />
    {<br />
        return (val1 * val2) - val3;<br />
    }<br />
    <br />
    // Global<br />
    global.pd = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        return point_distance(_x1, _y1, _x2, _y2);<br />
    }
  </p>
  <p>Zauważ, że w powyższym kodzie różne parametry, które są podawane jako dane wejściowe funkcji, mają swoje nazwy i to właśnie te nazwy powinny być używane w funkcji do odwoływania się do różnych danych wejściowych. Zwróć też uwagę, że możesz użyć instrukcji <span class="inline"><a href="Language_Features/return.htm">return</a></span>, aby zwrócić wartość z funkcji do wykorzystania w innym miejscu kodu, oraz że funkcja <em>bez</em> zdefiniowanej wartości zwracanej domyślnie zwróci <span class="inline">undefined</span>.</p>
  <p class="note"><span class="note">UWAGA</span> Podczas gdy zmienna będzie znajdować się w wybranym zakresie, rzeczywista funkcja będzie związana z zakresem, w którym została początkowo zdefiniowana. Na przykład <a href="Script_Functions.htm">funkcje skryptów</a> mają zasięg globalny i są &quot;niezwiązane&quot; (tzn. nie są powiązane z żadnymi instancjami), ale jeśli masz funkcję <span class="notranslate">script</span>, która tworzy w sobie inną funkcję jako zmienną metody, a następnie wywołujesz tę funkcję <span class="notranslate">script</span> z instancji, funkcja użyta w <span class="notranslate">script</span> będzie związana ze zmienną <strong>instancji jako metoda</strong>. Ogólnie rzecz biorąc, nie trzeba się nad tym zastanawiać, ale w przypadku bardziej złożonych operacji ze zmiennymi metod warto to wziąć pod uwagę. Dotyczy to również innych konstrukcji, takich jak <a href="Language_Features/with.htm"><span class="inline">with</span></a> - gdy tworzysz zmienną metody wewnątrz instrukcji with, funkcja zostanie związana z instancją, która jest aktualnie w zasięgu.</p>
  <p>Po utworzeniu zmiennej metody można jej używać tak samo, jak na przykład funkcji <span class="notranslate">runtime</span> lub <span class="notranslate">script</span>:</p>
  <p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        var _array;<br />
        _array[0] = point_distance(_x1, _y1, _x2, _y2);<br />
        _array[1] = point_direction(_x1, _y1, _x2, _y2);<br />
        return _array;<br />
    }<br />
    <br />
    vec = create_vec(x, y, mouse_x, mouse_y);
  </p>
  <p>Zmienne utworzone wewnątrz funkcji podlegają tym samym regułom, co zwykłe zmienne, i są przypisane do zakresu zgodnie z użytym słowem kluczowym lub zakresem wywołania funkcji. W powyższym przykładzie używamy <span class="inline">var</span>, więc zmienna tablicowa znajduje się w <em>lokalnym </em>zakresie funkcji. Gdybyśmy nie użyli słowa kluczowego, zmienna zostałaby utworzona w zakresie instancji, która wywołała funkcję.</p>
  <p>Metody, podobnie jak funkcje <span class="notranslate">script</span>, mogą przyjmować opcjonalne argumenty, które mają wartości domyślne, gdy nie zostaną przekazane:</p>
  <p class="code">create_attachment = function(_attachment, <strong>_x = x</strong>, <strong>_y = y</strong>)<br />
    {<br />
        return instance_create_layer(_x, _y, layer, _attachment);<br />
    }</p>
  <p>Powyższa funkcja przyjmuje trzy argumenty, z których dwa ostatnie są opcjonalne. Jeśli nie zostaną one przekazane w momencie wywołania funkcji, to domyślnie zostaną użyte współrzędne instancji <span class="inline">x</span> i <span class="inline">y</span>.</p>
  <p>Należy zauważyć, że jeśli argument nie został przekazany i nie ma wartości domyślnej, będzie równy <span class="inline">undefined</span>.</p>
  <p>Metody mogą również korzystać ze zmiennych statycznych, które zachowują swoje wartości podczas każdego wywołania funkcji. Więcej informacji na <a href="Functions/Static_Variables.htm">ten temat można znaleźć na tej stronie</a>.</p>
  <p>Poniżej wymieniono kilka funkcji pomocniczych związanych ze zmiennymi metod:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/is_method.htm"><span class="notranslate">is_method</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method.htm"><span class="notranslate">method</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_self.htm"><span class="notranslate">method_get_self</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_index.htm"><span class="notranslate">method_get_index</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="GML_Overview.htm">Przegląd GML</a></div>
        <div style="float:right">Następny: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funkcje skryptu a metody</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
-->
  <!-- TAGS
method_variables
-->
</body>
</html>