<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Funkcje skryptu a metody</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Funkcje skryptu a metody</h1>
  <p>Na tej stronie omówiono najważniejsze informacje dotyczące używania funkcji <span class="notranslate">script</span> i metod.</p>
  <h2>Różnica podstawowa</h2>
  <p>Za pomocą tej składni tworzona jest <a href="Script_Functions.htm">funkcja skryptu</a>:</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p> <a href="Method_Variables.htm">Zmienna metody</a> jest tworzona przy użyciu tej składni:</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>Należy używać pierwszej składni w <span class="notranslate">scripts</span>, aby tworzyć funkcje globalne, które mogą być wywoływane z dowolnego zakresu w grze.</p>
  <p>Drugiej składni należy używać podczas tworzenia funkcji w <a href="Structs.htm">strukturach/konstruktorach</a> oraz na stronie <span class="notranslate">objects</span>. Ta składnia tworzy zmienną zawierającą metodę.</p>
  <h2>Połączenia bezpośrednie</h2>
  <p>Zarówno funkcje, jak i metody <span class="notranslate">script</span> można wywoływać bezpośrednio za pomocą nawiasów <span class="inline2">()</span>, podobnie jak <a href="Runtime_Functions.htm">funkcje runtime</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>Można także użyć funkcji <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> do uruchamiania funkcji <span class="notranslate">script</span>, choć jest to obecnie funkcja starszego typu i nie zaleca się jej używania.</p>
  <h2>Połączenia pośrednie: Metody</h2>
  <p>Odwołanie do metody można przechowywać w innej zmiennej, aby wywołać ją później za pomocą tej innej zmiennej:</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">Zauważ</span>, że w kodzie nie wstawiono <span class="inline2">()</span> po <span class="inline2">reset_alpha</span>. Dzieje się tak dlatego, że czytamy referencję do metody, a nie ją wywołujemy.</p>
  <p>W tym przykładzie wywołanie <strong>metody</strong> <span class="inline2">temp_1</span> spowoduje wywołanie <strong>metody</strong> <span class="inline2">reset_alpha</span>, ponieważ przechowuje ona odwołanie do tej <strong>metody</strong>.</p>
  <p>Przekazywanie referencji do metod w ten sposób jest całkowicie w porządku. Jednak w przypadku korzystania z funkcji <span class="notranslate">script</span> istnieje pewne zastrzeżenie.</p>
  <h2>Połączenia pośrednie: <span class="notranslate">Script</span> Funkcje</h2>
  <p>Odwołanie do funkcji <span class="notranslate">script</span> można również przechowywać w innej zmiennej:</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Teraz można wywołać <span class="inline2">temp_1</span>, wykonując następujące czynności:</p>
  <p class="code">temp_1();</p>
  <p>Ponieważ jednak zmienna ta odwołuje się do <strong>funkcji skryptu</strong>, należy ją najpierw przekształcić w <strong>metodę</strong>, a następnie wywołać.</p>
  <p>Może to łatwo doprowadzić do zwiększonego zużycia pamięci, zwłaszcza jeśli wywołujesz tę metodę co klatkę, ponieważ silnik musi teraz tworzyć nową metodę dla tego wywołania co klatkę. </p>
  <p>Jakie jest więc rozwiązanie?</p>
  <ul class="colour">
    <li>Użyj <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> aby wywołać funkcję <span class="notranslate">script</span> przez jej referencję, co nie spowoduje utworzenia metody.</li>
    <li>Albo, co jest lepszym rozwiązaniem: przekształć funkcję <span class="notranslate">script</span> <a href="../GML_Reference/Variable_Functions/method.htm">w metodę</a>, przekazując jej referencję.</li>
  </ul>
  <p>Aby zastosować drugie rozwiązanie, Twój kod wyglądałby następująco:</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>Jest to utworzenie nowej metody z funkcji skryptu <span class="inline2">reset_x</span>, przy użyciu <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Wywołanie teraz metody <span class="inline2">temp_1()</span> z użyciem nawiasów nie zwiększy zużycia pamięci, ponieważ metoda jest już utworzona dla użytkownika.</p>
  <p>Ponownie, ma to zastosowanie tylko wtedy, gdy wywołujesz funkcję <span class="notranslate">script</span> <strong>pośrednio</strong>, przez referencję przechowywaną w zmiennej. Wywołanie jej bezpośrednio nie powoduje takich problemów.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Powrót: <a data-xref="{title}" href="GML_Overview.htm">Przegląd kodu GML</a></div>
        <div>Następny: <a data-xref="{title}" href="Functions/Static_Variables.htm">Zmienne statyczne</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>