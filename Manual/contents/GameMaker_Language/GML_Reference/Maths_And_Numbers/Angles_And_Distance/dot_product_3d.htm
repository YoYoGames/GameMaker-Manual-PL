<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>kropka_produktu_3d</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for dot_product_3d" />
  <meta name="rh-index-keywords" content="dot_product_3d" />
  <meta name="search-keywords" content="dot_product_3d" />
  <meta name="is_pure" content="true" />
</head>

<body>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>kropka_produktu_3d</h1>
  <p>Iloczyn punktowy to wartość wyrażająca relację kątową między dwoma wektorami, którą uzyskuje się przez pomnożenie dwóch wektorów, a następnie dodanie wyników. Nazwa &quot;iloczyn punktowy&quot; pochodzi od wyśrodkowanej kropki &quot;-&quot;
    która jest często używana do oznaczania tej operacji (alternatywna nazwa &quot;iloczyn skalarny&quot; podkreśla raczej skalarny niż wektorowy charakter wyniku).</p>
  <p>Rzeczywistą formułę matematyczną można zapisać w następujący sposób:</p>
  <p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png"/></p>
  <p>W 2D iloczynem punktowym wektorów <span class="inline">a[x1,y1]</span> i <span class="inline">b[x2,y2]</span> jest <span class="inline">x1x2 + y1y2</span>, więc w 3D iloczynem punktowym wektorów <span class="inline">a[x1,y1,z1]</span> i <span class="inline">b[x1,y1,z1]</span> jest <span class="inline">x1x2 + y1y2 + z1z2</span>. Zatem w programie <span data-keyref="GameMaker Name">GameMaker</span> iloczyn punktowy3d oblicza się w następujący sposób:</p>
  <p class="code">a · b = (x1*x2) + (y1*y2) + (z1*z2);</p>
  <p>Ciekawostką związaną z iloczynem kropkowym jest jego związek z kątem utworzonym przez wektory wejściowe, który można wyrazić jako:</p>
  <p class="code">a · b = (length of a) * (length of b) * cos(angle)</p>
  <p>Oznacza to, że iloczyn punktowy dwóch wektorów będzie równy cosinusowi kąta między tymi wektorami, pomnożonemu przez długości każdego z nich. Poniżej znajduje się ilustracja:</p>
  <p><img alt="Dot Product ilustration" class="center" height="143" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_2.png" width="406"/></p>
  <p class="note"><strong>UWAGA</strong>: Więcej informacji na temat wektorów można znaleźć <a href="../../../../Additional_Information/Vectors.htm">tutaj</a>.</p>
  <p>Jest kilka rzeczy, które możemy teraz stwierdzić na podstawie dwóch dowolnych wektorów w odniesieniu do wyniku ich iloczynu punktowego:</p>
  <ul class="colour">
    <li>Jeśli a i b są prostopadłe do siebie (pod kątem 90 stopni), to iloczyn kropkowy będzie równy zero, ponieważ <span class="inline">cos(ang)</span> będzie równy zero.</li>
    <li>Jeśli kąty między a i b są mniejsze niż 90 stopni, to iloczyn kropkowy będzie dodatni (większy od zera), ponieważ <span class="inline">cos(ang)</span> będzie dodatni.</li>
    <li>Jeśli kąty między a i b są większe niż 90 stopni, to iloczyn punktowy będzie ujemny (mniejszy od zera), ponieważ <span class="inline">cos(ang)</span> będzie ujemny.</li>
  </ul>
  <p>Co to oznacza dla tych, którzy tworzą gry? Cóż, tę matematyczną zależność można wykorzystać w wielu okolicznościach, ale najlepszym sposobem, aby się o tym przekonać, jest zbudowanie rzeczywistego scenariusza i sprawdzenie, co się dzieje. Jednym z najprostszych
    sposobów jest wygenerowanie prostego sprawdzania &quot;wysokości&quot; wroga w grze platformowej, tak aby wróg &quot;widział&quot; gracza, jeśli znajduje się on powyżej płaszczyzny utworzonej przez wektor <i>normalny</i> wroga i podłogę 3d.</p>
  <p><img>Zasadniczo pobieramy wektor normalny od wroga prostopadły do podłogi, a następnie
    wektor gracza do wroga. Następnie otrzymujemy iloczyn kropkowy tych wektorów i jeśli wynik jest dodatni, gracz znajduje się &quot;nad&quot; płaszczyzną podłogi przeciwnika, a jeśli jest ujemny, to jest pod nią. Właściwy kod do wykonania tego działania
    znajduje się w poniższym przykładzie.</p>
  <p> </p>
  <h4><b>Składnia:</b></h4>
  <p class="code">dot_product_3d(x1, y1, z1, x2, y2, z2)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th><th>Typ</th>
        <th>Opis</th>
     </tr>
      <tr>
        <td><span class="notranslate">x1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">z1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The z coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">x2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">z2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The z coordinate of the second vector.</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Zwroty:</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>Przykład:</h4>
  <p class="code">var x1, y1, x2, y2;<br/> x1 = 0;<br/> y1 = 1;<br/> z1 = 0;<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) &gt; 0 above=true else above=false;</p>
  <p>Powyższy kod tworzy wektor normalny wzdłuż osi y (góra) instancji, a następnie pobiera do siebie wektor gracza <span class="notranslate">object</span> &quot;o_Player&quot;. Na koniec oblicza iloczyn punktowy tych dwóch wektorów i jeśli jest on większy od 0, ustawia zmienną
    &quot;powyżej&quot; na wartość true, a jeśli jest mniejszy lub równy 0, ustawia zmienną &quot;false&quot; na wartość false.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Angles_And_Distance.htm">Kąty i odległości</a></div>
        <div style="float:right">Następny: <a href="dot_product_normalised.htm"><span class="notranslate">dot_product_normalised</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
dot_product_3d
-->
  <!-- TAGS
dot_product_3d
-->

</body></html>