<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Wideoklipy YUV</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Information on drawing YUV videos" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-index-keywords" content="yuv videos" />
  <meta name="search-keywords" content="yuv videos" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1>Wideoklipy YUV</h1>
  <p>Platformy, które używają formatu kolorów YUV dla filmów wideo, wymagają dodatkowych czynności podczas rysowania tych filmów. Polega to na użyciu strony <span class="notranslate">shader</span> do narysowania dwóch powierzchni na prymitywnym quadzie.</p>
  <p>Przeczytaj najpierw stronę <span class="inline"><a href="video_draw.htm">video_draw()</a></span>, aby dowiedzieć się, jakie dane zwraca ta funkcja w przypadku wideo YUV, a następnie kontynuuj czytanie poniżej, aby uzyskać instrukcje dotyczące używania tych danych do rysowania wideo.</p>
  <h2>YUV Shader</h2>
  <p>Utwórz w swoim projekcie stronę <span class="notranslate">shader</span> <span class="notranslate">asset</span> i zastąp jej kod Fragment <span class="notranslate">Shader</span> (<span class="inline2">.fsh</span>) następującym kodem:</p>
  <pre>//
// CUSTOM fragment <span class="notranslate">shader</span> do obsługi zawartości YUV
//
varying vec2 v_vTexcoord;
varying vec4 v_vColour;
jednolity sampler2D v_chroma;
const float x = 1,164383;
const float y = 1.138393;
const float z = 1.138393;
const vec3 src_bias = vec3(16.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0);
const mat3 src_xform = mat3(1.000000 * x, 0.000000 * y, 1.57480000 * z,
                            1.000000 * x, -0.18732427 * y, -0.46812427 * z,
			    1.000000 * x, 1.85560000 * y, 0.000000 * z);
void main()
{
    float yy = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y)).r;
    vec2 cbcr = texture2D(v_chroma, vec2(v_vTexcoord.x, v_vTexcoord.y)).rg;
    vec3 yuv = vec3(yy, cbcr);
    yuv -= src_bias;
    yuv *= src_xform;
    gl_FragColor = vec4(yuv, 1.0);
}
  
</pre>
  <h2>Pobierz próbnik</h2>
  <p>W zdarzeniu Create (Utwórz) na stronie <span class="notranslate">object</span> należy pobrać identyfikator próbnika <span class="inline2">v_chroma</span> <span class="notranslate">shader</span> uniform, tylko jeśli obraz wideo jest w formacie YUV:</p>
  <pre>var _format = video_get_format();
if (_format == video_format_yuv)
{
    videochromasampler = shader_get_sampler_index(shader_YUV, &quot;v_chroma&quot;);
}
</pre>
  <h2 id="h">Film rysunkowy</h2>
  <p>W zdarzeniu Draw programu <span class="notranslate">object</span> wywołaj <span class="inline"><a href="video_draw.htm">video_draw()</a></span> i jeśli pierwsza pozycja tablicy jest równa <strong>0</strong> (czyli film jest odtwarzany), narysuj film.</p>
  <p>W poniższym kodzie używamy instrukcji <span class="notranslate">switch</span> na funkcji <span class="inline"><a href="video_get_format.htm">video_get_format()</a></span>. Jeśli w filmie używany jest format RGBA, to powierzchnia jest po prostu rysowana na pozycji <span class="inline2">[1]</span> tablicy.</p>
  <p>Jeśli obraz wideo jest w formacie YUV, wykorzystuje stronę <span class="notranslate">shader</span> do narysowania dwóch powierzchni (w pozycjach <span class="inline2">[1]</span> i <span class="inline2">[2]</span>) na prymitywnym quadzie.</p>
  <pre>var _data = video_draw();
if(_data[0] == 0)
{
	switch(video_get_format())
	{
		case video_format_rgba:
			var _surf = _data[1];
			draw_surface(_surf,0,0);
		break;
	
		// #### YUV PART HERE ####
		case video_format_yuv:
			var _surf = _data[1];
			var _chromasurf = _data[2];
			if(surface_exists(_surf) and surface_exists(_chromasurf))
			{
				shader_set(shader_YUV);
			
				var _tex_id = surface_get_texture(_surf);
				var _chroma_tex_id = surface_get_texture(_chromasurf);
				texture_set_stage(videochromasampler, _chroma_tex_id);
				gpu_set_texfilter(false);
			
				draw_primitive_begin_texture(pr_trianglestrip, _tex_id);
			        draw_vertex_texture(0, 0, 0, 0);
				draw_vertex_texture(surface_get_width(_chromasurf), 0, 1, 0);
				draw_vertex_texture(0, surface_get_height(_chromasurf), 0, 1);
				draw_vertex_texture(surface_get_width(_chromasurf), surface_get_height(_chromasurf), 1, 1);
				draw_primitive_end();
			
				gpu_set_texfilter(true);
				shader_reset();
			}
		break;
	}
}
  </pre>
  <p>Kod w <span class="inline2">przypadku video_format_yuv:</span> wykonuje następujące czynności:</p>
  <ul class="colour">
    <li>Zbiera powierzchnię wideo<span class="inline2">(_surf</span>) i powierzchnię chroma<span class="inline2">(_chromasurf</span>)</li>
    <li>Upewnia się, że istnieją, używając <span class="inline"><a href="../Surfaces/surface_exists.htm">surface_exist()</a></span>
      <ul>
        <li>Ustawia <span class="notranslate">shader</span> na <span class="inline2">shader_YUV</span> (czyli nasz nowo utworzony YUV <span class="notranslate">shader</span>).</li>
        <li>Uzyskuje adres <span class="notranslate">textures</span> obu powierzchni.</li>
        <li>Przypisuje adres <span class="notranslate">texture</span> powierzchni chromatycznej do próbnika, który został pobrany w zdarzeniu Create.</li>
        <li>Wyłącza filtrowanie <span class="notranslate">texture</span>.</li>
        <li>Rozpoczyna rysowanie prymitywu trójkątnego paska z przypisanym do niego adresem <span class="notranslate">texture</span> powierzchni wideo</li>
        <li>Rysuje prostokąt pokrywający powierzchnię wideo, używając szerokości i wysokości powierzchni chromatycznej dla tego prostokąta</li>
        <li>Kończy prymityw</li>
        <li>Ponownie włącza filtrowanie <span class="notranslate">texture</span> i resetuje shader.</li>
      </ul>
    </li>
  </ul>
  <p>Tutaj główna powierzchnia wideo jest rysowana przez prymityw, a powierzchnia chromatyczna jest do niej wtapiana przez <span class="notranslate">shader</span>. Z tego powodu <span class="notranslate">texture</span> powierzchni chromatycznej został przekazany do <span class="notranslate">shader</span> za pomocą samplera.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Wstecz: <a data-xref="{text}" href="Videos.htm#h1">Odtwarzanie wideo</a></div>
        <div>Next: <a data-xref="{title}" href="video_set_volume.htm">video_set_volume</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
YUV	Videos
-->
  <!-- TAGS
-->
</body>
</html>