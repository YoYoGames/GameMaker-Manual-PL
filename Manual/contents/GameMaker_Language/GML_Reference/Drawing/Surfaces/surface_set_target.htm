<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>surface_set_target</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for surface_set_target" />
  <meta name="rh-index-keywords" content="surface_set_target" />
  <meta name="search-keywords" content="surface_set_target" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>surface_set_target</h1>
  <p>Dzięki tej funkcji ustawiasz wszystkie dalsze rysunki na docelową powierzchnię, a nie na ekran. W ten sposób możesz powiedzieć programowi <span data-keyref="GameMaker Name">GameMaker</span>, by rysował tylko określone rzeczy na określonej powierzchni. Zwróć uwagę, że jeśli nie wywołasz funkcji <a href="surface_reset_target.htm"><span class="inline">surface_reset_target()</span></a> po zakończeniu pracy, nic nie będzie rysowane na ekranie, ponieważ wszystkie dalsze rysunki (nawet w innych przypadkach) będą wykonywane na powierzchni. Powinieneś również zdawać sobie sprawę, że nic nie będzie widać, jeśli sama powierzchnia nie zostanie narysowana na ekranie w zdarzeniu draw instancji. Możesz także sprawdzić wartość zwracaną tej funkcji jako narzędzie debugowania, aby sprawdzić, czy cel powierzchniowy został ustawiony, czy nie, przy czym wartość zwracana równa 0 oznacza niepowodzenie ustawienia celu, a każda inna dodatnia wartość oznacza sukces.</p>
  <p>Należy zwrócić uwagę na to, że powierzchnie są <i>ułożone w stos</i>, więc nie można przeskakiwać z jednego celu do drugiego, a na końcu powrócić do normalnego celu rysowania, lecz trzeba otwierać i zamykać cele renderowania. Na przykład, <b>nie</b> będzie to działać poprawnie:</p>
  <p class="code">surface_set_target(surf1);<br />
    draw_text(32, 32, &quot;surface1&quot;);<br />
    surface_set_target(surf2);<br />
    draw_text(32, 64, &quot;surface2&quot;);<br />
    surface_reset_target();</p>
  <p>Zamiast tego należy zresetować cel dla każdej z ustawionych powierzchni, podobnie jak w przypadku bloków kodu należy używać nawiasów otwierających i zamykających {}. Powyższe polecenie należy więc zapisać w następujący sposób:</p>
  <p class="code">surface_set_target(surf1);<br />
    draw_text(32, 32, &quot;surface1&quot;);<br />
    surface_reset_target();<br />
    surface_set_target(surf2);<br />
    draw_text(32, 64, &quot;surface2&quot;);<br />
    surface_reset_target();</p>
  <p>lub w ten sposób:</p>
  <p class="code">surface_set_target(surf1);<br />
    draw_text(32, 32, &quot;surface1&quot;);<br />
    surface_set_target(surf2);<br />
    draw_text(32, 64, &quot;surface2&quot;);<br />
    surface_reset_target();<br />
    surface_reset_target();</p>
  <p class="note"><b>UWAGA</b>: Podczas pracy z powierzchniami istnieje możliwość, że w każdej chwili mogą one przestać istnieć, ponieważ są przechowywane w pamięci <span class="notranslate">texture</span>. Należy <b>ZAWSZE</b> sprawdzić, czy powierzchnia istnieje, używając polecenia <span style="font-size:1px;"><a href="surface_exists.htm"><span class="inline">surface_exists()</span></a></span> przed bezpośrednim odwołaniem się do niej.</p>
  <p> </p>
  <h4>Składnia:</h4>
  <p class="code">surface_set_target(surface_id);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th><th>Typ</th>
        <th>Opis</th>
     </tr>
      <tr>
        <td><span class="notranslate">surface_id</span></td><td><span data-keyref="Type_ID_Surface"></span></td>
        <td><span class="notranslate">The ID of the surface to set as the drawing target.</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Zwroty:</h4>
  <p class="code"><span data-keyref="Type_Bool"></span></p>
  <p> </p>
  <h4>Przykład:</h4>
  <p class="code">if view_current = 0<br />
    {<br />
        surface_set_target(surf);<br />
        with (obj_Effect)<br />
        {<br />
            draw_self();<br />
        }<br />
        surface_reset_target();<br />
    }<br />
    else<br />
    {<br />
        draw_surface(surf, 0, 0);<br />
    }</p>
  <p>Powyższy kod sprawdzi, który widok jest aktualnie rysowany, i jeśli jest to widok[0], ustawi cel rysowania na powierzchnię i narysuje wszystkie instancje <span class="notranslate">object</span> &quot;obj_Effect&quot; przed ponownym zresetowaniem celu rysowania. Jeśli widok nie jest widokiem[0], to powierzchnia jest rysowana na ekranie.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Surfaces.htm">Powierzchnie</a></div>
        <div style="float:right">Następny: <a href="surface_set_target_ext.htm"><span class="notranslate">surface_set_target_ext</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
surface_set_target
-->
  <!-- TAGS
surface_set_target
-->
</body>
</html>