<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>System Rollback</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Details for Rollback Multiplayer" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>System Rollback</h1>
  <p>Po przejściu przez tutorial <a data-xref="{title}" href="Creating_Multiplayer.htm">Tworzenie gry wieloosobowej</a>, możesz mieć kilka pytań dotyczących działania systemu Rollback. Ta strona ma na celu rozwinięcie tego tematu.</p>
  <h2>Co to jest Rollback?</h2>
  <p>Podczas gry online łatwo jest doświadczyć lagów. Jeśli grasz z kimś zdalnie, może to zająć ułamek sekundy, aby jego dane dotarły do Ciebie, ale nawet to może wystarczyć, aby zepsuć wrażenia z gry.</p>
  <p>Rollback wykorzystuje przewidywania, aby zmniejszyć efekt opóźnienia. Na podstawie poprzednich danych wejściowych przewiduje, co inny użytkownik zrobi w następnej kolejności, i pokazuje wynik tego przewidywania, które jest natychmiastowe.</p>
  <p>Gdy przewidywania są prawidłowe, nie odczuwasz lagów, a Twoja gra jest znacznie bardziej responsywna.</p>
  <p>Czasami jednak system zdaje sobie sprawę, że jego przewidywania były błędne. W takim przypadku, <em>wraca</em> do ostatniego poprawnego stanu i kontynuuje grę od tego momentu. Dlatego właśnie nazywa się to &quot;<strong>Rollback multiplayer</strong>&quot;.</p>
  <h3>Determinizm</h3>
  <p>Rollback jest deterministyczny. Współdzieli tylko dane wejściowe z innymi graczami i oczekuje, że wszyscy oni uruchomią tę samą logikę na danym wejściu, dając takie same wyniki na wszystkich klientach.</p>
  <p>Innym podejściem do multiplayera jest &quot;replikacja stanu&quot;, która nieustannie synchronizuje stan gry między klientami, zapewniając, że zawsze robią to samo.</p>
  <p>Rollback nie robi tego -- tylko zawsze wysyła wejścia, ale także pilnuje stanu, aby można było go cofnąć w przypadku złego przewidywania.</p>
  <p class="note"><em><strong>Co to jest klient?</strong></em><br>
    <br>
    Klient&quot; to gracz w Twojej grze i odnosi się do jego kopii gry, uruchomionej na jego komputerze.
  </p>
  <h2>Jak to działa?</h2>
  <p>Jak wcześniej wspomniano, Rollback <strong>przekazuje dane wejściowe tylko</strong> pomiędzy graczami.</p>
  <p>Istnieją dwie główne rzeczy, które Rollback obsługuje:</p>
  <ul class="colour">
    <li><strong>Wejście</strong>: <a href="Rollback_Functions/rollback_define_input.htm">Wejścia</a> każdego gracza są wysyłane do innych graczy. Jeśli gracz 0 naciśnie <strong>&quot;fire&quot;</strong> w swoim kliencie, Rollback zapewni, że inni klienci również zobaczą jak gracz 0 naciska <strong>&quot;fire</strong>&quot;.<br>
      <br>
     <strong>Przewidywania są uruchamiane tylko na wejściu.</strong>
    </li>
    <li><strong>Stan</strong>: Obejmuje wszystkie zarządzane <span class="notranslate">objects</span> i ich zmienne. Te NIE są synchronizowane między graczami: zmiana jednej zmiennej w jednym kliencie nie spowoduje automatycznej aktualizacji w innym kliencie.<br>
      <br>
     <strong>Stan jest zarządzany tylko po to, by móc go cofnąć.</strong>
    </li>
  </ul>
  <h2>Więc... jaka jest różnica?</h2>
  <p><strong>Wejście</strong> zmienia <strong>stan</strong>, co jest podstawową koncepcją Rollback multiplayer.</p>
  <p>Oto przykład:</p>
  <ul class="colour">
    <li><strong>Wejście</strong>: Gracz 0 naciska przycisk <strong>&quot;fire</strong>&quot;.</li>
    <li><strong>Stan</strong>: Ponieważ gracz 0 nacisnął ogień, został stworzony pocisk. Ten pocisk w końcu zderza się z kamieniem. W wyniku tego gracz 0 otrzymuje punkt.<br>
      <br>
      To jest w zasadzie cała twoja gra, zależna całkowicie od danych wejściowych.
    </li>
  </ul>
  <p>&quot;<strong>Wejście</strong>&quot; jest tym, co Rollback komunikuje między wszystkimi graczami, a nie stanem.</p>
  <p>Ponieważ jednak wszyscy klienci gry uruchamiają tę samą logikę na otrzymanych danych wejściowych (co jest wymogiem), <strong>wszystkie one skutkują tym samym stanem</strong>.</p>
  <p><img class="center" height="521" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/multiplayer_input_sync_explained.png" width="1096" /></p>
  <h2>Czym zatem jest państwo?</h2>
  <p>Jeśli tylko wejście jest synchronizowane, to po co jest <strong>stan</strong>?</p>
  <p>Ponieważ wejście wpływa na stan, zła predykcja wejścia może spowodować zły <strong>stan</strong>.</p>
  <p>Kiedy rollback stwierdzi, że przewidywanie było błędne, zastępuje bieżący stan prawidłowym stanem i uruchamia wejścia i przewidywania od tego punktu ponownie. Obejmuje to wszystkie twoje zarządzane <span class="notranslate">objects</span> i ich zmienne.</p>
  <p>Nie oznacza to, że Rollback synchronizuje <span class="notranslate">objects</span> i zmienne między klientami. Tylko dlatego, że <span class="inline2">zmienna_a</span> jest ustawiona na <span class="inline2">&quot;Gurpreet&quot;</span> w jednym kliencie, nie oznacza to, że inni klienci również zobaczą tę samą wartość.</p>
  <p>Widzieliby tę samą wartość dla zmiennej tylko wtedy, gdyby pochodziła ona z wkładu gracza lub jakiegoś innego zarządzanego systemu, takiego jak alarmy i funkcje losowe.</p>
  <h2 id="h2">Obiekty zarządzane</h2>
  <p>Obiekty mają pole wyboru &quot;<strong>Zarządzane</strong>&quot;, które jest domyślnie włączone dla nowych <span class="notranslate">objects</span>:</p>
  <p><img>Obiekty, które są oznaczone jako zarządzane, mają możliwość cofnięcia się i uruchomienia na nich predykcji, w tym wszystkich ich zmiennych, tworzenia i niszczenia.</p>
  <p>Wszystkie <span class="notranslate">objects</span>, które są częścią rozgrywki, jak gracz, manager/kontroler <span class="notranslate">objects</span>, item pickups, projectiles, itp. muszą być oznaczone jako zarządzane.</p>
  <p>Możesz to wyłączyć dla <span class="notranslate">objects</span>, które nie muszą być synchronizowane pomiędzy graczami, jak np. statyczny świat <span class="notranslate">objects</span>, wizualizacje, efekty itp. które nie wpływają w żaden sposób na rozgrywkę.</p>
  <p>Zauważ, że zarządzana właściwość rodzica nie jest stosowana do jego dzieci automatycznie, więc każde dziecko <span class="notranslate">object</span> musi mieć ręcznie ustawione zarządzane pole wyboru.</p>
  <h2 id="h">Test synchronizacji</h2>
  <p><span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> przyjmuje argument Test Sync, który jest domyślnie włączony (gdy argument nie jest określony).</p>
  <p>Sync Test służy do testowania gry w trybie offline. Jeśli pojawią się jakieś problemy z synchronizacją, poinformuje Cię o tym, drukując błąd w dzienniku wyjścia. Możesz używać Sync Test na <span class="notranslate">Windows</span>, macOS i Opera GX.</p>
  <p>Test Sync wykonuje cały kod gry dwa razy w ciągu jednej klatki, dzięki czemu może sprawdzić wszelkie problemy z synchronizacją. Oznacza to, że podczas testów offline niektóre zdarzenia mogą wystąpić dwukrotnie, co nie będzie miało miejsca podczas gry online.</p>
  <h3>Wejście losowe i pozorowane</h3>
  <p>Podczas testu synchronizacji, &quot;zdalne&quot; instancje graczy otrzymują losowe wartości wejściowe dla swoich <a href="Defining_Inputs.htm">zdefiniowanych wejść</a>, jako prosta forma testowania. Możesz to wyłączyć używając <span class="inline"><a href="Rollback_Functions/rollback_use_random_input.htm">rollback_use_random_input()</a></span>.</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p class="video_subtitle">Drugi gracz otrzymuje losowe wejście podczas testu synchronizacji.</p>
  <p>Do zdalnych odtwarzaczy można również przypisać tymczasowe wejścia pozorowane podczas testu synchronizacji. Więcej informacji na ten temat można znaleźć w części <a data-xref="{text}" href="Defining_Inputs.htm#h1">Wejście</a> wyśmiewające.</p>
  <h2>Efektywne tworzenie trybu wieloosobowego</h2>
  <p>Musisz zapewnić, że wszystkie klienty gry uruchamiają <strong>tę samą logikę</strong>, gdy otrzymują te same dane <strong>wejściowe</strong>. Jeśli dana instancja została utworzona lub przeniesiona tylko dla jednego klienta, nie będzie to odzwierciedlone na innych klientach.</p>
  <p>Ten problem zwykle nie występuje, jeśli zaprogramujesz grę tak, jak pokazano w rozdziale <a data-xref="{title}" href="Creating_Multiplayer.htm">Tworzenie gry wieloosobowej</a>, gdzie cała logika gracza działa tak samo dla wszystkich instancji gracza, niezależnie od tego, czy instancja jest <a href="Rollback_Variables/player_local.htm">lokalna, czy nie.</a> Jeśli jednak zaimplementujesz warunek, aby zrobić coś tylko dla konkretnego gracza, a nie dla innych, spowoduje to zakłócenia w stanie gry.</p>
  <h2 id="h1">Definiowanie obiektu gracza</h2>
  <h3>Automatyczne tworzenie instancji graczy</h3>
  <p>Jak pokazano w <a data-xref="{title}" href="Creating_Multiplayer.htm">Tworzenie gry wieloosobowej</a>, możesz zdefiniować gracza <span class="notranslate">object</span> za pomocą <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a>, a system automatycznie stworzy jego instancje dla każdego podłączonego gracza. Będzie również niszczył instancje dla graczy, którzy się rozłączą.</p>
  <p>Utworzone w ten sposób instancje graczy mają automatycznie przypisane swoje ID w zmiennej <span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span>. W każdej instancji gracza możesz po prostu wywołać <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> bez żadnych argumentów, co da ci wejścia dla tego konkretnego gracza.</p>
  <p>Jest to standardowy sposób korzystania z systemu Rollback, jednak możesz również zarządzać instancjami graczy i ich wejściami ręcznie.</p>
  <h3>Ręczne tworzenie instancji graczy</h3>
  <p>Aby zarządzać instancjami graczy ręcznie, nie wywołuj <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span>. Spowoduje to uruchomienie gry bez utworzenia jakichkolwiek instancji graczy.</p>
  <p>Następnie utwórz własne instancje graczy ręcznie, najlepiej w zdarzeniu <a data-xref="{text}" href="Rollback_Events.htm#h">Rollback Start</a>, i nadaj im identyfikatory graczy w zmiennej niestandardowej. Aby uzyskać dane wejściowe dla gracza, wywołaj <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> i podaj ID gracza jako argument. Zadzwoń na <a href="Rollback_Functions/rollback_get_info.htm"><span class="inline">rollback_get_info()</span></a> aby uzyskać te <a href="Rollback_Variables/Rollback_Variables.htm">zmienne</a> w <span class="notranslate">struct</span>, które w przeciwnym razie zostałyby przypisane do graczy automatycznie.</p>
  <p>W ten sposób możesz ręcznie zarządzać, kiedy i jak tworzone są instancje graczy, przypisane im identyfikatory oraz pobieranie danych wejściowych dla konkretnego gracza.</p>
  <h3>Utrzymuj instancje graczy przy życiu</h3>
  <p>Jeśli używasz <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a>, nie niszcz tworzonych instancji graczy. Jeśli musisz pokazać gracza jako pokonanego, zmień jego <span class="notranslate">sprite</span>, lub ukryj go używając innej metody, ale utrzymaj instancję przy życiu, ponieważ jest ona zarządzana przez <span class="notranslate">GameMaker</span>.</p>
  <h2>Pojedynczy gracz</h2>
  <p>System Rollback może być użyty podczas tworzenia gry dla jednego gracza. Wystarczy podać <strong>1</strong> jako liczbę graczy podczas wywoływania <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span>.</p>
  <p>W ten sposób system nigdy nie połączy się z żadną stroną <span class="notranslate">servers</span>, a Twoja gra będzie zasadniczo offline, z możliwością rozbudowy do gry wieloosobowej online, kiedy tylko zechcesz.</p>
  <p>Przyjmij to podejście, gdy tworzysz nowy projekt, który w przyszłości może wykorzystywać multiplayer, ponieważ trudniej będzie zaimplementować multiplayer do gry, gdy jest już ukończona bez użycia systemu Rollback.</p>
  <h2 id="h4">Ręczny a automatyczny start</h2>
  <p>Domyślnie gra wieloosobowa rozpoczyna się, gdy tylko wszyscy gracze dołączą. Możesz jednak rozpocząć ją przed tym momentem wywołując <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.</p>
  <p>Możesz całkowicie wyłączyć zachowanie autostartu poprzez wywołanie <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>. Oznacza to, że gra będzie czekać na ręczne uruchomienie gry przez użytkownika.</p>
  <p>Automatyczne uruchamianie jest automatycznie wyłączane po <a href="Rollback_Functions/rollback_use_player_prefs.htm">włączeniu</a> preferencji gracza.</p>
  <p><span></span></p>
  <h2>Dalsza lektura</h2>
  <p>Przeczytaj kolejne strony, aby uzyskać więcej informacji na temat systemu Rollback:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Defining_Inputs.htm">Definiowanie danych wejściowych</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">Ograniczenia cofania</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">Zdarzenia związane z cofaniem</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">Preferencje gracza</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Powrót: <a data-xref="{title}" href="Rollback_Multiplayer.htm">Rollback Multiplayer</a></div>
        <div>Dalej: <a data-xref="{title}" href="Defining_Inputs.htm">Definiowanie wejść</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone</span></h5>
  </div>
</body>
</html>