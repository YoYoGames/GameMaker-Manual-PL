<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Odbiór śmieci</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for the Garbage Collection functions" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Garbage Collection" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Odbiór śmieci</h1>
  <p> <strong>Garbage Collector</strong> w <span data-keyref="GameMaker Name">GameMakerze</span> istnieje, ponieważ metody mogą być przekazywane na stos i pozostawiane bez odniesienia, podobnie jak <span class="notranslate">structs</span> i kilka innych rzeczy, które z kolei spowodowałyby wyciek pamięci, gdyby nie zostały w jakiś sposób &quot;wyczyszczone&quot;. W tym miejscu wkracza garbage collector, który działa w tle gry, zbierając wszystko, co zostało pozbawione odniesienia, i utrzymując optymalne wykorzystanie pamięci. Kiedy mówimy o czymś, co nie ma odniesienia, odnosimy się do <span class="notranslate">struct</span> lub funkcji, która nie jest połączona (nie musi być bezpośrednio, ale poprzez łańcuch innych zmiennych) ze zmienną <strong>globalną </strong>lub zmienną <strong>instancji obiektu</strong>. Należy również pamiętać, że funkcje zdefiniowane w <span class="notranslate">scripts</span> na stronie <span class="notranslate">IDE</span> również nie są gromadzone, ponieważ są one niejawnie globalne.</p>
  <p class="note"><b>UWAGA</b>: Należy pamiętać, że takie rzeczy jak powierzchnie, struktury danych, <span class="notranslate">buffers</span> i inne zasoby dynamiczne <b>nie</b> są zbierane jako śmieci i mają swoje własne funkcje <span class="inline">destroy</span>, które czyszczą związaną z nimi pamięć. Zasadą jest, że jeśli cokolwiek, co zostanie utworzone w czasie uruchamiania, ma funkcję <span class="inline">destroy</span>, to nie będzie odśmiecane i trzeba będzie się tym zająć samodzielnie w kodzie. Wyjątkami są <span class="notranslate">sequences</span>, <span class="notranslate">animation curves</span> oraz instancje, które również wymagają odśmiecania, <b>ale nadal muszą mieć wywoływaną funkcję destroy</b>.</p>
  <p>Odśmiecanie, którego używa <span data-keyref="GameMaker Name">GameMaker</span>, jest &quot;generacyjne&quot;. Oznacza to, że w celu zmniejszenia ilości pracy, jaką trzeba wykonać przy każdej klatce, strona <span class="notranslate">objects</span> jest podzielona na &quot;generacje&quot;. Nowe <span class="notranslate">objects</span> są tworzone w generacji 0, a w miarę starzenia się są przenoszone do starszych generacji. Ogólna idea jest taka, że obiekty <span class="notranslate">objects</span>, które istnieją przez jakiś czas, nie muszą być ciągle sprawdzane, czy powinny zostać usunięte, ale mogą być sprawdzane rzadziej (zauważ, że &quot;obiekty&quot; odnoszą się tu do wszystkiego, co może zostać wyrzucone na śmietnik, a <i>nie</i> do ogólnych instancji <span class="notranslate">object</span> zdefiniowanych w przeglądarce <span class="notranslate">Asset</span> ). Zauważ, że chociaż system sprawdzania jest generacyjny, faktyczne sprawdzanie odbywa się w sposób &quot;przyrostowy&quot;, tak że zamiast usuwać potencjalnie tysiące <span class="notranslate">objects</span> z generacji w jednej ramce - co powoduje duży skok użycia procesora i potencjalnie wpływa na rozgrywkę - każda generacja będzie sprawdzana i w razie potrzeby czyszczenie będzie rozłożone na wiele ramek, dzięki czemu śmieciarz będzie działał częściej, ale będzie wykonywał mniej pracy w każdej ramce (można ustawić docelowy czas, jaki śmieciarz ma spędzić na każdej ramce, używając funkcji <span class="inline"><a href="gc_target_frame_time.htm">gc_target_frame_time()</a></span>).</p>
  <p>Ogólnie rzecz biorąc, nie powinieneś mieć potrzeby interakcji z systemem zbierania śmieci w <span data-keyref="GameMaker Name">GameMakerze</span> i zazwyczaj wyniki jego działania nie są widoczne, ale niektóre polecenia dostępne na stronie <span class="notranslate">GML</span> pozwalają uzyskać informacje o tym, co robi system zbierania śmieci, i w ograniczonym stopniu wpływać na jego zachowanie.</p>
  <p class="note"><b>WAŻNE!</b> Należy pamiętać, że na platformie docelowej HTML5 odśmiecanie jest obsługiwane przez silnik JavaScript, dlatego żadna z poniższych funkcji nie będzie miała wpływu na jego działanie, a funkcja <span class="inline">gc_get_stats()</span> zwróci 0 dla wszystkich pól.</p>
  <ul class="colour">
    <li><a href="gc_enable.htm"><span class="notranslate">gc_enable</span></a></li>
    <li><a href="gc_is_enabled.htm"><span class="notranslate">gc_is_enabled</span></a></li>
    <li><a href="gc_collect.htm"><span class="notranslate">gc_collect</span></a></li>
    <li><a href="gc_target_frame_time.htm">gc_target_frame_time</a></li>
    <li><a href="gc_get_target_frame_time.htm">gc_get_target_frame_time</a></li>
    <li><a href="gc_get_stats.htm"><span class="notranslate">gc_get_stats</span></a></li>
  </ul>
  <p> </p>
  <p>Aby pomóc w określeniu, co i kiedy wymaga odśmiecania, można skorzystać z kilku funkcji, które służą do tworzenia i sprawdzania <strong>słabych odwołań</strong> do <span class="notranslate">structs</span>. Słabe odwołanie to odwołanie, które nie chroni odwoływanej strony <span class="notranslate">object</span> przed zbieraniem śmieci, a zatem może być użyte do sprawdzenia, czy strona <span class="notranslate">struct</span> jest nadal &quot;żywa&quot; (odwołuje się do niej), czy nie gdzieś w grze. Funkcje dostępne dla słabych odwołań to:</p>
  <ul class="colour">
    <li><a href="weak_ref_create.htm"><span class="notranslate">weak_ref_create</span></a></li>
    <li><a href="weak_ref_alive.htm"><span class="notranslate">weak_ref_alive</span></a></li>
    <li><a href="weak_ref_any_alive.htm"><span class="notranslate">weak_ref_any_alive</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../GML_Reference.htm">Odniesienie do GML</a></div>
        <div style="float:right">Następny: <a href="../Variable_Functions/Variable_Functions.htm">Funkcje zmiennych</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
GML Reference
-->
  <!-- TAGS
gml_reference
-->
</body>
</html>