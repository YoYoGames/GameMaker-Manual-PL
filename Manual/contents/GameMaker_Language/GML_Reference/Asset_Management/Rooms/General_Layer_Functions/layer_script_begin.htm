<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>layer_script_begin</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function layer_script_begin" />
  <meta name="rh-index-keywords" content="layer_script_begin" />
  <meta name="search-keywords" content="layer_script_begin" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>layer_script_begin</h1>
  <p>Za pomocą tej funkcji można przypisać do warstwy <a href="../../../../GML_Overview/Script_Functions.htm">funkcję skryptu</a>, która zostanie wywołana przed wyrenderowaniem warstwy. Podczas dodawania funkcji do warstwy będzie ona uruchamiana na początku <i>każdego z różnych zdarzeń rysowania</i>, dlatego warto sprawdzić w przypisanej funkcji, które zdarzenie jest aktualnie renderowane, i odpowiednio dostosować kod. Można to zrobić, sprawdzając wartość <a href="../../Objects/Object_Events/event_type.htm"><span class="inline">event_type</span></a> i/lub <a href="../../Objects/Object_Events/event_number.htm"><span class="inline">event_number</span></a> (patrz rozszerzony przykład poniżej). Należy pamiętać, że funkcja ta <i>nie</i> jest wywoływana w żadnych zdarzeniach losowania ani w zdarzeniach kroków, lecz tylko na początku <span class="notranslate">room</span> w <strong>kodzie tworzenia pomieszczenia</strong> lub w zdarzeniu <strong>tworzenia / </strong> <strong>rozpoczęcia pomieszczenia</strong> przez instancję.</p>
  <p> </p>
  <h4>Składnia:</h4>
  <p class="code">layer_script_begin(layer_id, script);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Opis</th>
      </tr>
      <tr>
        <td><span class="notranslate">layer_id</span></td>
        <td><span data-keyref="Type_String">Ciąg</span> lub <span data-keyref="Type_ID_Layer">identyfikator warstwy</span></td>
        <td><span class="notranslate">The unique ID value of the layer to target (or the layer name as a string)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">script</span></td>
        <td><span data-keyref="Type_Function_Script">Funkcja skryptu</span></td>
        <td><span class="notranslate">The script function index to assign to the layer</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Zwroty:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Przykład rozszerzony:</h4>
  <p>W tym rozszerzonym przykładzie pokażemy najpierw, jak skonstruowana jest prosta funkcja <span class="notranslate">script</span> służąca do ustawiania pewnych jednolitych danych <span class="notranslate">shader</span>, tak aby po narysowaniu danej warstwy funkcja ta została uruchomiona, a <span class="notranslate">shader</span> działała poprawnie. W przykładzie warto zwrócić uwagę na to, w jaki sposób sprawdzamy, które zdarzenie jest wywoływane, tak aby reszta funkcji była uruchamiana tylko przy tym konkretnym zdarzeniu, przy którym chcemy, aby działała - w tym przypadku tylko przy głównym zdarzeniu rysowania:</p>
  <p class="code">/// @function layer_shader_start();<br />
    function layer_shader_start()<br />
    {<br />
        if event_type == ev_draw<br />
        {<br />
            if event_number == 0<br />
            {<br />
                colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
                colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);<br />
                shader_set(s_ColourChanger);<br />
                shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
                shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
            }<br />
        }<br />
    }</p>
  <p>Po zakończeniu rysowania należałoby użyć dodatkowej funkcji do zresetowania strony <span class="notranslate">shader</span>:</p>
  <p class="code">/// @function layer_shader_end();<br />
    function layer_shader_end()<br />
    {<br />
        if event_type == ev_draw<br />
        {<br />
            if event_number == 0<br />
            {<br />
                shader_reset();<br />
            }<br />
        }<br />
    }</p>
  <p>Po zdefiniowaniu naszych funkcji <span class="notranslate">script</span> służących do ustawiania <span class="notranslate">shader</span>, musimy przypisać je do konkretnej warstwy, aby wiedziała ona, że ma je wywoływać. Można to zrobić w kodzie tworzenia <span class="notranslate">room</span> albo w zdarzeniu create lub <span class="notranslate">room</span> start jakiegoś kontrolera <span class="notranslate">object</span> (nie muszą być one ustawiane co krok, ale raczej raz na początku <span class="notranslate">room</span> lub gdy warstwa jest tworzona):</p>
  <p class="code">var lay_id = layer_get_id(&quot;Instances&quot;);<br />
    layer_script_begin(lay_id, layer_shader_start);<br />
    layer_script_end(lay_id, layer_shader_end);</p>
  <p>Ten ostatni blok kodu przypisuje warstwę <span class="notranslate">scripts</span> do warstwy.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="General_Layer_Functions.htm">Ogólne funkcje warstwy</a></div>
        <div style="float:right">Następny: <a href="layer_script_end.htm"><span class="notranslate">layer_script_end</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_begin
-->
  <!-- TAGS
layer_script_begin
-->
</body>
</html>