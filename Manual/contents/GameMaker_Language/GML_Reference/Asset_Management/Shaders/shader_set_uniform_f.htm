<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>shader_set_uniform_f</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function shader_set_uniform_f" />
  <meta name="rh-index-keywords" content="shader_set_uniform_f" />
  <meta name="search-keywords" content="shader_set_uniform_f" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>shader_set_uniform_f</h1>
  <p>Za pomocą tej funkcji można ustawić wartość (lub wartości) stałej <span class="notranslate">shader</span>. Wcześniej należy uzyskać &quot;uchwyt&quot; do stałej za pomocą funkcji <a href="shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a>i musisz wiedzieć, jakiego typu jest to stała, aby przekazać do niej odpowiednią liczbę wartości zmiennoprzecinkowych, np. jeśli masz stałą <span class="inline">vec2</span>, musisz przekazać do funkcji dwie wartości.</p>
  <p>Wyjątkiem od powyższej reguły jest sytuacja, gdy mamy do czynienia z 32-bitowymi wartościami kolorów. Do <span class="notranslate">shader</span> można wprowadzić do ośmiu 32-bitowych wartości kolorów, które zostaną automatycznie przekonwertowane na wartości vec4 o wartościach 0 - 1. Jednak w tym celu <i>należy</i> użyć stałej <span class="notranslate">shader</span> o nazwie <span class="inline">in_Colour</span>, dla pojedynczego koloru, lub <span class="inline">in_Colour0</span>, <span class="inline">in_Colour1</span>, itd... aż do <span class="inline">in_Colour7</span> dla wielu wartości wejściowych. Poniższe przykłady pokazują, jak wyglądałoby to w samej witrynie <span class="notranslate">shader</span>:</p>
  <p class="code">    //Single colour<br />
        attribute vec2 in_Position;<br />
        attribute vec4 in_Colour;<br />
        attribute vec2 in_TextureCoord;<br />
    <br />
        //Multiple colours<br />
        attribute vec2 in_Position;<br />
        attribute vec4 in_Colour0;<br />
        attribute vec4 in_Colour1;<br />
        attribute vec2 in_TextureCoord;
  </p>
  <p>Należy również pamiętać, że jeśli chcesz wykonać skompresowane wartości normalne itp. przy użyciu 4-bajtowego formatu kolorów, będziesz musiał również użyć tego samego formatu &quot;in_Colour&quot;, jak pokazano powyżej.</p>
  <p class="note"><b></b><b>UWAGA</b>: Wszystkie uniformy muszą być ustawione <b>po</b> wywołaniu funkcji <span style="font-size:1px;"><a href="shader_set.htm"><span class="inline">shader_set()</span></a></span>, a przed wywołaniem funkcji <span style="font-size:1px;"><a href="shader_reset.htm"><span class="inline">shader_reset()</span></a></span>.</p>
  <p> </p>
  <h4>Składnia:</h4>
  <p class="code">shader_set_uniform_f(handle, value1 [, value2, value3, value4]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Opis</th>
      </tr>
      <tr>
        <td><span class="notranslate">handle</span></td>
        <td><span data-keyref="Type_Handle_Shader_Uniform">Jednolity uchwyt shadera</span></td>
        <td><span class="notranslate">The handle of the shader constant to set.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">value1 ... value4</span></td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td><span class="notranslate">The floating point value (or values) to set the shader constant to.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Zwroty:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Przykład:</h4>
  <p class="code">shader_set(shader_Glass);<br />
    shader_params = shader_get_uniform(shader_glass, &quot;u_vParams&quot;);<br />
    shader_set_uniform_f(shader_params, 0.1, 0.8, 0.25);<br />
    draw_self();<br />
    shader_reset();</p>
  <p>Powyższy kod pobierze uchwyt stałej <span class="notranslate">shader</span> &quot;u_vParams&quot; ( a <span class="inline">vec3</span>), a następnie ustawi tę stałą na podane wartości.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Shaders.htm">Shadery</a></div>
        <div style="float:right">Następny: <a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader_set_uniform_f_array</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
shader_set_uniform_f
-->
  <!-- TAGS
shader_set_uniform_f
-->
</body>
</html>