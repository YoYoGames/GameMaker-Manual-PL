<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Planowanie ruchu</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Motion Planning functions and variables" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Motion Planning,mp,mp funtions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Planowanie ruchu</h1>
  <p>W wielu grach chcesz, aby przeciwnicy, postacie niezależne, wrogowie itp. wchodzili w interakcję z graczem i wykazywali się pewną inteligencją podczas poruszania się, np. aby omijali przeszkody, planowali trasy i ogólnie nie wpadali na wszystko, co znajdzie się na ich drodze <span class="notranslate">path</span>! Aby to ułatwić, <span data-keyref="GameMaker Name">GameMaker</span> posiada szereg funkcji, które zajmują się planowaniem ruchu. Należy pamiętać, że choć zostały one zaprojektowane z myślą o takich rzeczach, jak przeciwnicy w grze, można ich używać do różnych rzeczy, np. do tworzenia płynnego sposobu wprowadzania tekstu, tworzenia przejść itp. Niezależnie od tego, co wybierzesz z poniższej listy w swojej grze, należy pamiętać, że w wielu sytuacjach jeden zestaw funkcji nie zapewni Ci idealnego rozwiązania i że będziesz musiał &quot;mieszać i dopasowywać&quot; funkcje, używając jednej lub drugiej w zależności od sytuacji w grze.</p>
  <p>Planowaniem ruchu w programie <span data-keyref="GameMaker Name">GameMaker</span> zajmują się funkcje <b>mp_</b>, które dzielą się na następujące trzy grupy:</p>
  <h2><label for="one">Funkcje liniowe</label></h2>
  <p>Ten rodzaj funkcji próbuje obliczyć bezkolizyjny adres <span class="notranslate">path</span> dla instancji. Po obliczeniu adresu <span class="notranslate">path</span> możesz przypisać go do instancji, by poruszała się w kierunku celu. Obliczenie strony <span class="notranslate">path</span> zajmie trochę czasu, ale potem wykonanie strony <span class="notranslate">path</span> będzie szybkie. Oczywiście jest to ważne tylko wtedy, gdy w międzyczasie sytuacja się nie zmieniła. Na przykład, jeśli zmienią się przeszkody, być może trzeba będzie ponownie obliczyć <span class="notranslate">path</span>. Ponownie zauważ, że te funkcje mogą zawieść i że dla instancji nie można znaleźć <span class="notranslate">path</span>.</p>
  <ul class="colour">
    <li><a href="mp_linear_step.htm"><span class="notranslate">mp_linear_step</span></a></li>
    <li><a href="mp_linear_step_object.htm"><span class="notranslate">mp_linear_step_object</span></a></li>
    <li><a href="mp_linear_path.htm"><span class="notranslate">mp_linear_path</span></a></li>
    <li><a href="mp_linear_path_object.htm"><span class="notranslate">mp_linear_path_object</span></a></li>
  </ul>
  <p> </p>
  <h2><label for="three">Potencjalne funkcje</label></h2>
  <p>Są to podstawowe funkcje unikania, dobre dla prostego AI. Ich działanie polega na tym, że instancja robi krok w kierunku określonej pozycji docelowej, starając się iść prosto, jeśli to możliwe, ale w razie potrzeby obierając inny kierunek. Te funkcje powinny być używane w <b>zdarzeniu Step</b> instancji.</p>
  <ul class="colour">
    <li><a href="mp_potential_settings.htm"><span class="notranslate">mp_potential_settings</span></a></li>
    <li><a href="mp_potential_step.htm"><span class="notranslate">mp_potential_step</span></a></li>
    <li><a href="mp_potential_step_object.htm"><span class="notranslate">mp_potential_step_object</span></a></li>
    <li><a href="mp_potential_path.htm"><span class="notranslate">mp_potential_path</span></a></li>
    <li><a href="mp_potential_path_object.htm"><span class="notranslate">mp_potential_path_object</span></a></li>
  </ul>
  <p> </p>
  <h2><label for="two">Funkcje siatki</label></h2>
  <p>Ostatni typ funkcji wykorzystuje znacznie bardziej złożony mechanizm oparty na podejściu siatkowym (czasami nazywany algorytmem A*). Będzie on znacznie skuteczniejszy w znajdowaniu adresu <span class="notranslate">paths</span> (choć nadal może zawieść) i znajdzie najkrótszy możliwy adres <span class="notranslate">paths</span>, ale jego skonfigurowanie wymaga więcej pracy ze strony użytkownika.</p>
  <p>Ogólna idea jest następująca - najpierw tworzymy siatkę, która pokrywa stronę <span class="notranslate">room</span> (lub jej odpowiednią część). Możesz wybrać siatkę drobną, która będzie wolniejsza, lub siatkę zgrubną, ale obie powinny być oparte na rozdzielczości strony <span class="notranslate">room</span>, tak aby wyszukiwanie ścieżek było jak najdokładniejsze. Na przykład jeśli masz stronę <span class="notranslate">room</span> o rozdzielczości 400x200 pikseli, możesz zastosować siatkę o rozdzielczości 40, 20 lub 10... Wszystko zależy od tego, jak dokładna ma być strona <span class="notranslate">path</span> i jak dużo przetwarzania ma wykonać <span class="notranslate">GameMaker</span>, aby ją wygenerować.</p>
  <p>Następnie dla wszystkich odpowiednich stron <span class="notranslate">objects</span>, które chcemy ominąć, musimy określić komórki siatki, na które się one nakładają (na podstawie ich pól ograniczających lub dokładnej strony <span class="notranslate">sprite</span>), i oznaczyć te komórki jako zabronione. Tak więc komórka zostanie oznaczona jako całkowicie zabroniona, nawet jeśli przeszkoda tylko częściowo na nią zachodzi.</p>
  <p>Na koniec podajemy pozycję startową i docelową, które <i>muszą</i> leżeć w wolnych komórkach, a funkcja oblicza najkrótszą możliwą trasę <span class="notranslate">path</span> między tymi pozycjami. Strona <span class="notranslate">path</span> będzie przebiegać między środkami wszystkich wolnych komórek, więc jeśli komórki są na tyle duże, że instancja umieszczona w ich środku będzie leżeć całkowicie wewnątrz nich, to zadanie się powiedzie. Ten <span class="notranslate">path</span> jest następnie przypisywany do instancji, która ma podążać za nim, za pomocą <a href="../../Asset_Management/Paths/Paths.htm"><span class="inline">path_*</span></a> funkcji. Powinieneś zdać sobie sprawę, jak ważny jest rozmiar komórek, ponieważ muszą one być na tyle duże, by ruchoma instancja <span class="notranslate">object</span> umieszczona w środku komórki leżała <i>całkowicie</i> wewnątrz niej. (Uważaj na położenie początku adresu <span class="notranslate">object</span>. Pamiętaj też, że możesz przesunąć adres <span class="notranslate">path</span>, jeśli początek adresu <span class="notranslate">object</span> nie znajduje się w jej środku)! Z drugiej strony, im mniejsze komórki, tym więcej jest możliwych <span class="notranslate">paths</span>. Jeśli komórki będą zbyt duże, otwory między przeszkodami mogą zostać zamknięte, ponieważ wszystkie komórki przecinają przeszkodę.</p>
  <ul class="colour">
    <li><a href="mp_grid_create.htm"><span class="notranslate">mp_grid_create</span></a></li>
    <li><a href="mp_grid_destroy.htm"><span class="notranslate">mp_grid_destroy</span></a></li>
    <li><a href="mp_grid_path.htm"><span class="notranslate">mp_grid_path</span></a></li>
    <li><a href="mp_grid_add_cell.htm"><span class="notranslate">mp_grid_add_cell</span></a></li>
    <li><a href="mp_grid_add_instances.htm"><span class="notranslate">mp_grid_add_instances</span></a></li>
    <li><a href="mp_grid_add_rectangle.htm"><span class="notranslate">mp_grid_add_rectangle</span></a></li>
    <li><a href="mp_grid_get_cell.htm"><span class="notranslate">mp_grid_get_cell</span></a></li>
    <li><a href="mp_grid_clear_all.htm"><span class="notranslate">mp_grid_clear_all</span></a></li>
    <li><a href="mp_grid_clear_cell.htm"><span class="notranslate">mp_grid_clear_cell</span></a></li>
    <li><a href="mp_grid_clear_rectangle.htm"><span class="notranslate">mp_grid_clear_rectangle</span></a></li>
    <li><a href="mp_grid_to_ds_grid.htm"><span class="notranslate">mp_grid_to_ds_grid</span></a></li>
    <li><a href="mp_grid_draw.htm"><span class="notranslate">mp_grid_draw</span></a></li>
  </ul>
  <p> </p>
  <p>Podejście oparte na siatce jest bardzo efektywne (i jest stosowane w wielu profesjonalnych grach), ale wymaga od Ciebie dokładnego przemyślenia, ponieważ musisz określić, jaki obszar i rozmiar komórki są wystarczające do rozwiązania gry. Trzeba też określić, których stron <span class="notranslate">objects</span> należy unikać i czy ważne jest dokładne sprawdzanie. Wszystkie te parametry mają duży wpływ na efektywność rozwiązania. Musisz także zdecydować, czy jest to rzeczywiście konieczne, ponieważ być może jedna z mniej kosztownych funkcji <span class="inline">mp_*</span> może wykonać to zadanie równie dobrze.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="../Movement_And_Collisions.htm">Ruch i zderzenia</a></div>
        <div style="float:right">Następny: <a href="../Collisions/Collisions.htm">Kolizje</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
Motion Planning
MP Functions
Motion Planning Functions
-->
  <!-- TAGS
mp_functions
-->
</body>
</html>